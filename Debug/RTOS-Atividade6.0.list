
RTOS-Atividade6.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e274  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  0800e478  0800e478  0000f478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea10  0800ea10  00010318  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea10  0800ea10  0000fa10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea18  0800ea18  00010318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea18  0800ea18  0000fa18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ea1c  0800ea1c  0000fa1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800ea20  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d8  0800ebf8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000278  0800ec98  00010278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005ab4  20000318  0800ed38  00010318  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20005dcc  0800ed38  00010dcc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00010318  2**0
                  CONTENTS, READONLY
 14 .debug_info   00025915  00000000  00000000  00010346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004bb4  00000000  00000000  00035c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001d40  00000000  00000000  0003a810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000016c2  00000000  00000000  0003c550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005d7b  00000000  00000000  0003dc12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000237aa  00000000  00000000  0004398d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011596a  00000000  00000000  00067137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0017caa1  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008f80  00000000  00000000  0017cae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  00185a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000318 	.word	0x20000318
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e45c 	.word	0x0800e45c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000031c 	.word	0x2000031c
 800023c:	0800e45c 	.word	0x0800e45c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a2 	b.w	80009c4 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	460c      	mov	r4, r1
 8000710:	2b00      	cmp	r3, #0
 8000712:	d14e      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000714:	4694      	mov	ip, r2
 8000716:	458c      	cmp	ip, r1
 8000718:	4686      	mov	lr, r0
 800071a:	fab2 f282 	clz	r2, r2
 800071e:	d962      	bls.n	80007e6 <__udivmoddi4+0xde>
 8000720:	b14a      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000722:	f1c2 0320 	rsb	r3, r2, #32
 8000726:	4091      	lsls	r1, r2
 8000728:	fa20 f303 	lsr.w	r3, r0, r3
 800072c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000730:	4319      	orrs	r1, r3
 8000732:	fa00 fe02 	lsl.w	lr, r0, r2
 8000736:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800073a:	fa1f f68c 	uxth.w	r6, ip
 800073e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000742:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000746:	fb07 1114 	mls	r1, r7, r4, r1
 800074a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074e:	fb04 f106 	mul.w	r1, r4, r6
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f104 30ff 	add.w	r0, r4, #4294967295
 800075e:	f080 8112 	bcs.w	8000986 <__udivmoddi4+0x27e>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 810f 	bls.w	8000986 <__udivmoddi4+0x27e>
 8000768:	3c02      	subs	r4, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a59      	subs	r1, r3, r1
 800076e:	fa1f f38e 	uxth.w	r3, lr
 8000772:	fbb1 f0f7 	udiv	r0, r1, r7
 8000776:	fb07 1110 	mls	r1, r7, r0, r1
 800077a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077e:	fb00 f606 	mul.w	r6, r0, r6
 8000782:	429e      	cmp	r6, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x94>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f100 31ff 	add.w	r1, r0, #4294967295
 800078e:	f080 80fc 	bcs.w	800098a <__udivmoddi4+0x282>
 8000792:	429e      	cmp	r6, r3
 8000794:	f240 80f9 	bls.w	800098a <__udivmoddi4+0x282>
 8000798:	4463      	add	r3, ip
 800079a:	3802      	subs	r0, #2
 800079c:	1b9b      	subs	r3, r3, r6
 800079e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007a2:	2100      	movs	r1, #0
 80007a4:	b11d      	cbz	r5, 80007ae <__udivmoddi4+0xa6>
 80007a6:	40d3      	lsrs	r3, r2
 80007a8:	2200      	movs	r2, #0
 80007aa:	e9c5 3200 	strd	r3, r2, [r5]
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d905      	bls.n	80007c2 <__udivmoddi4+0xba>
 80007b6:	b10d      	cbz	r5, 80007bc <__udivmoddi4+0xb4>
 80007b8:	e9c5 0100 	strd	r0, r1, [r5]
 80007bc:	2100      	movs	r1, #0
 80007be:	4608      	mov	r0, r1
 80007c0:	e7f5      	b.n	80007ae <__udivmoddi4+0xa6>
 80007c2:	fab3 f183 	clz	r1, r3
 80007c6:	2900      	cmp	r1, #0
 80007c8:	d146      	bne.n	8000858 <__udivmoddi4+0x150>
 80007ca:	42a3      	cmp	r3, r4
 80007cc:	d302      	bcc.n	80007d4 <__udivmoddi4+0xcc>
 80007ce:	4290      	cmp	r0, r2
 80007d0:	f0c0 80f0 	bcc.w	80009b4 <__udivmoddi4+0x2ac>
 80007d4:	1a86      	subs	r6, r0, r2
 80007d6:	eb64 0303 	sbc.w	r3, r4, r3
 80007da:	2001      	movs	r0, #1
 80007dc:	2d00      	cmp	r5, #0
 80007de:	d0e6      	beq.n	80007ae <__udivmoddi4+0xa6>
 80007e0:	e9c5 6300 	strd	r6, r3, [r5]
 80007e4:	e7e3      	b.n	80007ae <__udivmoddi4+0xa6>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	f040 8090 	bne.w	800090c <__udivmoddi4+0x204>
 80007ec:	eba1 040c 	sub.w	r4, r1, ip
 80007f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007f4:	fa1f f78c 	uxth.w	r7, ip
 80007f8:	2101      	movs	r1, #1
 80007fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80007fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000802:	fb08 4416 	mls	r4, r8, r6, r4
 8000806:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800080a:	fb07 f006 	mul.w	r0, r7, r6
 800080e:	4298      	cmp	r0, r3
 8000810:	d908      	bls.n	8000824 <__udivmoddi4+0x11c>
 8000812:	eb1c 0303 	adds.w	r3, ip, r3
 8000816:	f106 34ff 	add.w	r4, r6, #4294967295
 800081a:	d202      	bcs.n	8000822 <__udivmoddi4+0x11a>
 800081c:	4298      	cmp	r0, r3
 800081e:	f200 80cd 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 8000822:	4626      	mov	r6, r4
 8000824:	1a1c      	subs	r4, r3, r0
 8000826:	fa1f f38e 	uxth.w	r3, lr
 800082a:	fbb4 f0f8 	udiv	r0, r4, r8
 800082e:	fb08 4410 	mls	r4, r8, r0, r4
 8000832:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000836:	fb00 f707 	mul.w	r7, r0, r7
 800083a:	429f      	cmp	r7, r3
 800083c:	d908      	bls.n	8000850 <__udivmoddi4+0x148>
 800083e:	eb1c 0303 	adds.w	r3, ip, r3
 8000842:	f100 34ff 	add.w	r4, r0, #4294967295
 8000846:	d202      	bcs.n	800084e <__udivmoddi4+0x146>
 8000848:	429f      	cmp	r7, r3
 800084a:	f200 80b0 	bhi.w	80009ae <__udivmoddi4+0x2a6>
 800084e:	4620      	mov	r0, r4
 8000850:	1bdb      	subs	r3, r3, r7
 8000852:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000856:	e7a5      	b.n	80007a4 <__udivmoddi4+0x9c>
 8000858:	f1c1 0620 	rsb	r6, r1, #32
 800085c:	408b      	lsls	r3, r1
 800085e:	fa22 f706 	lsr.w	r7, r2, r6
 8000862:	431f      	orrs	r7, r3
 8000864:	fa20 fc06 	lsr.w	ip, r0, r6
 8000868:	fa04 f301 	lsl.w	r3, r4, r1
 800086c:	ea43 030c 	orr.w	r3, r3, ip
 8000870:	40f4      	lsrs	r4, r6
 8000872:	fa00 f801 	lsl.w	r8, r0, r1
 8000876:	0c38      	lsrs	r0, r7, #16
 8000878:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800087c:	fbb4 fef0 	udiv	lr, r4, r0
 8000880:	fa1f fc87 	uxth.w	ip, r7
 8000884:	fb00 441e 	mls	r4, r0, lr, r4
 8000888:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800088c:	fb0e f90c 	mul.w	r9, lr, ip
 8000890:	45a1      	cmp	r9, r4
 8000892:	fa02 f201 	lsl.w	r2, r2, r1
 8000896:	d90a      	bls.n	80008ae <__udivmoddi4+0x1a6>
 8000898:	193c      	adds	r4, r7, r4
 800089a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800089e:	f080 8084 	bcs.w	80009aa <__udivmoddi4+0x2a2>
 80008a2:	45a1      	cmp	r9, r4
 80008a4:	f240 8081 	bls.w	80009aa <__udivmoddi4+0x2a2>
 80008a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008ac:	443c      	add	r4, r7
 80008ae:	eba4 0409 	sub.w	r4, r4, r9
 80008b2:	fa1f f983 	uxth.w	r9, r3
 80008b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008ba:	fb00 4413 	mls	r4, r0, r3, r4
 80008be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008c6:	45a4      	cmp	ip, r4
 80008c8:	d907      	bls.n	80008da <__udivmoddi4+0x1d2>
 80008ca:	193c      	adds	r4, r7, r4
 80008cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80008d0:	d267      	bcs.n	80009a2 <__udivmoddi4+0x29a>
 80008d2:	45a4      	cmp	ip, r4
 80008d4:	d965      	bls.n	80009a2 <__udivmoddi4+0x29a>
 80008d6:	3b02      	subs	r3, #2
 80008d8:	443c      	add	r4, r7
 80008da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008de:	fba0 9302 	umull	r9, r3, r0, r2
 80008e2:	eba4 040c 	sub.w	r4, r4, ip
 80008e6:	429c      	cmp	r4, r3
 80008e8:	46ce      	mov	lr, r9
 80008ea:	469c      	mov	ip, r3
 80008ec:	d351      	bcc.n	8000992 <__udivmoddi4+0x28a>
 80008ee:	d04e      	beq.n	800098e <__udivmoddi4+0x286>
 80008f0:	b155      	cbz	r5, 8000908 <__udivmoddi4+0x200>
 80008f2:	ebb8 030e 	subs.w	r3, r8, lr
 80008f6:	eb64 040c 	sbc.w	r4, r4, ip
 80008fa:	fa04 f606 	lsl.w	r6, r4, r6
 80008fe:	40cb      	lsrs	r3, r1
 8000900:	431e      	orrs	r6, r3
 8000902:	40cc      	lsrs	r4, r1
 8000904:	e9c5 6400 	strd	r6, r4, [r5]
 8000908:	2100      	movs	r1, #0
 800090a:	e750      	b.n	80007ae <__udivmoddi4+0xa6>
 800090c:	f1c2 0320 	rsb	r3, r2, #32
 8000910:	fa20 f103 	lsr.w	r1, r0, r3
 8000914:	fa0c fc02 	lsl.w	ip, ip, r2
 8000918:	fa24 f303 	lsr.w	r3, r4, r3
 800091c:	4094      	lsls	r4, r2
 800091e:	430c      	orrs	r4, r1
 8000920:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000924:	fa00 fe02 	lsl.w	lr, r0, r2
 8000928:	fa1f f78c 	uxth.w	r7, ip
 800092c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000930:	fb08 3110 	mls	r1, r8, r0, r3
 8000934:	0c23      	lsrs	r3, r4, #16
 8000936:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800093a:	fb00 f107 	mul.w	r1, r0, r7
 800093e:	4299      	cmp	r1, r3
 8000940:	d908      	bls.n	8000954 <__udivmoddi4+0x24c>
 8000942:	eb1c 0303 	adds.w	r3, ip, r3
 8000946:	f100 36ff 	add.w	r6, r0, #4294967295
 800094a:	d22c      	bcs.n	80009a6 <__udivmoddi4+0x29e>
 800094c:	4299      	cmp	r1, r3
 800094e:	d92a      	bls.n	80009a6 <__udivmoddi4+0x29e>
 8000950:	3802      	subs	r0, #2
 8000952:	4463      	add	r3, ip
 8000954:	1a5b      	subs	r3, r3, r1
 8000956:	b2a4      	uxth	r4, r4
 8000958:	fbb3 f1f8 	udiv	r1, r3, r8
 800095c:	fb08 3311 	mls	r3, r8, r1, r3
 8000960:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000964:	fb01 f307 	mul.w	r3, r1, r7
 8000968:	42a3      	cmp	r3, r4
 800096a:	d908      	bls.n	800097e <__udivmoddi4+0x276>
 800096c:	eb1c 0404 	adds.w	r4, ip, r4
 8000970:	f101 36ff 	add.w	r6, r1, #4294967295
 8000974:	d213      	bcs.n	800099e <__udivmoddi4+0x296>
 8000976:	42a3      	cmp	r3, r4
 8000978:	d911      	bls.n	800099e <__udivmoddi4+0x296>
 800097a:	3902      	subs	r1, #2
 800097c:	4464      	add	r4, ip
 800097e:	1ae4      	subs	r4, r4, r3
 8000980:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000984:	e739      	b.n	80007fa <__udivmoddi4+0xf2>
 8000986:	4604      	mov	r4, r0
 8000988:	e6f0      	b.n	800076c <__udivmoddi4+0x64>
 800098a:	4608      	mov	r0, r1
 800098c:	e706      	b.n	800079c <__udivmoddi4+0x94>
 800098e:	45c8      	cmp	r8, r9
 8000990:	d2ae      	bcs.n	80008f0 <__udivmoddi4+0x1e8>
 8000992:	ebb9 0e02 	subs.w	lr, r9, r2
 8000996:	eb63 0c07 	sbc.w	ip, r3, r7
 800099a:	3801      	subs	r0, #1
 800099c:	e7a8      	b.n	80008f0 <__udivmoddi4+0x1e8>
 800099e:	4631      	mov	r1, r6
 80009a0:	e7ed      	b.n	800097e <__udivmoddi4+0x276>
 80009a2:	4603      	mov	r3, r0
 80009a4:	e799      	b.n	80008da <__udivmoddi4+0x1d2>
 80009a6:	4630      	mov	r0, r6
 80009a8:	e7d4      	b.n	8000954 <__udivmoddi4+0x24c>
 80009aa:	46d6      	mov	lr, sl
 80009ac:	e77f      	b.n	80008ae <__udivmoddi4+0x1a6>
 80009ae:	4463      	add	r3, ip
 80009b0:	3802      	subs	r0, #2
 80009b2:	e74d      	b.n	8000850 <__udivmoddi4+0x148>
 80009b4:	4606      	mov	r6, r0
 80009b6:	4623      	mov	r3, r4
 80009b8:	4608      	mov	r0, r1
 80009ba:	e70f      	b.n	80007dc <__udivmoddi4+0xd4>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	e730      	b.n	8000824 <__udivmoddi4+0x11c>
 80009c2:	bf00      	nop

080009c4 <__aeabi_idiv0>:
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009cc:	f000 ffcf 	bl	800196e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d0:	f000 f860 	bl	8000a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d4:	f000 f9ec 	bl	8000db0 <MX_GPIO_Init>
  MX_DMA_Init();
 80009d8:	f000 f9cc 	bl	8000d74 <MX_DMA_Init>
  MX_ETH_Init();
 80009dc:	f000 f91e 	bl	8000c1c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009e0:	f000 f96a 	bl	8000cb8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009e4:	f000 f998 	bl	8000d18 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80009e8:	f000 f8c6 	bl	8000b78 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009ec:	f005 fd18 	bl	8006420 <osKernelInitialize>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemBotao */
  SemBotaoHandle = osSemaphoreNew(1, 0, &SemBotao_attributes);
 80009f0:	4a1a      	ldr	r2, [pc, #104]	@ (8000a5c <main+0x94>)
 80009f2:	2100      	movs	r1, #0
 80009f4:	2001      	movs	r0, #1
 80009f6:	f005 fe51 	bl	800669c <osSemaphoreNew>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4a18      	ldr	r2, [pc, #96]	@ (8000a60 <main+0x98>)
 80009fe:	6013      	str	r3, [r2, #0]

  /* creation of SemFimLeitura */
  SemFimLeituraHandle = osSemaphoreNew(1, 0, &SemFimLeitura_attributes);
 8000a00:	4a18      	ldr	r2, [pc, #96]	@ (8000a64 <main+0x9c>)
 8000a02:	2100      	movs	r1, #0
 8000a04:	2001      	movs	r0, #1
 8000a06:	f005 fe49 	bl	800669c <osSemaphoreNew>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4a16      	ldr	r2, [pc, #88]	@ (8000a68 <main+0xa0>)
 8000a0e:	6013      	str	r3, [r2, #0]

  /* creation of SemConsumidora */
  SemConsumidoraHandle = osSemaphoreNew(1, 0, &SemConsumidora_attributes);
 8000a10:	4a16      	ldr	r2, [pc, #88]	@ (8000a6c <main+0xa4>)
 8000a12:	2100      	movs	r1, #0
 8000a14:	2001      	movs	r0, #1
 8000a16:	f005 fe41 	bl	800669c <osSemaphoreNew>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	4a14      	ldr	r2, [pc, #80]	@ (8000a70 <main+0xa8>)
 8000a1e:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of DadoSensorFila */
   DadoSensorFilaHandle = osMessageQueueNew (1024, sizeof(uint16_t), & DadoSensorFila_attributes);
 8000a20:	4a14      	ldr	r2, [pc, #80]	@ (8000a74 <main+0xac>)
 8000a22:	2102      	movs	r1, #2
 8000a24:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000a28:	f005 ff92 	bl	8006950 <osMessageQueueNew>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4a12      	ldr	r2, [pc, #72]	@ (8000a78 <main+0xb0>)
 8000a30:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskProdutora */
  TaskProdutoraHandle = osThreadNew(StartTaskProdutora, NULL, &TaskProdutora_attributes);
 8000a32:	4a12      	ldr	r2, [pc, #72]	@ (8000a7c <main+0xb4>)
 8000a34:	2100      	movs	r1, #0
 8000a36:	4812      	ldr	r0, [pc, #72]	@ (8000a80 <main+0xb8>)
 8000a38:	f005 fd5c 	bl	80064f4 <osThreadNew>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	4a11      	ldr	r2, [pc, #68]	@ (8000a84 <main+0xbc>)
 8000a40:	6013      	str	r3, [r2, #0]

  /* creation of TaskConsumidora */
  TaskConsumidoraHandle = osThreadNew(StartTaskConsumidora, NULL, &TaskConsumidora_attributes);
 8000a42:	4a11      	ldr	r2, [pc, #68]	@ (8000a88 <main+0xc0>)
 8000a44:	2100      	movs	r1, #0
 8000a46:	4811      	ldr	r0, [pc, #68]	@ (8000a8c <main+0xc4>)
 8000a48:	f005 fd54 	bl	80064f4 <osThreadNew>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	4a10      	ldr	r2, [pc, #64]	@ (8000a90 <main+0xc8>)
 8000a50:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a52:	f005 fd19 	bl	8006488 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000a56:	bf00      	nop
 8000a58:	e7fd      	b.n	8000a56 <main+0x8e>
 8000a5a:	bf00      	nop
 8000a5c:	0800e590 	.word	0x0800e590
 8000a60:	20000a38 	.word	0x20000a38
 8000a64:	0800e5a0 	.word	0x0800e5a0
 8000a68:	20000a3c 	.word	0x20000a3c
 8000a6c:	0800e5b0 	.word	0x0800e5b0
 8000a70:	20000a40 	.word	0x20000a40
 8000a74:	0800e578 	.word	0x0800e578
 8000a78:	20000a34 	.word	0x20000a34
 8000a7c:	0800e530 	.word	0x0800e530
 8000a80:	08000f65 	.word	0x08000f65
 8000a84:	20000a2c 	.word	0x20000a2c
 8000a88:	0800e554 	.word	0x0800e554
 8000a8c:	08001031 	.word	0x08001031
 8000a90:	20000a30 	.word	0x20000a30

08000a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b094      	sub	sp, #80	@ 0x50
 8000a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	2234      	movs	r2, #52	@ 0x34
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f00a f971 	bl	800ad8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa8:	f107 0308 	add.w	r3, r7, #8
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ab8:	f002 ffd4 	bl	8003a64 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <SystemClock_Config+0xdc>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac0:	4a2b      	ldr	r2, [pc, #172]	@ (8000b70 <SystemClock_Config+0xdc>)
 8000ac2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac8:	4b29      	ldr	r3, [pc, #164]	@ (8000b70 <SystemClock_Config+0xdc>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000acc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ad4:	4b27      	ldr	r3, [pc, #156]	@ (8000b74 <SystemClock_Config+0xe0>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a26      	ldr	r2, [pc, #152]	@ (8000b74 <SystemClock_Config+0xe0>)
 8000ada:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ade:	6013      	str	r3, [r2, #0]
 8000ae0:	4b24      	ldr	r3, [pc, #144]	@ (8000b74 <SystemClock_Config+0xe0>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aec:	2301      	movs	r3, #1
 8000aee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000af0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000af4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af6:	2302      	movs	r3, #2
 8000af8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000afa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000afe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b00:	2304      	movs	r3, #4
 8000b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000b04:	23d8      	movs	r3, #216	@ 0xd8
 8000b06:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000b0c:	2309      	movs	r3, #9
 8000b0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f003 f803 	bl	8003b24 <HAL_RCC_OscConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b24:	f000 fb27 	bl	8001176 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b28:	f002 ffac 	bl	8003a84 <HAL_PWREx_EnableOverDrive>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000b32:	f000 fb20 	bl	8001176 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b36:	230f      	movs	r3, #15
 8000b38:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b42:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b4c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000b4e:	f107 0308 	add.w	r3, r7, #8
 8000b52:	2107      	movs	r1, #7
 8000b54:	4618      	mov	r0, r3
 8000b56:	f003 fa93 	bl	8004080 <HAL_RCC_ClockConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000b60:	f000 fb09 	bl	8001176 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000b64:	f003 fb78 	bl	8004258 <HAL_RCC_EnableCSS>
}
 8000b68:	bf00      	nop
 8000b6a:	3750      	adds	r7, #80	@ 0x50
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40007000 	.word	0x40007000

08000b78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b8a:	4b21      	ldr	r3, [pc, #132]	@ (8000c10 <MX_ADC1_Init+0x98>)
 8000b8c:	4a21      	ldr	r2, [pc, #132]	@ (8000c14 <MX_ADC1_Init+0x9c>)
 8000b8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b90:	4b1f      	ldr	r3, [pc, #124]	@ (8000c10 <MX_ADC1_Init+0x98>)
 8000b92:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b98:	4b1d      	ldr	r3, [pc, #116]	@ (8000c10 <MX_ADC1_Init+0x98>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c10 <MX_ADC1_Init+0x98>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c10 <MX_ADC1_Init+0x98>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000baa:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <MX_ADC1_Init+0x98>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bb2:	4b17      	ldr	r3, [pc, #92]	@ (8000c10 <MX_ADC1_Init+0x98>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bb8:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <MX_ADC1_Init+0x98>)
 8000bba:	4a17      	ldr	r2, [pc, #92]	@ (8000c18 <MX_ADC1_Init+0xa0>)
 8000bbc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bbe:	4b14      	ldr	r3, [pc, #80]	@ (8000c10 <MX_ADC1_Init+0x98>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	@ (8000c10 <MX_ADC1_Init+0x98>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000bca:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <MX_ADC1_Init+0x98>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <MX_ADC1_Init+0x98>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bd8:	480d      	ldr	r0, [pc, #52]	@ (8000c10 <MX_ADC1_Init+0x98>)
 8000bda:	f000 ff19 	bl	8001a10 <HAL_ADC_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000be4:	f000 fac7 	bl	8001176 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bec:	2301      	movs	r3, #1
 8000bee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4805      	ldr	r0, [pc, #20]	@ (8000c10 <MX_ADC1_Init+0x98>)
 8000bfa:	f001 f979 	bl	8001ef0 <HAL_ADC_ConfigChannel>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c04:	f000 fab7 	bl	8001176 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	2000036c 	.word	0x2000036c
 8000c14:	40012000 	.word	0x40012000
 8000c18:	0f000001 	.word	0x0f000001

08000c1c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca0 <MX_ETH_Init+0x84>)
 8000c22:	4a20      	ldr	r2, [pc, #128]	@ (8000ca4 <MX_ETH_Init+0x88>)
 8000c24:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c26:	4b20      	ldr	r3, [pc, #128]	@ (8000ca8 <MX_ETH_Init+0x8c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca8 <MX_ETH_Init+0x8c>)
 8000c2e:	2280      	movs	r2, #128	@ 0x80
 8000c30:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000c32:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca8 <MX_ETH_Init+0x8c>)
 8000c34:	22e1      	movs	r2, #225	@ 0xe1
 8000c36:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000c38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca8 <MX_ETH_Init+0x8c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca8 <MX_ETH_Init+0x8c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000c44:	4b18      	ldr	r3, [pc, #96]	@ (8000ca8 <MX_ETH_Init+0x8c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000c4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <MX_ETH_Init+0x84>)
 8000c4c:	4a16      	ldr	r2, [pc, #88]	@ (8000ca8 <MX_ETH_Init+0x8c>)
 8000c4e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c50:	4b13      	ldr	r3, [pc, #76]	@ (8000ca0 <MX_ETH_Init+0x84>)
 8000c52:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c56:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000c58:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <MX_ETH_Init+0x84>)
 8000c5a:	4a14      	ldr	r2, [pc, #80]	@ (8000cac <MX_ETH_Init+0x90>)
 8000c5c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000c5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <MX_ETH_Init+0x84>)
 8000c60:	4a13      	ldr	r2, [pc, #76]	@ (8000cb0 <MX_ETH_Init+0x94>)
 8000c62:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <MX_ETH_Init+0x84>)
 8000c66:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000c6a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c6c:	480c      	ldr	r0, [pc, #48]	@ (8000ca0 <MX_ETH_Init+0x84>)
 8000c6e:	f002 f879 	bl	8002d64 <HAL_ETH_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000c78:	f000 fa7d 	bl	8001176 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c7c:	2238      	movs	r2, #56	@ 0x38
 8000c7e:	2100      	movs	r1, #0
 8000c80:	480c      	ldr	r0, [pc, #48]	@ (8000cb4 <MX_ETH_Init+0x98>)
 8000c82:	f00a f882 	bl	800ad8a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <MX_ETH_Init+0x98>)
 8000c88:	2221      	movs	r2, #33	@ 0x21
 8000c8a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	@ (8000cb4 <MX_ETH_Init+0x98>)
 8000c8e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000c92:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c94:	4b07      	ldr	r3, [pc, #28]	@ (8000cb4 <MX_ETH_Init+0x98>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000414 	.word	0x20000414
 8000ca4:	40028000 	.word	0x40028000
 8000ca8:	20001244 	.word	0x20001244
 8000cac:	20000278 	.word	0x20000278
 8000cb0:	200001d8 	.word	0x200001d8
 8000cb4:	20000334 	.word	0x20000334

08000cb8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cbc:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <MX_USART3_UART_Init+0x58>)
 8000cbe:	4a15      	ldr	r2, [pc, #84]	@ (8000d14 <MX_USART3_UART_Init+0x5c>)
 8000cc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	@ (8000d10 <MX_USART3_UART_Init+0x58>)
 8000cc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <MX_USART3_UART_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <MX_USART3_UART_Init+0x58>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <MX_USART3_UART_Init+0x58>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <MX_USART3_UART_Init+0x58>)
 8000cde:	220c      	movs	r2, #12
 8000ce0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <MX_USART3_UART_Init+0x58>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <MX_USART3_UART_Init+0x58>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cee:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <MX_USART3_UART_Init+0x58>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <MX_USART3_UART_Init+0x58>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cfa:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <MX_USART3_UART_Init+0x58>)
 8000cfc:	f004 fb3a 	bl	8005374 <HAL_UART_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d06:	f000 fa36 	bl	8001176 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200004c4 	.word	0x200004c4
 8000d14:	40004800 	.word	0x40004800

08000d18 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d1c:	4b14      	ldr	r3, [pc, #80]	@ (8000d70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d1e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d22:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d24:	4b12      	ldr	r3, [pc, #72]	@ (8000d70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d26:	2206      	movs	r2, #6
 8000d28:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	@ (8000d70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	@ (8000d70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d38:	2202      	movs	r2, #2
 8000d3a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d42:	4b0b      	ldr	r3, [pc, #44]	@ (8000d70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d48:	4b09      	ldr	r3, [pc, #36]	@ (8000d70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d4e:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d54:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d5a:	4805      	ldr	r0, [pc, #20]	@ (8000d70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d5c:	f002 fd48 	bl	80037f0 <HAL_PCD_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d66:	f000 fa06 	bl	8001176 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2000054c 	.word	0x2000054c

08000d74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <MX_DMA_Init+0x38>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	4a0b      	ldr	r2, [pc, #44]	@ (8000dac <MX_DMA_Init+0x38>)
 8000d80:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d86:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <MX_DMA_Init+0x38>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2105      	movs	r1, #5
 8000d96:	2038      	movs	r0, #56	@ 0x38
 8000d98:	f001 fc42 	bl	8002620 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d9c:	2038      	movs	r0, #56	@ 0x38
 8000d9e:	f001 fc5b 	bl	8002658 <HAL_NVIC_EnableIRQ>

}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800

08000db0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08c      	sub	sp, #48	@ 0x30
 8000db4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
 8000dc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc6:	4b4b      	ldr	r3, [pc, #300]	@ (8000ef4 <MX_GPIO_Init+0x144>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	4a4a      	ldr	r2, [pc, #296]	@ (8000ef4 <MX_GPIO_Init+0x144>)
 8000dcc:	f043 0304 	orr.w	r3, r3, #4
 8000dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd2:	4b48      	ldr	r3, [pc, #288]	@ (8000ef4 <MX_GPIO_Init+0x144>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	61bb      	str	r3, [r7, #24]
 8000ddc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dde:	4b45      	ldr	r3, [pc, #276]	@ (8000ef4 <MX_GPIO_Init+0x144>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	4a44      	ldr	r2, [pc, #272]	@ (8000ef4 <MX_GPIO_Init+0x144>)
 8000de4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dea:	4b42      	ldr	r3, [pc, #264]	@ (8000ef4 <MX_GPIO_Init+0x144>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ef4 <MX_GPIO_Init+0x144>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	4a3e      	ldr	r2, [pc, #248]	@ (8000ef4 <MX_GPIO_Init+0x144>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e02:	4b3c      	ldr	r3, [pc, #240]	@ (8000ef4 <MX_GPIO_Init+0x144>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	4b39      	ldr	r3, [pc, #228]	@ (8000ef4 <MX_GPIO_Init+0x144>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a38      	ldr	r2, [pc, #224]	@ (8000ef4 <MX_GPIO_Init+0x144>)
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b36      	ldr	r3, [pc, #216]	@ (8000ef4 <MX_GPIO_Init+0x144>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e26:	4b33      	ldr	r3, [pc, #204]	@ (8000ef4 <MX_GPIO_Init+0x144>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	4a32      	ldr	r2, [pc, #200]	@ (8000ef4 <MX_GPIO_Init+0x144>)
 8000e2c:	f043 0308 	orr.w	r3, r3, #8
 8000e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e32:	4b30      	ldr	r3, [pc, #192]	@ (8000ef4 <MX_GPIO_Init+0x144>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	f003 0308 	and.w	r3, r3, #8
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef4 <MX_GPIO_Init+0x144>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	4a2c      	ldr	r2, [pc, #176]	@ (8000ef4 <MX_GPIO_Init+0x144>)
 8000e44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef4 <MX_GPIO_Init+0x144>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000e5c:	4826      	ldr	r0, [pc, #152]	@ (8000ef8 <MX_GPIO_Init+0x148>)
 8000e5e:	f002 fc7b 	bl	8003758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2140      	movs	r1, #64	@ 0x40
 8000e66:	4825      	ldr	r0, [pc, #148]	@ (8000efc <MX_GPIO_Init+0x14c>)
 8000e68:	f002 fc76 	bl	8003758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : botao_Pin */
  GPIO_InitStruct.Pin = botao_Pin;
 8000e6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e72:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(botao_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 031c 	add.w	r3, r7, #28
 8000e80:	4619      	mov	r1, r3
 8000e82:	481f      	ldr	r0, [pc, #124]	@ (8000f00 <MX_GPIO_Init+0x150>)
 8000e84:	f002 fabc 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e88:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4815      	ldr	r0, [pc, #84]	@ (8000ef8 <MX_GPIO_Init+0x148>)
 8000ea2:	f002 faad 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ea6:	2340      	movs	r3, #64	@ 0x40
 8000ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480f      	ldr	r0, [pc, #60]	@ (8000efc <MX_GPIO_Init+0x14c>)
 8000ebe:	f002 fa9f 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ec2:	2380      	movs	r3, #128	@ 0x80
 8000ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4809      	ldr	r0, [pc, #36]	@ (8000efc <MX_GPIO_Init+0x14c>)
 8000ed6:	f002 fa93 	bl	8003400 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2105      	movs	r1, #5
 8000ede:	2028      	movs	r0, #40	@ 0x28
 8000ee0:	f001 fb9e 	bl	8002620 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ee4:	2028      	movs	r0, #40	@ 0x28
 8000ee6:	f001 fbb7 	bl	8002658 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000eea:	bf00      	nop
 8000eec:	3730      	adds	r7, #48	@ 0x30
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	40021800 	.word	0x40021800
 8000f00:	40020800 	.word	0x40020800

08000f04 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == botao_Pin) {
 8000f0e:	88fb      	ldrh	r3, [r7, #6]
 8000f10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f14:	d104      	bne.n	8000f20 <HAL_GPIO_EXTI_Callback+0x1c>
		osSemaphoreRelease(SemBotaoHandle);
 8000f16:	4b04      	ldr	r3, [pc, #16]	@ (8000f28 <HAL_GPIO_EXTI_Callback+0x24>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f005 fcc0 	bl	80068a0 <osSemaphoreRelease>
	}
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000a38 	.word	0x20000a38

08000f2c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a07      	ldr	r2, [pc, #28]	@ (8000f58 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d108      	bne.n	8000f50 <HAL_ADC_ConvCpltCallback+0x24>
		// Libera o semáforo para acordar a tarefa produtora, avisando que os dados estão prontos.
		osSemaphoreRelease(SemFimLeituraHandle);
 8000f3e:	4b07      	ldr	r3, [pc, #28]	@ (8000f5c <HAL_ADC_ConvCpltCallback+0x30>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f005 fcac 	bl	80068a0 <osSemaphoreRelease>
		HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000f48:	2180      	movs	r1, #128	@ 0x80
 8000f4a:	4805      	ldr	r0, [pc, #20]	@ (8000f60 <HAL_ADC_ConvCpltCallback+0x34>)
 8000f4c:	f002 fc1d 	bl	800378a <HAL_GPIO_TogglePin>
	}
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40012000 	.word	0x40012000
 8000f5c:	20000a3c 	.word	0x20000a3c
 8000f60:	40020400 	.word	0x40020400

08000f64 <StartTaskProdutora>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskProdutora */
void StartTaskProdutora(void *argument)
{
 8000f64:	b5b0      	push	{r4, r5, r7, lr}
 8000f66:	b08a      	sub	sp, #40	@ 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		// Espera o botão ser pressionado
		osSemaphoreAcquire(SemBotaoHandle, osWaitForever);
 8000f6c:	4b27      	ldr	r3, [pc, #156]	@ (800100c <StartTaskProdutora+0xa8>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	4618      	mov	r0, r3
 8000f76:	f005 fc2d 	bl	80067d4 <osSemaphoreAcquire>

		char debug[] = "Task Produtora iniciada!\r\n";
 8000f7a:	4b25      	ldr	r3, [pc, #148]	@ (8001010 <StartTaskProdutora+0xac>)
 8000f7c:	f107 0408 	add.w	r4, r7, #8
 8000f80:	461d      	mov	r5, r3
 8000f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f8a:	c403      	stmia	r4!, {r0, r1}
 8000f8c:	8022      	strh	r2, [r4, #0]
 8000f8e:	3402      	adds	r4, #2
 8000f90:	0c13      	lsrs	r3, r2, #16
 8000f92:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) debug, strlen(debug), 100);
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff f9a1 	bl	80002e0 <strlen>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	f107 0108 	add.w	r1, r7, #8
 8000fa6:	2364      	movs	r3, #100	@ 0x64
 8000fa8:	481a      	ldr	r0, [pc, #104]	@ (8001014 <StartTaskProdutora+0xb0>)
 8000faa:	f004 fa31 	bl	8005410 <HAL_UART_Transmit>

		// Dá a ordem para o DMA começar a coletar os dados em segundo plano
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) bufferADC, 1024);
 8000fae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fb2:	4919      	ldr	r1, [pc, #100]	@ (8001018 <StartTaskProdutora+0xb4>)
 8000fb4:	4819      	ldr	r0, [pc, #100]	@ (800101c <StartTaskProdutora+0xb8>)
 8000fb6:	f000 fe7f 	bl	8001cb8 <HAL_ADC_Start_DMA>

		// Dorme e espera o DMA terminar. A CPU fica livre
		osSemaphoreAcquire(SemFimLeituraHandle, osWaitForever);
 8000fba:	4b19      	ldr	r3, [pc, #100]	@ (8001020 <StartTaskProdutora+0xbc>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f005 fc06 	bl	80067d4 <osSemaphoreAcquire>

		// O DMA terminou
		//    Agora, e somente agora, transferimos os dados do buffer para a fila :)
		for (int i = 0; i < 1024; i++) {
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fcc:	e00c      	b.n	8000fe8 <StartTaskProdutora+0x84>
			// Pega o dado já coletado pelo DMA e coloca na fila para o consumidor
			osMessageQueuePut(DadoSensorFilaHandle, &bufferADC[i], 0, 0);
 8000fce:	4b15      	ldr	r3, [pc, #84]	@ (8001024 <StartTaskProdutora+0xc0>)
 8000fd0:	6818      	ldr	r0, [r3, #0]
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4a10      	ldr	r2, [pc, #64]	@ (8001018 <StartTaskProdutora+0xb4>)
 8000fd8:	1899      	adds	r1, r3, r2
 8000fda:	2300      	movs	r3, #0
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f005 fd3d 	bl	8006a5c <osMessageQueuePut>
		for (int i = 0; i < 1024; i++) {
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fee:	dbee      	blt.n	8000fce <StartTaskProdutora+0x6a>
		}

		HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	480d      	ldr	r0, [pc, #52]	@ (8001028 <StartTaskProdutora+0xc4>)
 8000ff4:	f002 fbc9 	bl	800378a <HAL_GPIO_TogglePin>
		osDelay(500);
 8000ff8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ffc:	f005 fb20 	bl	8006640 <osDelay>

		osSemaphoreRelease(SemConsumidoraHandle);
 8001000:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <StartTaskProdutora+0xc8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f005 fc4b 	bl	80068a0 <osSemaphoreRelease>
	for (;;) {
 800100a:	e7af      	b.n	8000f6c <StartTaskProdutora+0x8>
 800100c:	20000a38 	.word	0x20000a38
 8001010:	0800e4d4 	.word	0x0800e4d4
 8001014:	200004c4 	.word	0x200004c4
 8001018:	20000a44 	.word	0x20000a44
 800101c:	2000036c 	.word	0x2000036c
 8001020:	20000a3c 	.word	0x20000a3c
 8001024:	20000a34 	.word	0x20000a34
 8001028:	40020400 	.word	0x40020400
 800102c:	20000a40 	.word	0x20000a40

08001030 <StartTaskConsumidora>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskConsumidora */
void StartTaskConsumidora(void *argument)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b096      	sub	sp, #88	@ 0x58
 8001034:	af02      	add	r7, sp, #8
 8001036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskConsumidora */
    char msgUART[50];
    /* Infinite loop */
    for(;;) {
        osSemaphoreAcquire(SemConsumidoraHandle, osWaitForever);
 8001038:	4b3d      	ldr	r3, [pc, #244]	@ (8001130 <StartTaskConsumidora+0x100>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f04f 31ff 	mov.w	r1, #4294967295
 8001040:	4618      	mov	r0, r3
 8001042:	f005 fbc7 	bl	80067d4 <osSemaphoreAcquire>
        HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8001046:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800104a:	483a      	ldr	r0, [pc, #232]	@ (8001134 <StartTaskConsumidora+0x104>)
 800104c:	f002 fb9d 	bl	800378a <HAL_GPIO_TogglePin>

        uint16_t valorLido;
        uint32_t soma = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	64fb      	str	r3, [r7, #76]	@ 0x4c
        float tensao; // Variável para armazenar o valor em volts

        for(int i = 0; i < 1024; i++) {
 8001054:	2300      	movs	r3, #0
 8001056:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001058:	e039      	b.n	80010ce <StartTaskConsumidora+0x9e>
            osMessageQueueGet(DadoSensorFilaHandle, &valorLido, NULL, osWaitForever);
 800105a:	4b37      	ldr	r3, [pc, #220]	@ (8001138 <StartTaskConsumidora+0x108>)
 800105c:	6818      	ldr	r0, [r3, #0]
 800105e:	f107 010a 	add.w	r1, r7, #10
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
 8001066:	2200      	movs	r2, #0
 8001068:	f005 fd6c 	bl	8006b44 <osMessageQueueGet>

            // Converte o valor do ADC (0-4095) para volts (0-3.3V)
            tensao = (valorLido * 3.3f) / 4095.0f;
 800106c:	897b      	ldrh	r3, [r7, #10]
 800106e:	ee07 3a90 	vmov	s15, r3
 8001072:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001076:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800113c <StartTaskConsumidora+0x10c>
 800107a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800107e:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8001140 <StartTaskConsumidora+0x110>
 8001082:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001086:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

            // Mostra o valor em volts na UART (com 2 casas decimais)
            sprintf(msgUART, "Amostra %d: %.2f V\r\n", i, tensao);
 800108a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800108e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	ed8d 7b00 	vstr	d7, [sp]
 800109a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800109c:	4929      	ldr	r1, [pc, #164]	@ (8001144 <StartTaskConsumidora+0x114>)
 800109e:	4618      	mov	r0, r3
 80010a0:	f009 fe10 	bl	800acc4 <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msgUART, strlen(msgUART), 200);
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff f919 	bl	80002e0 <strlen>
 80010ae:	4603      	mov	r3, r0
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	f107 010c 	add.w	r1, r7, #12
 80010b6:	23c8      	movs	r3, #200	@ 0xc8
 80010b8:	4823      	ldr	r0, [pc, #140]	@ (8001148 <StartTaskConsumidora+0x118>)
 80010ba:	f004 f9a9 	bl	8005410 <HAL_UART_Transmit>

            soma += valorLido;
 80010be:	897b      	ldrh	r3, [r7, #10]
 80010c0:	461a      	mov	r2, r3
 80010c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80010c4:	4413      	add	r3, r2
 80010c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
        for(int i = 0; i < 1024; i++) {
 80010c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010ca:	3301      	adds	r3, #1
 80010cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80010ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010d4:	dbc1      	blt.n	800105a <StartTaskConsumidora+0x2a>
        }

        // Calcula a média em volts (opcional)
        float mediaVolts = (soma / 1024.0f) * (3.3f / 4095.0f);
 80010d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80010d8:	ee07 3a90 	vmov	s15, r3
 80010dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010e0:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 800114c <StartTaskConsumidora+0x11c>
 80010e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e8:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001150 <StartTaskConsumidora+0x120>
 80010ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f0:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        sprintf(msgUART, "Media: %.2f V\r\n", mediaVolts);
 80010f4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80010f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010fc:	f107 000c 	add.w	r0, r7, #12
 8001100:	ec53 2b17 	vmov	r2, r3, d7
 8001104:	4913      	ldr	r1, [pc, #76]	@ (8001154 <StartTaskConsumidora+0x124>)
 8001106:	f009 fddd 	bl	800acc4 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msgUART, strlen(msgUART), 200);
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff f8e6 	bl	80002e0 <strlen>
 8001114:	4603      	mov	r3, r0
 8001116:	b29a      	uxth	r2, r3
 8001118:	f107 010c 	add.w	r1, r7, #12
 800111c:	23c8      	movs	r3, #200	@ 0xc8
 800111e:	480a      	ldr	r0, [pc, #40]	@ (8001148 <StartTaskConsumidora+0x118>)
 8001120:	f004 f976 	bl	8005410 <HAL_UART_Transmit>

        osDelay(500);
 8001124:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001128:	f005 fa8a 	bl	8006640 <osDelay>
    for(;;) {
 800112c:	e784      	b.n	8001038 <StartTaskConsumidora+0x8>
 800112e:	bf00      	nop
 8001130:	20000a40 	.word	0x20000a40
 8001134:	40020400 	.word	0x40020400
 8001138:	20000a34 	.word	0x20000a34
 800113c:	40533333 	.word	0x40533333
 8001140:	457ff000 	.word	0x457ff000
 8001144:	0800e4f0 	.word	0x0800e4f0
 8001148:	200004c4 	.word	0x200004c4
 800114c:	44800000 	.word	0x44800000
 8001150:	3a534067 	.word	0x3a534067
 8001154:	0800e508 	.word	0x0800e508

08001158 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001168:	d101      	bne.n	800116e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800116a:	f000 fc0d 	bl	8001988 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800117a:	b672      	cpsid	i
}
 800117c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800117e:	bf00      	nop
 8001180:	e7fd      	b.n	800117e <Error_Handler+0x8>
	...

08001184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <HAL_MspInit+0x4c>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118e:	4a10      	ldr	r2, [pc, #64]	@ (80011d0 <HAL_MspInit+0x4c>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001194:	6413      	str	r3, [r2, #64]	@ 0x40
 8001196:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <HAL_MspInit+0x4c>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <HAL_MspInit+0x4c>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a6:	4a0a      	ldr	r2, [pc, #40]	@ (80011d0 <HAL_MspInit+0x4c>)
 80011a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ae:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <HAL_MspInit+0x4c>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	210f      	movs	r1, #15
 80011be:	f06f 0001 	mvn.w	r0, #1
 80011c2:	f001 fa2d 	bl	8002620 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800

080011d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	@ 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a31      	ldr	r2, [pc, #196]	@ (80012b8 <HAL_ADC_MspInit+0xe4>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d15c      	bne.n	80012b0 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011f6:	4b31      	ldr	r3, [pc, #196]	@ (80012bc <HAL_ADC_MspInit+0xe8>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fa:	4a30      	ldr	r2, [pc, #192]	@ (80012bc <HAL_ADC_MspInit+0xe8>)
 80011fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001200:	6453      	str	r3, [r2, #68]	@ 0x44
 8001202:	4b2e      	ldr	r3, [pc, #184]	@ (80012bc <HAL_ADC_MspInit+0xe8>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	4b2b      	ldr	r3, [pc, #172]	@ (80012bc <HAL_ADC_MspInit+0xe8>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a2a      	ldr	r2, [pc, #168]	@ (80012bc <HAL_ADC_MspInit+0xe8>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b28      	ldr	r3, [pc, #160]	@ (80012bc <HAL_ADC_MspInit+0xe8>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001226:	2301      	movs	r3, #1
 8001228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122a:	2303      	movs	r3, #3
 800122c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	4821      	ldr	r0, [pc, #132]	@ (80012c0 <HAL_ADC_MspInit+0xec>)
 800123a:	f002 f8e1 	bl	8003400 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800123e:	4b21      	ldr	r3, [pc, #132]	@ (80012c4 <HAL_ADC_MspInit+0xf0>)
 8001240:	4a21      	ldr	r2, [pc, #132]	@ (80012c8 <HAL_ADC_MspInit+0xf4>)
 8001242:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001244:	4b1f      	ldr	r3, [pc, #124]	@ (80012c4 <HAL_ADC_MspInit+0xf0>)
 8001246:	2200      	movs	r2, #0
 8001248:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800124a:	4b1e      	ldr	r3, [pc, #120]	@ (80012c4 <HAL_ADC_MspInit+0xf0>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001250:	4b1c      	ldr	r3, [pc, #112]	@ (80012c4 <HAL_ADC_MspInit+0xf0>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001256:	4b1b      	ldr	r3, [pc, #108]	@ (80012c4 <HAL_ADC_MspInit+0xf0>)
 8001258:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800125c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800125e:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <HAL_ADC_MspInit+0xf0>)
 8001260:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001264:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001266:	4b17      	ldr	r3, [pc, #92]	@ (80012c4 <HAL_ADC_MspInit+0xf0>)
 8001268:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800126c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800126e:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <HAL_ADC_MspInit+0xf0>)
 8001270:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001274:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001276:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <HAL_ADC_MspInit+0xf0>)
 8001278:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800127c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800127e:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <HAL_ADC_MspInit+0xf0>)
 8001280:	2200      	movs	r2, #0
 8001282:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001284:	480f      	ldr	r0, [pc, #60]	@ (80012c4 <HAL_ADC_MspInit+0xf0>)
 8001286:	f001 f9f5 	bl	8002674 <HAL_DMA_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8001290:	f7ff ff71 	bl	8001176 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a0b      	ldr	r2, [pc, #44]	@ (80012c4 <HAL_ADC_MspInit+0xf0>)
 8001298:	639a      	str	r2, [r3, #56]	@ 0x38
 800129a:	4a0a      	ldr	r2, [pc, #40]	@ (80012c4 <HAL_ADC_MspInit+0xf0>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2105      	movs	r1, #5
 80012a4:	2012      	movs	r0, #18
 80012a6:	f001 f9bb 	bl	8002620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80012aa:	2012      	movs	r0, #18
 80012ac:	f001 f9d4 	bl	8002658 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	@ 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40012000 	.word	0x40012000
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020000 	.word	0x40020000
 80012c4:	200003b4 	.word	0x200003b4
 80012c8:	40026410 	.word	0x40026410

080012cc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08e      	sub	sp, #56	@ 0x38
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001424 <HAL_ETH_MspInit+0x158>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	f040 8096 	bne.w	800141c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80012f0:	4b4d      	ldr	r3, [pc, #308]	@ (8001428 <HAL_ETH_MspInit+0x15c>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001428 <HAL_ETH_MspInit+0x15c>)
 80012f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fc:	4b4a      	ldr	r3, [pc, #296]	@ (8001428 <HAL_ETH_MspInit+0x15c>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001304:	623b      	str	r3, [r7, #32]
 8001306:	6a3b      	ldr	r3, [r7, #32]
 8001308:	4b47      	ldr	r3, [pc, #284]	@ (8001428 <HAL_ETH_MspInit+0x15c>)
 800130a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130c:	4a46      	ldr	r2, [pc, #280]	@ (8001428 <HAL_ETH_MspInit+0x15c>)
 800130e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001312:	6313      	str	r3, [r2, #48]	@ 0x30
 8001314:	4b44      	ldr	r3, [pc, #272]	@ (8001428 <HAL_ETH_MspInit+0x15c>)
 8001316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001318:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800131c:	61fb      	str	r3, [r7, #28]
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	4b41      	ldr	r3, [pc, #260]	@ (8001428 <HAL_ETH_MspInit+0x15c>)
 8001322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001324:	4a40      	ldr	r2, [pc, #256]	@ (8001428 <HAL_ETH_MspInit+0x15c>)
 8001326:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800132a:	6313      	str	r3, [r2, #48]	@ 0x30
 800132c:	4b3e      	ldr	r3, [pc, #248]	@ (8001428 <HAL_ETH_MspInit+0x15c>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001330:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001334:	61bb      	str	r3, [r7, #24]
 8001336:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001338:	4b3b      	ldr	r3, [pc, #236]	@ (8001428 <HAL_ETH_MspInit+0x15c>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133c:	4a3a      	ldr	r2, [pc, #232]	@ (8001428 <HAL_ETH_MspInit+0x15c>)
 800133e:	f043 0304 	orr.w	r3, r3, #4
 8001342:	6313      	str	r3, [r2, #48]	@ 0x30
 8001344:	4b38      	ldr	r3, [pc, #224]	@ (8001428 <HAL_ETH_MspInit+0x15c>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001350:	4b35      	ldr	r3, [pc, #212]	@ (8001428 <HAL_ETH_MspInit+0x15c>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001354:	4a34      	ldr	r2, [pc, #208]	@ (8001428 <HAL_ETH_MspInit+0x15c>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6313      	str	r3, [r2, #48]	@ 0x30
 800135c:	4b32      	ldr	r3, [pc, #200]	@ (8001428 <HAL_ETH_MspInit+0x15c>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001368:	4b2f      	ldr	r3, [pc, #188]	@ (8001428 <HAL_ETH_MspInit+0x15c>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136c:	4a2e      	ldr	r2, [pc, #184]	@ (8001428 <HAL_ETH_MspInit+0x15c>)
 800136e:	f043 0302 	orr.w	r3, r3, #2
 8001372:	6313      	str	r3, [r2, #48]	@ 0x30
 8001374:	4b2c      	ldr	r3, [pc, #176]	@ (8001428 <HAL_ETH_MspInit+0x15c>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001380:	4b29      	ldr	r3, [pc, #164]	@ (8001428 <HAL_ETH_MspInit+0x15c>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001384:	4a28      	ldr	r2, [pc, #160]	@ (8001428 <HAL_ETH_MspInit+0x15c>)
 8001386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800138a:	6313      	str	r3, [r2, #48]	@ 0x30
 800138c:	4b26      	ldr	r3, [pc, #152]	@ (8001428 <HAL_ETH_MspInit+0x15c>)
 800138e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001398:	2332      	movs	r3, #50	@ 0x32
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013a8:	230b      	movs	r3, #11
 80013aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b0:	4619      	mov	r1, r3
 80013b2:	481e      	ldr	r0, [pc, #120]	@ (800142c <HAL_ETH_MspInit+0x160>)
 80013b4:	f002 f824 	bl	8003400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013b8:	2386      	movs	r3, #134	@ 0x86
 80013ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c4:	2303      	movs	r3, #3
 80013c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013c8:	230b      	movs	r3, #11
 80013ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013d0:	4619      	mov	r1, r3
 80013d2:	4817      	ldr	r0, [pc, #92]	@ (8001430 <HAL_ETH_MspInit+0x164>)
 80013d4:	f002 f814 	bl	8003400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e6:	2303      	movs	r3, #3
 80013e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013ea:	230b      	movs	r3, #11
 80013ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f2:	4619      	mov	r1, r3
 80013f4:	480f      	ldr	r0, [pc, #60]	@ (8001434 <HAL_ETH_MspInit+0x168>)
 80013f6:	f002 f803 	bl	8003400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80013fa:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80013fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800140c:	230b      	movs	r3, #11
 800140e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001410:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001414:	4619      	mov	r1, r3
 8001416:	4808      	ldr	r0, [pc, #32]	@ (8001438 <HAL_ETH_MspInit+0x16c>)
 8001418:	f001 fff2 	bl	8003400 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 800141c:	bf00      	nop
 800141e:	3738      	adds	r7, #56	@ 0x38
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40028000 	.word	0x40028000
 8001428:	40023800 	.word	0x40023800
 800142c:	40020800 	.word	0x40020800
 8001430:	40020000 	.word	0x40020000
 8001434:	40020400 	.word	0x40020400
 8001438:	40021800 	.word	0x40021800

0800143c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b0ae      	sub	sp, #184	@ 0xb8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2290      	movs	r2, #144	@ 0x90
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f009 fc94 	bl	800ad8a <memset>
  if(huart->Instance==USART3)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a22      	ldr	r2, [pc, #136]	@ (80014f0 <HAL_UART_MspInit+0xb4>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d13c      	bne.n	80014e6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800146c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001470:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001472:	2300      	movs	r3, #0
 8001474:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4618      	mov	r0, r3
 800147c:	f003 f884 	bl	8004588 <HAL_RCCEx_PeriphCLKConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001486:	f7ff fe76 	bl	8001176 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800148a:	4b1a      	ldr	r3, [pc, #104]	@ (80014f4 <HAL_UART_MspInit+0xb8>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148e:	4a19      	ldr	r2, [pc, #100]	@ (80014f4 <HAL_UART_MspInit+0xb8>)
 8001490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001494:	6413      	str	r3, [r2, #64]	@ 0x40
 8001496:	4b17      	ldr	r3, [pc, #92]	@ (80014f4 <HAL_UART_MspInit+0xb8>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a2:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <HAL_UART_MspInit+0xb8>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a13      	ldr	r2, [pc, #76]	@ (80014f4 <HAL_UART_MspInit+0xb8>)
 80014a8:	f043 0308 	orr.w	r3, r3, #8
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <HAL_UART_MspInit+0xb8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ce:	2303      	movs	r3, #3
 80014d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014d4:	2307      	movs	r3, #7
 80014d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014da:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014de:	4619      	mov	r1, r3
 80014e0:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <HAL_UART_MspInit+0xbc>)
 80014e2:	f001 ff8d 	bl	8003400 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80014e6:	bf00      	nop
 80014e8:	37b8      	adds	r7, #184	@ 0xb8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40004800 	.word	0x40004800
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020c00 	.word	0x40020c00

080014fc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b0ae      	sub	sp, #184	@ 0xb8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2290      	movs	r2, #144	@ 0x90
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f009 fc34 	bl	800ad8a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800152a:	d159      	bne.n	80015e0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800152c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001530:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001532:	2300      	movs	r3, #0
 8001534:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4618      	mov	r0, r3
 800153e:	f003 f823 	bl	8004588 <HAL_RCCEx_PeriphCLKConfig>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001548:	f7ff fe15 	bl	8001176 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	4b26      	ldr	r3, [pc, #152]	@ (80015e8 <HAL_PCD_MspInit+0xec>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001550:	4a25      	ldr	r2, [pc, #148]	@ (80015e8 <HAL_PCD_MspInit+0xec>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6313      	str	r3, [r2, #48]	@ 0x30
 8001558:	4b23      	ldr	r3, [pc, #140]	@ (80015e8 <HAL_PCD_MspInit+0xec>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001564:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001568:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800157e:	230a      	movs	r3, #10
 8001580:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001588:	4619      	mov	r1, r3
 800158a:	4818      	ldr	r0, [pc, #96]	@ (80015ec <HAL_PCD_MspInit+0xf0>)
 800158c:	f001 ff38 	bl	8003400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001590:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001594:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015a4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015a8:	4619      	mov	r1, r3
 80015aa:	4810      	ldr	r0, [pc, #64]	@ (80015ec <HAL_PCD_MspInit+0xf0>)
 80015ac:	f001 ff28 	bl	8003400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015b0:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <HAL_PCD_MspInit+0xec>)
 80015b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015b4:	4a0c      	ldr	r2, [pc, #48]	@ (80015e8 <HAL_PCD_MspInit+0xec>)
 80015b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015ba:	6353      	str	r3, [r2, #52]	@ 0x34
 80015bc:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <HAL_PCD_MspInit+0xec>)
 80015be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4b07      	ldr	r3, [pc, #28]	@ (80015e8 <HAL_PCD_MspInit+0xec>)
 80015ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015cc:	4a06      	ldr	r2, [pc, #24]	@ (80015e8 <HAL_PCD_MspInit+0xec>)
 80015ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80015d4:	4b04      	ldr	r3, [pc, #16]	@ (80015e8 <HAL_PCD_MspInit+0xec>)
 80015d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80015e0:	bf00      	nop
 80015e2:	37b8      	adds	r7, #184	@ 0xb8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020000 	.word	0x40020000

080015f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08e      	sub	sp, #56	@ 0x38
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001600:	4b34      	ldr	r3, [pc, #208]	@ (80016d4 <HAL_InitTick+0xe4>)
 8001602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001604:	4a33      	ldr	r2, [pc, #204]	@ (80016d4 <HAL_InitTick+0xe4>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6413      	str	r3, [r2, #64]	@ 0x40
 800160c:	4b31      	ldr	r3, [pc, #196]	@ (80016d4 <HAL_InitTick+0xe4>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001618:	f107 0210 	add.w	r2, r7, #16
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4611      	mov	r1, r2
 8001622:	4618      	mov	r0, r3
 8001624:	f002 ff62 	bl	80044ec <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001628:	6a3b      	ldr	r3, [r7, #32]
 800162a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800162c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800162e:	2b00      	cmp	r3, #0
 8001630:	d103      	bne.n	800163a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001632:	f002 ff33 	bl	800449c <HAL_RCC_GetPCLK1Freq>
 8001636:	6378      	str	r0, [r7, #52]	@ 0x34
 8001638:	e004      	b.n	8001644 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800163a:	f002 ff2f 	bl	800449c <HAL_RCC_GetPCLK1Freq>
 800163e:	4603      	mov	r3, r0
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001646:	4a24      	ldr	r2, [pc, #144]	@ (80016d8 <HAL_InitTick+0xe8>)
 8001648:	fba2 2303 	umull	r2, r3, r2, r3
 800164c:	0c9b      	lsrs	r3, r3, #18
 800164e:	3b01      	subs	r3, #1
 8001650:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001652:	4b22      	ldr	r3, [pc, #136]	@ (80016dc <HAL_InitTick+0xec>)
 8001654:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001658:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800165a:	4b20      	ldr	r3, [pc, #128]	@ (80016dc <HAL_InitTick+0xec>)
 800165c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001660:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001662:	4a1e      	ldr	r2, [pc, #120]	@ (80016dc <HAL_InitTick+0xec>)
 8001664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001666:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001668:	4b1c      	ldr	r3, [pc, #112]	@ (80016dc <HAL_InitTick+0xec>)
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166e:	4b1b      	ldr	r3, [pc, #108]	@ (80016dc <HAL_InitTick+0xec>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001674:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <HAL_InitTick+0xec>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800167a:	4818      	ldr	r0, [pc, #96]	@ (80016dc <HAL_InitTick+0xec>)
 800167c:	f003 fbac 	bl	8004dd8 <HAL_TIM_Base_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001686:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800168a:	2b00      	cmp	r3, #0
 800168c:	d11b      	bne.n	80016c6 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800168e:	4813      	ldr	r0, [pc, #76]	@ (80016dc <HAL_InitTick+0xec>)
 8001690:	f003 fc04 	bl	8004e9c <HAL_TIM_Base_Start_IT>
 8001694:	4603      	mov	r3, r0
 8001696:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800169a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d111      	bne.n	80016c6 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016a2:	201c      	movs	r0, #28
 80016a4:	f000 ffd8 	bl	8002658 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b0f      	cmp	r3, #15
 80016ac:	d808      	bhi.n	80016c0 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80016ae:	2200      	movs	r2, #0
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	201c      	movs	r0, #28
 80016b4:	f000 ffb4 	bl	8002620 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016b8:	4a09      	ldr	r2, [pc, #36]	@ (80016e0 <HAL_InitTick+0xf0>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e002      	b.n	80016c6 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016c6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3738      	adds	r7, #56	@ 0x38
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800
 80016d8:	431bde83 	.word	0x431bde83
 80016dc:	2000124c 	.word	0x2000124c
 80016e0:	20000004 	.word	0x20000004

080016e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80016e8:	f002 ff32 	bl	8004550 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <NMI_Handler+0x8>

080016f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <HardFault_Handler+0x4>

080016f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <MemManage_Handler+0x4>

08001700 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <BusFault_Handler+0x4>

08001708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <UsageFault_Handler+0x4>

08001710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001724:	4802      	ldr	r0, [pc, #8]	@ (8001730 <ADC_IRQHandler+0x10>)
 8001726:	f000 f9b7 	bl	8001a98 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	2000036c 	.word	0x2000036c

08001734 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001738:	4802      	ldr	r0, [pc, #8]	@ (8001744 <TIM2_IRQHandler+0x10>)
 800173a:	f003 fc27 	bl	8004f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	2000124c 	.word	0x2000124c

08001748 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(botao_Pin);
 800174c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001750:	f002 f836 	bl	80037c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}

08001758 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800175c:	4802      	ldr	r0, [pc, #8]	@ (8001768 <DMA2_Stream0_IRQHandler+0x10>)
 800175e:	f001 f897 	bl	8002890 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200003b4 	.word	0x200003b4

0800176c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return 1;
 8001770:	2301      	movs	r3, #1
}
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <_kill>:

int _kill(int pid, int sig)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001786:	f009 fba9 	bl	800aedc <__errno>
 800178a:	4603      	mov	r3, r0
 800178c:	2216      	movs	r2, #22
 800178e:	601a      	str	r2, [r3, #0]
  return -1;
 8001790:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <_exit>:

void _exit (int status)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ffe7 	bl	800177c <_kill>
  while (1) {}    /* Make sure we hang here */
 80017ae:	bf00      	nop
 80017b0:	e7fd      	b.n	80017ae <_exit+0x12>

080017b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	60f8      	str	r0, [r7, #12]
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	e00a      	b.n	80017da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017c4:	f3af 8000 	nop.w
 80017c8:	4601      	mov	r1, r0
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	60ba      	str	r2, [r7, #8]
 80017d0:	b2ca      	uxtb	r2, r1
 80017d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	3301      	adds	r3, #1
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	429a      	cmp	r2, r3
 80017e0:	dbf0      	blt.n	80017c4 <_read+0x12>
  }

  return len;
 80017e2:	687b      	ldr	r3, [r7, #4]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	e009      	b.n	8001812 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	60ba      	str	r2, [r7, #8]
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	3301      	adds	r3, #1
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	429a      	cmp	r2, r3
 8001818:	dbf1      	blt.n	80017fe <_write+0x12>
  }
  return len;
 800181a:	687b      	ldr	r3, [r7, #4]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <_close>:

int _close(int file)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800182c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800184c:	605a      	str	r2, [r3, #4]
  return 0;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_isatty>:

int _isatty(int file)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001864:	2301      	movs	r3, #1
}
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001872:	b480      	push	{r7}
 8001874:	b085      	sub	sp, #20
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001894:	4a14      	ldr	r2, [pc, #80]	@ (80018e8 <_sbrk+0x5c>)
 8001896:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <_sbrk+0x60>)
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a0:	4b13      	ldr	r3, [pc, #76]	@ (80018f0 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d102      	bne.n	80018ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a8:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <_sbrk+0x64>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	@ (80018f4 <_sbrk+0x68>)
 80018ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d207      	bcs.n	80018cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018bc:	f009 fb0e 	bl	800aedc <__errno>
 80018c0:	4603      	mov	r3, r0
 80018c2:	220c      	movs	r2, #12
 80018c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ca:	e009      	b.n	80018e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018cc:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018d2:	4b07      	ldr	r3, [pc, #28]	@ (80018f0 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	4a05      	ldr	r2, [pc, #20]	@ (80018f0 <_sbrk+0x64>)
 80018dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20080000 	.word	0x20080000
 80018ec:	00000400 	.word	0x00000400
 80018f0:	20001298 	.word	0x20001298
 80018f4:	20005dd0 	.word	0x20005dd0

080018f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018fc:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <SystemInit+0x20>)
 80018fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001902:	4a05      	ldr	r2, [pc, #20]	@ (8001918 <SystemInit+0x20>)
 8001904:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001908:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800191c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001954 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001920:	f7ff ffea 	bl	80018f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001924:	480c      	ldr	r0, [pc, #48]	@ (8001958 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001926:	490d      	ldr	r1, [pc, #52]	@ (800195c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001928:	4a0d      	ldr	r2, [pc, #52]	@ (8001960 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800192c:	e002      	b.n	8001934 <LoopCopyDataInit>

0800192e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001932:	3304      	adds	r3, #4

08001934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001938:	d3f9      	bcc.n	800192e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193a:	4a0a      	ldr	r2, [pc, #40]	@ (8001964 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800193c:	4c0a      	ldr	r4, [pc, #40]	@ (8001968 <LoopFillZerobss+0x22>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001940:	e001      	b.n	8001946 <LoopFillZerobss>

08001942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001944:	3204      	adds	r2, #4

08001946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001948:	d3fb      	bcc.n	8001942 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800194a:	f009 facd 	bl	800aee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800194e:	f7ff f83b 	bl	80009c8 <main>
  bx  lr    
 8001952:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001954:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800195c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001960:	0800ea20 	.word	0x0800ea20
  ldr r2, =_sbss
 8001964:	20000318 	.word	0x20000318
  ldr r4, =_ebss
 8001968:	20005dcc 	.word	0x20005dcc

0800196c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800196c:	e7fe      	b.n	800196c <CAN1_RX0_IRQHandler>

0800196e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001972:	2003      	movs	r0, #3
 8001974:	f000 fe49 	bl	800260a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001978:	200f      	movs	r0, #15
 800197a:	f7ff fe39 	bl	80015f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800197e:	f7ff fc01 	bl	8001184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <HAL_IncTick+0x20>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_IncTick+0x24>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4413      	add	r3, r2
 8001998:	4a04      	ldr	r2, [pc, #16]	@ (80019ac <HAL_IncTick+0x24>)
 800199a:	6013      	str	r3, [r2, #0]
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	20000008 	.word	0x20000008
 80019ac:	2000129c 	.word	0x2000129c

080019b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return uwTick;
 80019b4:	4b03      	ldr	r3, [pc, #12]	@ (80019c4 <HAL_GetTick+0x14>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	2000129c 	.word	0x2000129c

080019c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d0:	f7ff ffee 	bl	80019b0 <HAL_GetTick>
 80019d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e0:	d005      	beq.n	80019ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019e2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a0c <HAL_Delay+0x44>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4413      	add	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ee:	bf00      	nop
 80019f0:	f7ff ffde 	bl	80019b0 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d8f7      	bhi.n	80019f0 <HAL_Delay+0x28>
  {
  }
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000008 	.word	0x20000008

08001a10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e031      	b.n	8001a8a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d109      	bne.n	8001a42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff fbd0 	bl	80011d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d116      	bne.n	8001a7c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a52:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <HAL_ADC_Init+0x84>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	f043 0202 	orr.w	r2, r3, #2
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 fba0 	bl	80021a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6e:	f023 0303 	bic.w	r3, r3, #3
 8001a72:	f043 0201 	orr.w	r2, r3, #1
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a7a:	e001      	b.n	8001a80 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	ffffeefd 	.word	0xffffeefd

08001a98 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	f003 0320 	and.w	r3, r3, #32
 8001ac6:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d049      	beq.n	8001b62 <HAL_ADC_IRQHandler+0xca>
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d046      	beq.n	8001b62 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad8:	f003 0310 	and.w	r3, r3, #16
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d105      	bne.n	8001aec <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d12b      	bne.n	8001b52 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d127      	bne.n	8001b52 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b08:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d006      	beq.n	8001b1e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d119      	bne.n	8001b52 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0220 	bic.w	r2, r2, #32
 8001b2c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b32:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d105      	bne.n	8001b52 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	f043 0201 	orr.w	r2, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff f9ea 	bl	8000f2c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f06f 0212 	mvn.w	r2, #18
 8001b60:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b70:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d057      	beq.n	8001c28 <HAL_ADC_IRQHandler+0x190>
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d054      	beq.n	8001c28 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d105      	bne.n	8001b96 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d139      	bne.n	8001c18 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001baa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d006      	beq.n	8001bc0 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d12b      	bne.n	8001c18 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d124      	bne.n	8001c18 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d11d      	bne.n	8001c18 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d119      	bne.n	8001c18 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bf2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d105      	bne.n	8001c18 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c10:	f043 0201 	orr.w	r2, r3, #1
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 fc3f 	bl	800249c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f06f 020c 	mvn.w	r2, #12
 8001c26:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c36:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d017      	beq.n	8001c6e <HAL_ADC_IRQHandler+0x1d6>
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d014      	beq.n	8001c6e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d10d      	bne.n	8001c6e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f932 	bl	8001ec8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f06f 0201 	mvn.w	r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f003 0320 	and.w	r3, r3, #32
 8001c74:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c7c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d015      	beq.n	8001cb0 <HAL_ADC_IRQHandler+0x218>
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d012      	beq.n	8001cb0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	f043 0202 	orr.w	r2, r3, #2
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f06f 0220 	mvn.w	r2, #32
 8001c9e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f91b 	bl	8001edc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f06f 0220 	mvn.w	r2, #32
 8001cae:	601a      	str	r2, [r3, #0]
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_ADC_Start_DMA+0x22>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e0d6      	b.n	8001e88 <HAL_ADC_Start_DMA+0x1d0>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d018      	beq.n	8001d22 <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0201 	orr.w	r2, r2, #1
 8001cfe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001d00:	4b63      	ldr	r3, [pc, #396]	@ (8001e90 <HAL_ADC_Start_DMA+0x1d8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a63      	ldr	r2, [pc, #396]	@ (8001e94 <HAL_ADC_Start_DMA+0x1dc>)
 8001d06:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0a:	0c9a      	lsrs	r2, r3, #18
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8001d14:	e002      	b.n	8001d1c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f9      	bne.n	8001d16 <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	f040 809e 	bne.w	8001e6e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d36:	4b58      	ldr	r3, [pc, #352]	@ (8001e98 <HAL_ADC_Start_DMA+0x1e0>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d007      	beq.n	8001d60 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d54:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d58:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d6c:	d106      	bne.n	8001d7c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d72:	f023 0206 	bic.w	r2, r3, #6
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d7a:	e002      	b.n	8001d82 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d8e:	4a43      	ldr	r2, [pc, #268]	@ (8001e9c <HAL_ADC_Start_DMA+0x1e4>)
 8001d90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d96:	4a42      	ldr	r2, [pc, #264]	@ (8001ea0 <HAL_ADC_Start_DMA+0x1e8>)
 8001d98:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d9e:	4a41      	ldr	r2, [pc, #260]	@ (8001ea4 <HAL_ADC_Start_DMA+0x1ec>)
 8001da0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001daa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001dba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	334c      	adds	r3, #76	@ 0x4c
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f000 fcf8 	bl	80027d0 <HAL_DMA_Start_IT>
 8001de0:	4603      	mov	r3, r0
 8001de2:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001de4:	4b30      	ldr	r3, [pc, #192]	@ (8001ea8 <HAL_ADC_Start_DMA+0x1f0>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10f      	bne.n	8001e10 <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d143      	bne.n	8001e86 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	e03a      	b.n	8001e86 <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a25      	ldr	r2, [pc, #148]	@ (8001eac <HAL_ADC_Start_DMA+0x1f4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d10e      	bne.n	8001e38 <HAL_ADC_Start_DMA+0x180>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d107      	bne.n	8001e38 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e36:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001e38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea8 <HAL_ADC_Start_DMA+0x1f0>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d120      	bne.n	8001e86 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a19      	ldr	r2, [pc, #100]	@ (8001eb0 <HAL_ADC_Start_DMA+0x1f8>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d11b      	bne.n	8001e86 <HAL_ADC_Start_DMA+0x1ce>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d114      	bne.n	8001e86 <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	e00b      	b.n	8001e86 <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	f043 0210 	orr.w	r2, r3, #16
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7e:	f043 0201 	orr.w	r2, r3, #1
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 8001e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000000 	.word	0x20000000
 8001e94:	431bde83 	.word	0x431bde83
 8001e98:	fffff8fe 	.word	0xfffff8fe
 8001e9c:	08002399 	.word	0x08002399
 8001ea0:	08002453 	.word	0x08002453
 8001ea4:	0800246f 	.word	0x0800246f
 8001ea8:	40012300 	.word	0x40012300
 8001eac:	40012000 	.word	0x40012000
 8001eb0:	40012200 	.word	0x40012200

08001eb4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x1c>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e13a      	b.n	8002182 <HAL_ADC_ConfigChannel+0x292>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b09      	cmp	r3, #9
 8001f1a:	d93a      	bls.n	8001f92 <HAL_ADC_ConfigChannel+0xa2>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f24:	d035      	beq.n	8001f92 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68d9      	ldr	r1, [r3, #12]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	4613      	mov	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	3b1e      	subs	r3, #30
 8001f3c:	2207      	movs	r2, #7
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43da      	mvns	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	400a      	ands	r2, r1
 8001f4a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a8f      	ldr	r2, [pc, #572]	@ (8002190 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d10a      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68d9      	ldr	r1, [r3, #12]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	061a      	lsls	r2, r3, #24
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f6a:	e039      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68d9      	ldr	r1, [r3, #12]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	4603      	mov	r3, r0
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4403      	add	r3, r0
 8001f84:	3b1e      	subs	r3, #30
 8001f86:	409a      	lsls	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f90:	e026      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6919      	ldr	r1, [r3, #16]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f003 031f 	and.w	r3, r3, #31
 8001faa:	2207      	movs	r2, #7
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43da      	mvns	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	400a      	ands	r2, r1
 8001fb8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6919      	ldr	r1, [r3, #16]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	4618      	mov	r0, r3
 8001fcc:	4603      	mov	r3, r0
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4403      	add	r3, r0
 8001fd2:	f003 031f 	and.w	r3, r3, #31
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b06      	cmp	r3, #6
 8001fe6:	d824      	bhi.n	8002032 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3b05      	subs	r3, #5
 8001ffa:	221f      	movs	r2, #31
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43da      	mvns	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	400a      	ands	r2, r1
 8002008:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	b29b      	uxth	r3, r3
 8002016:	4618      	mov	r0, r3
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	3b05      	subs	r3, #5
 8002024:	fa00 f203 	lsl.w	r2, r0, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002030:	e04c      	b.n	80020cc <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b0c      	cmp	r3, #12
 8002038:	d824      	bhi.n	8002084 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	3b23      	subs	r3, #35	@ 0x23
 800204c:	221f      	movs	r2, #31
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43da      	mvns	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	400a      	ands	r2, r1
 800205a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	b29b      	uxth	r3, r3
 8002068:	4618      	mov	r0, r3
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	3b23      	subs	r3, #35	@ 0x23
 8002076:	fa00 f203 	lsl.w	r2, r0, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	631a      	str	r2, [r3, #48]	@ 0x30
 8002082:	e023      	b.n	80020cc <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	3b41      	subs	r3, #65	@ 0x41
 8002096:	221f      	movs	r2, #31
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43da      	mvns	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	400a      	ands	r2, r1
 80020a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	4618      	mov	r0, r3
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	3b41      	subs	r3, #65	@ 0x41
 80020c0:	fa00 f203 	lsl.w	r2, r0, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a30      	ldr	r2, [pc, #192]	@ (8002194 <HAL_ADC_ConfigChannel+0x2a4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d10a      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x1fc>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80020de:	d105      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80020e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002198 <HAL_ADC_ConfigChannel+0x2a8>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	4a2c      	ldr	r2, [pc, #176]	@ (8002198 <HAL_ADC_ConfigChannel+0x2a8>)
 80020e6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80020ea:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a28      	ldr	r2, [pc, #160]	@ (8002194 <HAL_ADC_ConfigChannel+0x2a4>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d10f      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x226>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b12      	cmp	r3, #18
 80020fc:	d10b      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80020fe:	4b26      	ldr	r3, [pc, #152]	@ (8002198 <HAL_ADC_ConfigChannel+0x2a8>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4a25      	ldr	r2, [pc, #148]	@ (8002198 <HAL_ADC_ConfigChannel+0x2a8>)
 8002104:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002108:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800210a:	4b23      	ldr	r3, [pc, #140]	@ (8002198 <HAL_ADC_ConfigChannel+0x2a8>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	4a22      	ldr	r2, [pc, #136]	@ (8002198 <HAL_ADC_ConfigChannel+0x2a8>)
 8002110:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002114:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a1e      	ldr	r2, [pc, #120]	@ (8002194 <HAL_ADC_ConfigChannel+0x2a4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d12b      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x288>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1a      	ldr	r2, [pc, #104]	@ (8002190 <HAL_ADC_ConfigChannel+0x2a0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d003      	beq.n	8002132 <HAL_ADC_ConfigChannel+0x242>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b11      	cmp	r3, #17
 8002130:	d122      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002132:	4b19      	ldr	r3, [pc, #100]	@ (8002198 <HAL_ADC_ConfigChannel+0x2a8>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	4a18      	ldr	r2, [pc, #96]	@ (8002198 <HAL_ADC_ConfigChannel+0x2a8>)
 8002138:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800213c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800213e:	4b16      	ldr	r3, [pc, #88]	@ (8002198 <HAL_ADC_ConfigChannel+0x2a8>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4a15      	ldr	r2, [pc, #84]	@ (8002198 <HAL_ADC_ConfigChannel+0x2a8>)
 8002144:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002148:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a10      	ldr	r2, [pc, #64]	@ (8002190 <HAL_ADC_ConfigChannel+0x2a0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d111      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002154:	4b11      	ldr	r3, [pc, #68]	@ (800219c <HAL_ADC_ConfigChannel+0x2ac>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a11      	ldr	r2, [pc, #68]	@ (80021a0 <HAL_ADC_ConfigChannel+0x2b0>)
 800215a:	fba2 2303 	umull	r2, r3, r2, r3
 800215e:	0c9a      	lsrs	r2, r3, #18
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800216a:	e002      	b.n	8002172 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	3b01      	subs	r3, #1
 8002170:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1f9      	bne.n	800216c <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	10000012 	.word	0x10000012
 8002194:	40012000 	.word	0x40012000
 8002198:	40012300 	.word	0x40012300
 800219c:	20000000 	.word	0x20000000
 80021a0:	431bde83 	.word	0x431bde83

080021a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80021ac:	4b78      	ldr	r3, [pc, #480]	@ (8002390 <ADC_Init+0x1ec>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4a77      	ldr	r2, [pc, #476]	@ (8002390 <ADC_Init+0x1ec>)
 80021b2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80021b6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80021b8:	4b75      	ldr	r3, [pc, #468]	@ (8002390 <ADC_Init+0x1ec>)
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	4973      	ldr	r1, [pc, #460]	@ (8002390 <ADC_Init+0x1ec>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6859      	ldr	r1, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	021a      	lsls	r2, r3, #8
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80021f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6859      	ldr	r1, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800221a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6899      	ldr	r1, [r3, #8]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002232:	4a58      	ldr	r2, [pc, #352]	@ (8002394 <ADC_Init+0x1f0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d022      	beq.n	800227e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002246:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6899      	ldr	r1, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002268:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6899      	ldr	r1, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	e00f      	b.n	800229e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800228c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800229c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0202 	bic.w	r2, r2, #2
 80022ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6899      	ldr	r1, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	005a      	lsls	r2, r3, #1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d01b      	beq.n	8002304 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80022ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6859      	ldr	r1, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f6:	3b01      	subs	r3, #1
 80022f8:	035a      	lsls	r2, r3, #13
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	e007      	b.n	8002314 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002312:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002322:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	3b01      	subs	r3, #1
 8002330:	051a      	lsls	r2, r3, #20
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002348:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6899      	ldr	r1, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002356:	025a      	lsls	r2, r3, #9
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800236e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6899      	ldr	r1, [r3, #8]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	029a      	lsls	r2, r3, #10
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	609a      	str	r2, [r3, #8]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	40012300 	.word	0x40012300
 8002394:	0f000001 	.word	0x0f000001

08002398 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023a4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023aa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d13c      	bne.n	800242c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d12b      	bne.n	8002424 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d127      	bne.n	8002424 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023da:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d006      	beq.n	80023f0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d119      	bne.n	8002424 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0220 	bic.w	r2, r2, #32
 80023fe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002404:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002410:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d105      	bne.n	8002424 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241c:	f043 0201 	orr.w	r2, r3, #1
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f7fe fd81 	bl	8000f2c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800242a:	e00e      	b.n	800244a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002430:	f003 0310 	and.w	r3, r3, #16
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f7ff fd4f 	bl	8001edc <HAL_ADC_ErrorCallback>
}
 800243e:	e004      	b.n	800244a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	4798      	blx	r3
}
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800245e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f7ff fd27 	bl	8001eb4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800247a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2240      	movs	r2, #64	@ 0x40
 8002480:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002486:	f043 0204 	orr.w	r2, r3, #4
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f7ff fd24 	bl	8001edc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002494:	bf00      	nop
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024c0:	4b0b      	ldr	r3, [pc, #44]	@ (80024f0 <__NVIC_SetPriorityGrouping+0x40>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024cc:	4013      	ands	r3, r2
 80024ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024d8:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <__NVIC_SetPriorityGrouping+0x44>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024de:	4a04      	ldr	r2, [pc, #16]	@ (80024f0 <__NVIC_SetPriorityGrouping+0x40>)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	60d3      	str	r3, [r2, #12]
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000ed00 	.word	0xe000ed00
 80024f4:	05fa0000 	.word	0x05fa0000

080024f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024fc:	4b04      	ldr	r3, [pc, #16]	@ (8002510 <__NVIC_GetPriorityGrouping+0x18>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	0a1b      	lsrs	r3, r3, #8
 8002502:	f003 0307 	and.w	r3, r3, #7
}
 8002506:	4618      	mov	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800251e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002522:	2b00      	cmp	r3, #0
 8002524:	db0b      	blt.n	800253e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	f003 021f 	and.w	r2, r3, #31
 800252c:	4907      	ldr	r1, [pc, #28]	@ (800254c <__NVIC_EnableIRQ+0x38>)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	095b      	lsrs	r3, r3, #5
 8002534:	2001      	movs	r0, #1
 8002536:	fa00 f202 	lsl.w	r2, r0, r2
 800253a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	e000e100 	.word	0xe000e100

08002550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	6039      	str	r1, [r7, #0]
 800255a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800255c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002560:	2b00      	cmp	r3, #0
 8002562:	db0a      	blt.n	800257a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	b2da      	uxtb	r2, r3
 8002568:	490c      	ldr	r1, [pc, #48]	@ (800259c <__NVIC_SetPriority+0x4c>)
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	0112      	lsls	r2, r2, #4
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	440b      	add	r3, r1
 8002574:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002578:	e00a      	b.n	8002590 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4908      	ldr	r1, [pc, #32]	@ (80025a0 <__NVIC_SetPriority+0x50>)
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	3b04      	subs	r3, #4
 8002588:	0112      	lsls	r2, r2, #4
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	440b      	add	r3, r1
 800258e:	761a      	strb	r2, [r3, #24]
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	e000e100 	.word	0xe000e100
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b089      	sub	sp, #36	@ 0x24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f1c3 0307 	rsb	r3, r3, #7
 80025be:	2b04      	cmp	r3, #4
 80025c0:	bf28      	it	cs
 80025c2:	2304      	movcs	r3, #4
 80025c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3304      	adds	r3, #4
 80025ca:	2b06      	cmp	r3, #6
 80025cc:	d902      	bls.n	80025d4 <NVIC_EncodePriority+0x30>
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3b03      	subs	r3, #3
 80025d2:	e000      	b.n	80025d6 <NVIC_EncodePriority+0x32>
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d8:	f04f 32ff 	mov.w	r2, #4294967295
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43da      	mvns	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	401a      	ands	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025ec:	f04f 31ff 	mov.w	r1, #4294967295
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	fa01 f303 	lsl.w	r3, r1, r3
 80025f6:	43d9      	mvns	r1, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025fc:	4313      	orrs	r3, r2
         );
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3724      	adds	r7, #36	@ 0x24
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff ff4c 	bl	80024b0 <__NVIC_SetPriorityGrouping>
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
 800262c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002632:	f7ff ff61 	bl	80024f8 <__NVIC_GetPriorityGrouping>
 8002636:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	68b9      	ldr	r1, [r7, #8]
 800263c:	6978      	ldr	r0, [r7, #20]
 800263e:	f7ff ffb1 	bl	80025a4 <NVIC_EncodePriority>
 8002642:	4602      	mov	r2, r0
 8002644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff ff80 	bl	8002550 <__NVIC_SetPriority>
}
 8002650:	bf00      	nop
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff ff54 	bl	8002514 <__NVIC_EnableIRQ>
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002680:	f7ff f996 	bl	80019b0 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e099      	b.n	80027c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0201 	bic.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026b0:	e00f      	b.n	80026d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026b2:	f7ff f97d 	bl	80019b0 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b05      	cmp	r3, #5
 80026be:	d908      	bls.n	80026d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2220      	movs	r2, #32
 80026c4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2203      	movs	r2, #3
 80026ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e078      	b.n	80027c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1e8      	bne.n	80026b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	4b38      	ldr	r3, [pc, #224]	@ (80027cc <HAL_DMA_Init+0x158>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800270a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002716:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	4313      	orrs	r3, r2
 8002722:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002728:	2b04      	cmp	r3, #4
 800272a:	d107      	bne.n	800273c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002734:	4313      	orrs	r3, r2
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4313      	orrs	r3, r2
 800273a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f023 0307 	bic.w	r3, r3, #7
 8002752:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	4313      	orrs	r3, r2
 800275c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002762:	2b04      	cmp	r3, #4
 8002764:	d117      	bne.n	8002796 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	4313      	orrs	r3, r2
 800276e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00e      	beq.n	8002796 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 fa77 	bl	8002c6c <DMA_CheckFifoParam>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2240      	movs	r2, #64	@ 0x40
 8002788:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002792:	2301      	movs	r3, #1
 8002794:	e016      	b.n	80027c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fa2e 	bl	8002c00 <DMA_CalcBaseAndBitshift>
 80027a4:	4603      	mov	r3, r0
 80027a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ac:	223f      	movs	r2, #63	@ 0x3f
 80027ae:	409a      	lsls	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	e010803f 	.word	0xe010803f

080027d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_DMA_Start_IT+0x26>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e048      	b.n	8002888 <HAL_DMA_Start_IT+0xb8>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b01      	cmp	r3, #1
 8002808:	d137      	bne.n	800287a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2202      	movs	r2, #2
 800280e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f9c0 	bl	8002ba4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002828:	223f      	movs	r2, #63	@ 0x3f
 800282a:	409a      	lsls	r2, r3
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0216 	orr.w	r2, r2, #22
 800283e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695a      	ldr	r2, [r3, #20]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800284e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002854:	2b00      	cmp	r3, #0
 8002856:	d007      	beq.n	8002868 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0208 	orr.w	r2, r2, #8
 8002866:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	e005      	b.n	8002886 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002882:	2302      	movs	r3, #2
 8002884:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002886:	7dfb      	ldrb	r3, [r7, #23]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800289c:	4b8e      	ldr	r3, [pc, #568]	@ (8002ad8 <HAL_DMA_IRQHandler+0x248>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a8e      	ldr	r2, [pc, #568]	@ (8002adc <HAL_DMA_IRQHandler+0x24c>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	0a9b      	lsrs	r3, r3, #10
 80028a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ba:	2208      	movs	r2, #8
 80028bc:	409a      	lsls	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d01a      	beq.n	80028fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d013      	beq.n	80028fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0204 	bic.w	r2, r2, #4
 80028e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e8:	2208      	movs	r2, #8
 80028ea:	409a      	lsls	r2, r3
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f4:	f043 0201 	orr.w	r2, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002900:	2201      	movs	r2, #1
 8002902:	409a      	lsls	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4013      	ands	r3, r2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d012      	beq.n	8002932 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00b      	beq.n	8002932 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291e:	2201      	movs	r2, #1
 8002920:	409a      	lsls	r2, r3
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292a:	f043 0202 	orr.w	r2, r3, #2
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002936:	2204      	movs	r2, #4
 8002938:	409a      	lsls	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4013      	ands	r3, r2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d012      	beq.n	8002968 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00b      	beq.n	8002968 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002954:	2204      	movs	r2, #4
 8002956:	409a      	lsls	r2, r3
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002960:	f043 0204 	orr.w	r2, r3, #4
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296c:	2210      	movs	r2, #16
 800296e:	409a      	lsls	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d043      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d03c      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298a:	2210      	movs	r2, #16
 800298c:	409a      	lsls	r2, r3
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d018      	beq.n	80029d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d108      	bne.n	80029c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d024      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	4798      	blx	r3
 80029be:	e01f      	b.n	8002a00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d01b      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	4798      	blx	r3
 80029d0:	e016      	b.n	8002a00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d107      	bne.n	80029f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0208 	bic.w	r2, r2, #8
 80029ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a04:	2220      	movs	r2, #32
 8002a06:	409a      	lsls	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 808f 	beq.w	8002b30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0310 	and.w	r3, r3, #16
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 8087 	beq.w	8002b30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a26:	2220      	movs	r2, #32
 8002a28:	409a      	lsls	r2, r3
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b05      	cmp	r3, #5
 8002a38:	d136      	bne.n	8002aa8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0216 	bic.w	r2, r2, #22
 8002a48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d103      	bne.n	8002a6a <HAL_DMA_IRQHandler+0x1da>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d007      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0208 	bic.w	r2, r2, #8
 8002a78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a7e:	223f      	movs	r2, #63	@ 0x3f
 8002a80:	409a      	lsls	r2, r3
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d07e      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	4798      	blx	r3
        }
        return;
 8002aa6:	e079      	b.n	8002b9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d01d      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10d      	bne.n	8002ae0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d031      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	4798      	blx	r3
 8002ad4:	e02c      	b.n	8002b30 <HAL_DMA_IRQHandler+0x2a0>
 8002ad6:	bf00      	nop
 8002ad8:	20000000 	.word	0x20000000
 8002adc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d023      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	4798      	blx	r3
 8002af0:	e01e      	b.n	8002b30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10f      	bne.n	8002b20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0210 	bic.w	r2, r2, #16
 8002b0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d032      	beq.n	8002b9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d022      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2205      	movs	r2, #5
 8002b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0201 	bic.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d307      	bcc.n	8002b78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f2      	bne.n	8002b5c <HAL_DMA_IRQHandler+0x2cc>
 8002b76:	e000      	b.n	8002b7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d005      	beq.n	8002b9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	4798      	blx	r3
 8002b9a:	e000      	b.n	8002b9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b9c:	bf00      	nop
    }
  }
}
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
 8002bb0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002bc0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b40      	cmp	r3, #64	@ 0x40
 8002bd0:	d108      	bne.n	8002be4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002be2:	e007      	b.n	8002bf4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	60da      	str	r2, [r3, #12]
}
 8002bf4:	bf00      	nop
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	3b10      	subs	r3, #16
 8002c10:	4a13      	ldr	r2, [pc, #76]	@ (8002c60 <DMA_CalcBaseAndBitshift+0x60>)
 8002c12:	fba2 2303 	umull	r2, r3, r2, r3
 8002c16:	091b      	lsrs	r3, r3, #4
 8002c18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c1a:	4a12      	ldr	r2, [pc, #72]	@ (8002c64 <DMA_CalcBaseAndBitshift+0x64>)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4413      	add	r3, r2
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d908      	bls.n	8002c40 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	4b0c      	ldr	r3, [pc, #48]	@ (8002c68 <DMA_CalcBaseAndBitshift+0x68>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	1d1a      	adds	r2, r3, #4
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c3e:	e006      	b.n	8002c4e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	461a      	mov	r2, r3
 8002c46:	4b08      	ldr	r3, [pc, #32]	@ (8002c68 <DMA_CalcBaseAndBitshift+0x68>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	aaaaaaab 	.word	0xaaaaaaab
 8002c64:	0800e5d8 	.word	0x0800e5d8
 8002c68:	fffffc00 	.word	0xfffffc00

08002c6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c74:	2300      	movs	r3, #0
 8002c76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d11f      	bne.n	8002cc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d856      	bhi.n	8002d3a <DMA_CheckFifoParam+0xce>
 8002c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c94 <DMA_CheckFifoParam+0x28>)
 8002c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c92:	bf00      	nop
 8002c94:	08002ca5 	.word	0x08002ca5
 8002c98:	08002cb7 	.word	0x08002cb7
 8002c9c:	08002ca5 	.word	0x08002ca5
 8002ca0:	08002d3b 	.word	0x08002d3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d046      	beq.n	8002d3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cb4:	e043      	b.n	8002d3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002cbe:	d140      	bne.n	8002d42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cc4:	e03d      	b.n	8002d42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cce:	d121      	bne.n	8002d14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d837      	bhi.n	8002d46 <DMA_CheckFifoParam+0xda>
 8002cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8002cdc <DMA_CheckFifoParam+0x70>)
 8002cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cdc:	08002ced 	.word	0x08002ced
 8002ce0:	08002cf3 	.word	0x08002cf3
 8002ce4:	08002ced 	.word	0x08002ced
 8002ce8:	08002d05 	.word	0x08002d05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf0:	e030      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d025      	beq.n	8002d4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d02:	e022      	b.n	8002d4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d08:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d0c:	d11f      	bne.n	8002d4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d12:	e01c      	b.n	8002d4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d903      	bls.n	8002d22 <DMA_CheckFifoParam+0xb6>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	d003      	beq.n	8002d28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d20:	e018      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	73fb      	strb	r3, [r7, #15]
      break;
 8002d26:	e015      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00e      	beq.n	8002d52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
      break;
 8002d38:	e00b      	b.n	8002d52 <DMA_CheckFifoParam+0xe6>
      break;
 8002d3a:	bf00      	nop
 8002d3c:	e00a      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
      break;
 8002d3e:	bf00      	nop
 8002d40:	e008      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
      break;
 8002d42:	bf00      	nop
 8002d44:	e006      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
      break;
 8002d46:	bf00      	nop
 8002d48:	e004      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
      break;
 8002d4a:	bf00      	nop
 8002d4c:	e002      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d4e:	bf00      	nop
 8002d50:	e000      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
      break;
 8002d52:	bf00      	nop
    }
  } 
  
  return status; 
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop

08002d64 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e086      	b.n	8002e84 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d106      	bne.n	8002d8e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f7fe fa9f 	bl	80012cc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d8e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e8c <HAL_ETH_Init+0x128>)
 8002d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d92:	4a3e      	ldr	r2, [pc, #248]	@ (8002e8c <HAL_ETH_Init+0x128>)
 8002d94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d9a:	4b3c      	ldr	r3, [pc, #240]	@ (8002e8c <HAL_ETH_Init+0x128>)
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002da6:	4b3a      	ldr	r3, [pc, #232]	@ (8002e90 <HAL_ETH_Init+0x12c>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	4a39      	ldr	r2, [pc, #228]	@ (8002e90 <HAL_ETH_Init+0x12c>)
 8002dac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002db0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002db2:	4b37      	ldr	r3, [pc, #220]	@ (8002e90 <HAL_ETH_Init+0x12c>)
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	4935      	ldr	r1, [pc, #212]	@ (8002e90 <HAL_ETH_Init+0x12c>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002dc0:	4b33      	ldr	r3, [pc, #204]	@ (8002e90 <HAL_ETH_Init+0x12c>)
 8002dc2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6812      	ldr	r2, [r2, #0]
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002dda:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ddc:	f7fe fde8 	bl	80019b0 <HAL_GetTick>
 8002de0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002de2:	e011      	b.n	8002e08 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002de4:	f7fe fde4 	bl	80019b0 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002df2:	d909      	bls.n	8002e08 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2204      	movs	r2, #4
 8002df8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	22e0      	movs	r2, #224	@ 0xe0
 8002e00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e03d      	b.n	8002e84 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1e4      	bne.n	8002de4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f97a 	bl	8003114 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 fa25 	bl	8003270 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fa7b 	bl	8003322 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	461a      	mov	r2, r3
 8002e32:	2100      	movs	r1, #0
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f9e3 	bl	8003200 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002e48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	4b0f      	ldr	r3, [pc, #60]	@ (8002e94 <HAL_ETH_Init+0x130>)
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002e6e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2210      	movs	r2, #16
 8002e7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	40013800 	.word	0x40013800
 8002e94:	00020060 	.word	0x00020060

08002e98 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4b53      	ldr	r3, [pc, #332]	@ (8002ffc <ETH_SetMACConfig+0x164>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	7b9b      	ldrb	r3, [r3, #14]
 8002eb6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	7c12      	ldrb	r2, [r2, #16]
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d102      	bne.n	8002ec6 <ETH_SetMACConfig+0x2e>
 8002ec0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002ec4:	e000      	b.n	8002ec8 <ETH_SetMACConfig+0x30>
 8002ec6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002ec8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	7c52      	ldrb	r2, [r2, #17]
 8002ece:	2a00      	cmp	r2, #0
 8002ed0:	d102      	bne.n	8002ed8 <ETH_SetMACConfig+0x40>
 8002ed2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002ed6:	e000      	b.n	8002eda <ETH_SetMACConfig+0x42>
 8002ed8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002eda:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ee0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	7fdb      	ldrb	r3, [r3, #31]
 8002ee6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002ee8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002eee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	7f92      	ldrb	r2, [r2, #30]
 8002ef4:	2a00      	cmp	r2, #0
 8002ef6:	d102      	bne.n	8002efe <ETH_SetMACConfig+0x66>
 8002ef8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002efc:	e000      	b.n	8002f00 <ETH_SetMACConfig+0x68>
 8002efe:	2200      	movs	r2, #0
                        macconf->Speed |
 8002f00:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	7f1b      	ldrb	r3, [r3, #28]
 8002f06:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f08:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f0e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	791b      	ldrb	r3, [r3, #4]
 8002f14:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002f16:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002f1e:	2a00      	cmp	r2, #0
 8002f20:	d102      	bne.n	8002f28 <ETH_SetMACConfig+0x90>
 8002f22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f26:	e000      	b.n	8002f2a <ETH_SetMACConfig+0x92>
 8002f28:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f2a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	7bdb      	ldrb	r3, [r3, #15]
 8002f30:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f32:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f38:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002f40:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002f42:	4313      	orrs	r3, r2
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f5a:	2001      	movs	r0, #1
 8002f5c:	f7fe fd34 	bl	80019c8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002f76:	4013      	ands	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f7e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002f86:	2a00      	cmp	r2, #0
 8002f88:	d101      	bne.n	8002f8e <ETH_SetMACConfig+0xf6>
 8002f8a:	2280      	movs	r2, #128	@ 0x80
 8002f8c:	e000      	b.n	8002f90 <ETH_SetMACConfig+0xf8>
 8002f8e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f90:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002f9e:	2a01      	cmp	r2, #1
 8002fa0:	d101      	bne.n	8002fa6 <ETH_SetMACConfig+0x10e>
 8002fa2:	2208      	movs	r2, #8
 8002fa4:	e000      	b.n	8002fa8 <ETH_SetMACConfig+0x110>
 8002fa6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002fa8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002fb0:	2a01      	cmp	r2, #1
 8002fb2:	d101      	bne.n	8002fb8 <ETH_SetMACConfig+0x120>
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	e000      	b.n	8002fba <ETH_SetMACConfig+0x122>
 8002fb8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002fba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002fc2:	2a01      	cmp	r2, #1
 8002fc4:	d101      	bne.n	8002fca <ETH_SetMACConfig+0x132>
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	e000      	b.n	8002fcc <ETH_SetMACConfig+0x134>
 8002fca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	f7fe fcef 	bl	80019c8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	619a      	str	r2, [r3, #24]
}
 8002ff2:	bf00      	nop
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	fd20810f 	.word	0xfd20810f

08003000 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	4b3d      	ldr	r3, [pc, #244]	@ (8003110 <ETH_SetDMAConfig+0x110>)
 800301a:	4013      	ands	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	7b1b      	ldrb	r3, [r3, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d102      	bne.n	800302c <ETH_SetDMAConfig+0x2c>
 8003026:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800302a:	e000      	b.n	800302e <ETH_SetDMAConfig+0x2e>
 800302c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	7b5b      	ldrb	r3, [r3, #13]
 8003032:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003034:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	7f52      	ldrb	r2, [r2, #29]
 800303a:	2a00      	cmp	r2, #0
 800303c:	d102      	bne.n	8003044 <ETH_SetDMAConfig+0x44>
 800303e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003042:	e000      	b.n	8003046 <ETH_SetDMAConfig+0x46>
 8003044:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003046:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	7b9b      	ldrb	r3, [r3, #14]
 800304c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800304e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003054:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	7f1b      	ldrb	r3, [r3, #28]
 800305a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800305c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	7f9b      	ldrb	r3, [r3, #30]
 8003062:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003064:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800306a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003072:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003074:	4313      	orrs	r3, r2
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4313      	orrs	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003084:	461a      	mov	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003096:	2001      	movs	r0, #1
 8003098:	f7fe fc96 	bl	80019c8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030a4:	461a      	mov	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	791b      	ldrb	r3, [r3, #4]
 80030ae:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030b4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80030ba:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80030c0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80030c8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80030ca:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80030d2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80030d8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80030e6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030f4:	2001      	movs	r0, #1
 80030f6:	f7fe fc67 	bl	80019c8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003102:	461a      	mov	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6013      	str	r3, [r2, #0]
}
 8003108:	bf00      	nop
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	f8de3f23 	.word	0xf8de3f23

08003114 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b0a6      	sub	sp, #152	@ 0x98
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800311c:	2301      	movs	r3, #1
 800311e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003122:	2301      	movs	r3, #1
 8003124:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003128:	2300      	movs	r3, #0
 800312a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800312c:	2300      	movs	r3, #0
 800312e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003132:	2301      	movs	r3, #1
 8003134:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003138:	2300      	movs	r3, #0
 800313a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800313e:	2301      	movs	r3, #1
 8003140:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003144:	2301      	movs	r3, #1
 8003146:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800314a:	2300      	movs	r3, #0
 800314c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003150:	2300      	movs	r3, #0
 8003152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003156:	2300      	movs	r3, #0
 8003158:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800315a:	2300      	movs	r3, #0
 800315c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003160:	2300      	movs	r3, #0
 8003162:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003164:	2300      	movs	r3, #0
 8003166:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800316a:	2300      	movs	r3, #0
 800316c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003170:	2300      	movs	r3, #0
 8003172:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003176:	2300      	movs	r3, #0
 8003178:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800317c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003180:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003182:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003186:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003188:	2300      	movs	r3, #0
 800318a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800318e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003192:	4619      	mov	r1, r3
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff fe7f 	bl	8002e98 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800319a:	2301      	movs	r3, #1
 800319c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800319e:	2301      	movs	r3, #1
 80031a0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80031a2:	2301      	movs	r3, #1
 80031a4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80031a8:	2301      	movs	r3, #1
 80031aa:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80031b6:	2300      	movs	r3, #0
 80031b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80031bc:	2300      	movs	r3, #0
 80031be:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80031c0:	2301      	movs	r3, #1
 80031c2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80031c6:	2301      	movs	r3, #1
 80031c8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80031ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80031ce:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80031d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80031d4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80031d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80031da:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80031dc:	2301      	movs	r3, #1
 80031de:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80031e6:	2300      	movs	r3, #0
 80031e8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80031ea:	f107 0308 	add.w	r3, r7, #8
 80031ee:	4619      	mov	r1, r3
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff ff05 	bl	8003000 <ETH_SetDMAConfig>
}
 80031f6:	bf00      	nop
 80031f8:	3798      	adds	r7, #152	@ 0x98
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
	...

08003200 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3305      	adds	r3, #5
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	021b      	lsls	r3, r3, #8
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	3204      	adds	r2, #4
 8003218:	7812      	ldrb	r2, [r2, #0]
 800321a:	4313      	orrs	r3, r2
 800321c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	4b11      	ldr	r3, [pc, #68]	@ (8003268 <ETH_MACAddressConfig+0x68>)
 8003222:	4413      	add	r3, r2
 8003224:	461a      	mov	r2, r3
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3303      	adds	r3, #3
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	061a      	lsls	r2, r3, #24
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3302      	adds	r3, #2
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	041b      	lsls	r3, r3, #16
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3301      	adds	r3, #1
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	021b      	lsls	r3, r3, #8
 8003244:	4313      	orrs	r3, r2
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	7812      	ldrb	r2, [r2, #0]
 800324a:	4313      	orrs	r3, r2
 800324c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	4b06      	ldr	r3, [pc, #24]	@ (800326c <ETH_MACAddressConfig+0x6c>)
 8003252:	4413      	add	r3, r2
 8003254:	461a      	mov	r2, r3
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	6013      	str	r3, [r2, #0]
}
 800325a:	bf00      	nop
 800325c:	371c      	adds	r7, #28
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40028040 	.word	0x40028040
 800326c:	40028044 	.word	0x40028044

08003270 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003278:	2300      	movs	r3, #0
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	e03e      	b.n	80032fc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68d9      	ldr	r1, [r3, #12]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	440b      	add	r3, r1
 800328e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2200      	movs	r2, #0
 800329a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2200      	movs	r2, #0
 80032a0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2200      	movs	r2, #0
 80032a6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	3206      	adds	r2, #6
 80032b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d80c      	bhi.n	80032e0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68d9      	ldr	r1, [r3, #12]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	440b      	add	r3, r1
 80032d8:	461a      	mov	r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	e004      	b.n	80032ea <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	461a      	mov	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	3301      	adds	r3, #1
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d9bd      	bls.n	800327e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003314:	611a      	str	r2, [r3, #16]
}
 8003316:	bf00      	nop
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003322:	b480      	push	{r7}
 8003324:	b085      	sub	sp, #20
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	e048      	b.n	80033c2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6919      	ldr	r1, [r3, #16]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	440b      	add	r3, r1
 8003340:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2200      	movs	r2, #0
 800334c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2200      	movs	r2, #0
 8003352:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2200      	movs	r2, #0
 8003358:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2200      	movs	r2, #0
 800335e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2200      	movs	r2, #0
 8003364:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800336c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003386:	68b9      	ldr	r1, [r7, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	3212      	adds	r2, #18
 800338e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d80c      	bhi.n	80033b2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6919      	ldr	r1, [r3, #16]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	440b      	add	r3, r1
 80033aa:	461a      	mov	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	60da      	str	r2, [r3, #12]
 80033b0:	e004      	b.n	80033bc <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	461a      	mov	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	3301      	adds	r3, #1
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d9b3      	bls.n	8003330 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691a      	ldr	r2, [r3, #16]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033f2:	60da      	str	r2, [r3, #12]
}
 80033f4:	bf00      	nop
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003400:	b480      	push	{r7}
 8003402:	b089      	sub	sp, #36	@ 0x24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800340a:	2300      	movs	r3, #0
 800340c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003412:	2300      	movs	r3, #0
 8003414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003416:	2300      	movs	r3, #0
 8003418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
 800341e:	e175      	b.n	800370c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003420:	2201      	movs	r2, #1
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	4013      	ands	r3, r2
 8003432:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	429a      	cmp	r2, r3
 800343a:	f040 8164 	bne.w	8003706 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	2b01      	cmp	r3, #1
 8003448:	d005      	beq.n	8003456 <HAL_GPIO_Init+0x56>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d130      	bne.n	80034b8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	2203      	movs	r2, #3
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43db      	mvns	r3, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4013      	ands	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4313      	orrs	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800348c:	2201      	movs	r2, #1
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	f003 0201 	and.w	r2, r3, #1
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 0303 	and.w	r3, r3, #3
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	d017      	beq.n	80034f4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	2203      	movs	r2, #3
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d123      	bne.n	8003548 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	08da      	lsrs	r2, r3, #3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3208      	adds	r2, #8
 8003508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800350c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	220f      	movs	r2, #15
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	43db      	mvns	r3, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4313      	orrs	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	08da      	lsrs	r2, r3, #3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3208      	adds	r2, #8
 8003542:	69b9      	ldr	r1, [r7, #24]
 8003544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	2203      	movs	r2, #3
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4013      	ands	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 0203 	and.w	r2, r3, #3
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4313      	orrs	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 80be 	beq.w	8003706 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800358a:	4b66      	ldr	r3, [pc, #408]	@ (8003724 <HAL_GPIO_Init+0x324>)
 800358c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358e:	4a65      	ldr	r2, [pc, #404]	@ (8003724 <HAL_GPIO_Init+0x324>)
 8003590:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003594:	6453      	str	r3, [r2, #68]	@ 0x44
 8003596:	4b63      	ldr	r3, [pc, #396]	@ (8003724 <HAL_GPIO_Init+0x324>)
 8003598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800359a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80035a2:	4a61      	ldr	r2, [pc, #388]	@ (8003728 <HAL_GPIO_Init+0x328>)
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	089b      	lsrs	r3, r3, #2
 80035a8:	3302      	adds	r3, #2
 80035aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	220f      	movs	r2, #15
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43db      	mvns	r3, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4013      	ands	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a58      	ldr	r2, [pc, #352]	@ (800372c <HAL_GPIO_Init+0x32c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d037      	beq.n	800363e <HAL_GPIO_Init+0x23e>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a57      	ldr	r2, [pc, #348]	@ (8003730 <HAL_GPIO_Init+0x330>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d031      	beq.n	800363a <HAL_GPIO_Init+0x23a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a56      	ldr	r2, [pc, #344]	@ (8003734 <HAL_GPIO_Init+0x334>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d02b      	beq.n	8003636 <HAL_GPIO_Init+0x236>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a55      	ldr	r2, [pc, #340]	@ (8003738 <HAL_GPIO_Init+0x338>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d025      	beq.n	8003632 <HAL_GPIO_Init+0x232>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a54      	ldr	r2, [pc, #336]	@ (800373c <HAL_GPIO_Init+0x33c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d01f      	beq.n	800362e <HAL_GPIO_Init+0x22e>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a53      	ldr	r2, [pc, #332]	@ (8003740 <HAL_GPIO_Init+0x340>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d019      	beq.n	800362a <HAL_GPIO_Init+0x22a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a52      	ldr	r2, [pc, #328]	@ (8003744 <HAL_GPIO_Init+0x344>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d013      	beq.n	8003626 <HAL_GPIO_Init+0x226>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a51      	ldr	r2, [pc, #324]	@ (8003748 <HAL_GPIO_Init+0x348>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00d      	beq.n	8003622 <HAL_GPIO_Init+0x222>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a50      	ldr	r2, [pc, #320]	@ (800374c <HAL_GPIO_Init+0x34c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d007      	beq.n	800361e <HAL_GPIO_Init+0x21e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a4f      	ldr	r2, [pc, #316]	@ (8003750 <HAL_GPIO_Init+0x350>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d101      	bne.n	800361a <HAL_GPIO_Init+0x21a>
 8003616:	2309      	movs	r3, #9
 8003618:	e012      	b.n	8003640 <HAL_GPIO_Init+0x240>
 800361a:	230a      	movs	r3, #10
 800361c:	e010      	b.n	8003640 <HAL_GPIO_Init+0x240>
 800361e:	2308      	movs	r3, #8
 8003620:	e00e      	b.n	8003640 <HAL_GPIO_Init+0x240>
 8003622:	2307      	movs	r3, #7
 8003624:	e00c      	b.n	8003640 <HAL_GPIO_Init+0x240>
 8003626:	2306      	movs	r3, #6
 8003628:	e00a      	b.n	8003640 <HAL_GPIO_Init+0x240>
 800362a:	2305      	movs	r3, #5
 800362c:	e008      	b.n	8003640 <HAL_GPIO_Init+0x240>
 800362e:	2304      	movs	r3, #4
 8003630:	e006      	b.n	8003640 <HAL_GPIO_Init+0x240>
 8003632:	2303      	movs	r3, #3
 8003634:	e004      	b.n	8003640 <HAL_GPIO_Init+0x240>
 8003636:	2302      	movs	r3, #2
 8003638:	e002      	b.n	8003640 <HAL_GPIO_Init+0x240>
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <HAL_GPIO_Init+0x240>
 800363e:	2300      	movs	r3, #0
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	f002 0203 	and.w	r2, r2, #3
 8003646:	0092      	lsls	r2, r2, #2
 8003648:	4093      	lsls	r3, r2
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003650:	4935      	ldr	r1, [pc, #212]	@ (8003728 <HAL_GPIO_Init+0x328>)
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	089b      	lsrs	r3, r3, #2
 8003656:	3302      	adds	r3, #2
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800365e:	4b3d      	ldr	r3, [pc, #244]	@ (8003754 <HAL_GPIO_Init+0x354>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	43db      	mvns	r3, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4013      	ands	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003682:	4a34      	ldr	r2, [pc, #208]	@ (8003754 <HAL_GPIO_Init+0x354>)
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003688:	4b32      	ldr	r3, [pc, #200]	@ (8003754 <HAL_GPIO_Init+0x354>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	43db      	mvns	r3, r3
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4013      	ands	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036ac:	4a29      	ldr	r2, [pc, #164]	@ (8003754 <HAL_GPIO_Init+0x354>)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036b2:	4b28      	ldr	r3, [pc, #160]	@ (8003754 <HAL_GPIO_Init+0x354>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	43db      	mvns	r3, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	4013      	ands	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003754 <HAL_GPIO_Init+0x354>)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003754 <HAL_GPIO_Init+0x354>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	43db      	mvns	r3, r3
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4013      	ands	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003700:	4a14      	ldr	r2, [pc, #80]	@ (8003754 <HAL_GPIO_Init+0x354>)
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	3301      	adds	r3, #1
 800370a:	61fb      	str	r3, [r7, #28]
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	2b0f      	cmp	r3, #15
 8003710:	f67f ae86 	bls.w	8003420 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003714:	bf00      	nop
 8003716:	bf00      	nop
 8003718:	3724      	adds	r7, #36	@ 0x24
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40023800 	.word	0x40023800
 8003728:	40013800 	.word	0x40013800
 800372c:	40020000 	.word	0x40020000
 8003730:	40020400 	.word	0x40020400
 8003734:	40020800 	.word	0x40020800
 8003738:	40020c00 	.word	0x40020c00
 800373c:	40021000 	.word	0x40021000
 8003740:	40021400 	.word	0x40021400
 8003744:	40021800 	.word	0x40021800
 8003748:	40021c00 	.word	0x40021c00
 800374c:	40022000 	.word	0x40022000
 8003750:	40022400 	.word	0x40022400
 8003754:	40013c00 	.word	0x40013c00

08003758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	807b      	strh	r3, [r7, #2]
 8003764:	4613      	mov	r3, r2
 8003766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003768:	787b      	ldrb	r3, [r7, #1]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800376e:	887a      	ldrh	r2, [r7, #2]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003774:	e003      	b.n	800377e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003776:	887b      	ldrh	r3, [r7, #2]
 8003778:	041a      	lsls	r2, r3, #16
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	619a      	str	r2, [r3, #24]
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800378a:	b480      	push	{r7}
 800378c:	b085      	sub	sp, #20
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	460b      	mov	r3, r1
 8003794:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800379c:	887a      	ldrh	r2, [r7, #2]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	4013      	ands	r3, r2
 80037a2:	041a      	lsls	r2, r3, #16
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	43d9      	mvns	r1, r3
 80037a8:	887b      	ldrh	r3, [r7, #2]
 80037aa:	400b      	ands	r3, r1
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	619a      	str	r2, [r3, #24]
}
 80037b2:	bf00      	nop
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
	...

080037c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037ca:	4b08      	ldr	r3, [pc, #32]	@ (80037ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037cc:	695a      	ldr	r2, [r3, #20]
 80037ce:	88fb      	ldrh	r3, [r7, #6]
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d006      	beq.n	80037e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037d6:	4a05      	ldr	r2, [pc, #20]	@ (80037ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037d8:	88fb      	ldrh	r3, [r7, #6]
 80037da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037dc:	88fb      	ldrh	r3, [r7, #6]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fd fb90 	bl	8000f04 <HAL_GPIO_EXTI_Callback>
  }
}
 80037e4:	bf00      	nop
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40013c00 	.word	0x40013c00

080037f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e108      	b.n	8003a14 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d106      	bne.n	8003822 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7fd fe6d 	bl	80014fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2203      	movs	r2, #3
 8003826:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003830:	d102      	bne.n	8003838 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f002 fb4b 	bl	8005ed8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	7c1a      	ldrb	r2, [r3, #16]
 800384a:	f88d 2000 	strb.w	r2, [sp]
 800384e:	3304      	adds	r3, #4
 8003850:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003852:	f002 fae7 	bl	8005e24 <USB_CoreInit>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0d5      	b.n	8003a14 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2100      	movs	r1, #0
 800386e:	4618      	mov	r0, r3
 8003870:	f002 fb43 	bl	8005efa <USB_SetCurrentMode>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d005      	beq.n	8003886 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2202      	movs	r2, #2
 800387e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e0c6      	b.n	8003a14 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003886:	2300      	movs	r3, #0
 8003888:	73fb      	strb	r3, [r7, #15]
 800388a:	e04a      	b.n	8003922 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800388c:	7bfa      	ldrb	r2, [r7, #15]
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	4613      	mov	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	4413      	add	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	3315      	adds	r3, #21
 800389c:	2201      	movs	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038a0:	7bfa      	ldrb	r2, [r7, #15]
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	3314      	adds	r3, #20
 80038b0:	7bfa      	ldrb	r2, [r7, #15]
 80038b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038b4:	7bfa      	ldrb	r2, [r7, #15]
 80038b6:	7bfb      	ldrb	r3, [r7, #15]
 80038b8:	b298      	uxth	r0, r3
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	4413      	add	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	332e      	adds	r3, #46	@ 0x2e
 80038c8:	4602      	mov	r2, r0
 80038ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038cc:	7bfa      	ldrb	r2, [r7, #15]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	3318      	adds	r3, #24
 80038dc:	2200      	movs	r2, #0
 80038de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038e0:	7bfa      	ldrb	r2, [r7, #15]
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	331c      	adds	r3, #28
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038f4:	7bfa      	ldrb	r2, [r7, #15]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	3320      	adds	r3, #32
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003908:	7bfa      	ldrb	r2, [r7, #15]
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	4413      	add	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	3324      	adds	r3, #36	@ 0x24
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	3301      	adds	r3, #1
 8003920:	73fb      	strb	r3, [r7, #15]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	791b      	ldrb	r3, [r3, #4]
 8003926:	7bfa      	ldrb	r2, [r7, #15]
 8003928:	429a      	cmp	r2, r3
 800392a:	d3af      	bcc.n	800388c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800392c:	2300      	movs	r3, #0
 800392e:	73fb      	strb	r3, [r7, #15]
 8003930:	e044      	b.n	80039bc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003932:	7bfa      	ldrb	r2, [r7, #15]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003944:	2200      	movs	r2, #0
 8003946:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003948:	7bfa      	ldrb	r2, [r7, #15]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800395a:	7bfa      	ldrb	r2, [r7, #15]
 800395c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800395e:	7bfa      	ldrb	r2, [r7, #15]
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003970:	2200      	movs	r2, #0
 8003972:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003974:	7bfa      	ldrb	r2, [r7, #15]
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800398a:	7bfa      	ldrb	r2, [r7, #15]
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	4613      	mov	r3, r2
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	4413      	add	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	440b      	add	r3, r1
 8003998:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039a0:	7bfa      	ldrb	r2, [r7, #15]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
 80039b8:	3301      	adds	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	791b      	ldrb	r3, [r3, #4]
 80039c0:	7bfa      	ldrb	r2, [r7, #15]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d3b5      	bcc.n	8003932 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	7c1a      	ldrb	r2, [r3, #16]
 80039ce:	f88d 2000 	strb.w	r2, [sp]
 80039d2:	3304      	adds	r3, #4
 80039d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039d6:	f002 fadd 	bl	8005f94 <USB_DevInit>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e013      	b.n	8003a14 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	7b1b      	ldrb	r3, [r3, #12]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d102      	bne.n	8003a08 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f80a 	bl	8003a1c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f002 fc98 	bl	8006342 <USB_DevDisconnect>

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a4a:	4b05      	ldr	r3, [pc, #20]	@ (8003a60 <HAL_PCDEx_ActivateLPM+0x44>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	10000003 	.word	0x10000003

08003a64 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a68:	4b05      	ldr	r3, [pc, #20]	@ (8003a80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a04      	ldr	r2, [pc, #16]	@ (8003a80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a72:	6013      	str	r3, [r2, #0]
}
 8003a74:	bf00      	nop
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40007000 	.word	0x40007000

08003a84 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a8e:	4b23      	ldr	r3, [pc, #140]	@ (8003b1c <HAL_PWREx_EnableOverDrive+0x98>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	4a22      	ldr	r2, [pc, #136]	@ (8003b1c <HAL_PWREx_EnableOverDrive+0x98>)
 8003a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a9a:	4b20      	ldr	r3, [pc, #128]	@ (8003b1c <HAL_PWREx_EnableOverDrive+0x98>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8003b20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a1d      	ldr	r2, [pc, #116]	@ (8003b20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ab2:	f7fd ff7d 	bl	80019b0 <HAL_GetTick>
 8003ab6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ab8:	e009      	b.n	8003ace <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003aba:	f7fd ff79 	bl	80019b0 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ac8:	d901      	bls.n	8003ace <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e022      	b.n	8003b14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ace:	4b14      	ldr	r3, [pc, #80]	@ (8003b20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ada:	d1ee      	bne.n	8003aba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003adc:	4b10      	ldr	r3, [pc, #64]	@ (8003b20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a0f      	ldr	r2, [pc, #60]	@ (8003b20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ae6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ae8:	f7fd ff62 	bl	80019b0 <HAL_GetTick>
 8003aec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003aee:	e009      	b.n	8003b04 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003af0:	f7fd ff5e 	bl	80019b0 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003afe:	d901      	bls.n	8003b04 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e007      	b.n	8003b14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b04:	4b06      	ldr	r3, [pc, #24]	@ (8003b20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b10:	d1ee      	bne.n	8003af0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	40007000 	.word	0x40007000

08003b24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e29b      	b.n	8004072 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 8087 	beq.w	8003c56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b48:	4b96      	ldr	r3, [pc, #600]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 030c 	and.w	r3, r3, #12
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d00c      	beq.n	8003b6e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b54:	4b93      	ldr	r3, [pc, #588]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 030c 	and.w	r3, r3, #12
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d112      	bne.n	8003b86 <HAL_RCC_OscConfig+0x62>
 8003b60:	4b90      	ldr	r3, [pc, #576]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b6c:	d10b      	bne.n	8003b86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b6e:	4b8d      	ldr	r3, [pc, #564]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d06c      	beq.n	8003c54 <HAL_RCC_OscConfig+0x130>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d168      	bne.n	8003c54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e275      	b.n	8004072 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b8e:	d106      	bne.n	8003b9e <HAL_RCC_OscConfig+0x7a>
 8003b90:	4b84      	ldr	r3, [pc, #528]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a83      	ldr	r2, [pc, #524]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003b96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	e02e      	b.n	8003bfc <HAL_RCC_OscConfig+0xd8>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x9c>
 8003ba6:	4b7f      	ldr	r3, [pc, #508]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a7e      	ldr	r2, [pc, #504]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003bac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	4b7c      	ldr	r3, [pc, #496]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a7b      	ldr	r2, [pc, #492]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003bb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	e01d      	b.n	8003bfc <HAL_RCC_OscConfig+0xd8>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bc8:	d10c      	bne.n	8003be4 <HAL_RCC_OscConfig+0xc0>
 8003bca:	4b76      	ldr	r3, [pc, #472]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a75      	ldr	r2, [pc, #468]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003bd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	4b73      	ldr	r3, [pc, #460]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a72      	ldr	r2, [pc, #456]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	e00b      	b.n	8003bfc <HAL_RCC_OscConfig+0xd8>
 8003be4:	4b6f      	ldr	r3, [pc, #444]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a6e      	ldr	r2, [pc, #440]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003bea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	4b6c      	ldr	r3, [pc, #432]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a6b      	ldr	r2, [pc, #428]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003bf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d013      	beq.n	8003c2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c04:	f7fd fed4 	bl	80019b0 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c0c:	f7fd fed0 	bl	80019b0 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b64      	cmp	r3, #100	@ 0x64
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e229      	b.n	8004072 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1e:	4b61      	ldr	r3, [pc, #388]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0f0      	beq.n	8003c0c <HAL_RCC_OscConfig+0xe8>
 8003c2a:	e014      	b.n	8003c56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2c:	f7fd fec0 	bl	80019b0 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c34:	f7fd febc 	bl	80019b0 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b64      	cmp	r3, #100	@ 0x64
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e215      	b.n	8004072 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c46:	4b57      	ldr	r3, [pc, #348]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0x110>
 8003c52:	e000      	b.n	8003c56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d069      	beq.n	8003d36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c62:	4b50      	ldr	r3, [pc, #320]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 030c 	and.w	r3, r3, #12
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00b      	beq.n	8003c86 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c6e:	4b4d      	ldr	r3, [pc, #308]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 030c 	and.w	r3, r3, #12
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d11c      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x190>
 8003c7a:	4b4a      	ldr	r3, [pc, #296]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d116      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c86:	4b47      	ldr	r3, [pc, #284]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d005      	beq.n	8003c9e <HAL_RCC_OscConfig+0x17a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d001      	beq.n	8003c9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e1e9      	b.n	8004072 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c9e:	4b41      	ldr	r3, [pc, #260]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	493d      	ldr	r1, [pc, #244]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb2:	e040      	b.n	8003d36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d023      	beq.n	8003d04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cbc:	4b39      	ldr	r3, [pc, #228]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a38      	ldr	r2, [pc, #224]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc8:	f7fd fe72 	bl	80019b0 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd0:	f7fd fe6e 	bl	80019b0 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e1c7      	b.n	8004072 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce2:	4b30      	ldr	r3, [pc, #192]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cee:	4b2d      	ldr	r3, [pc, #180]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	4929      	ldr	r1, [pc, #164]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	600b      	str	r3, [r1, #0]
 8003d02:	e018      	b.n	8003d36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d04:	4b27      	ldr	r3, [pc, #156]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a26      	ldr	r2, [pc, #152]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003d0a:	f023 0301 	bic.w	r3, r3, #1
 8003d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d10:	f7fd fe4e 	bl	80019b0 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d18:	f7fd fe4a 	bl	80019b0 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e1a3      	b.n	8004072 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d038      	beq.n	8003db4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d019      	beq.n	8003d7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d4a:	4b16      	ldr	r3, [pc, #88]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d4e:	4a15      	ldr	r2, [pc, #84]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003d50:	f043 0301 	orr.w	r3, r3, #1
 8003d54:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d56:	f7fd fe2b 	bl	80019b0 <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d5e:	f7fd fe27 	bl	80019b0 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e180      	b.n	8004072 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d70:	4b0c      	ldr	r3, [pc, #48]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003d72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0f0      	beq.n	8003d5e <HAL_RCC_OscConfig+0x23a>
 8003d7c:	e01a      	b.n	8003db4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d7e:	4b09      	ldr	r3, [pc, #36]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003d80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d82:	4a08      	ldr	r2, [pc, #32]	@ (8003da4 <HAL_RCC_OscConfig+0x280>)
 8003d84:	f023 0301 	bic.w	r3, r3, #1
 8003d88:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8a:	f7fd fe11 	bl	80019b0 <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d90:	e00a      	b.n	8003da8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d92:	f7fd fe0d 	bl	80019b0 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d903      	bls.n	8003da8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e166      	b.n	8004072 <HAL_RCC_OscConfig+0x54e>
 8003da4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da8:	4b92      	ldr	r3, [pc, #584]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003daa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1ee      	bne.n	8003d92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 80a4 	beq.w	8003f0a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dc2:	4b8c      	ldr	r3, [pc, #560]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10d      	bne.n	8003dea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dce:	4b89      	ldr	r3, [pc, #548]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	4a88      	ldr	r2, [pc, #544]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dda:	4b86      	ldr	r3, [pc, #536]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003de2:	60bb      	str	r3, [r7, #8]
 8003de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003de6:	2301      	movs	r3, #1
 8003de8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dea:	4b83      	ldr	r3, [pc, #524]	@ (8003ff8 <HAL_RCC_OscConfig+0x4d4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d118      	bne.n	8003e28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003df6:	4b80      	ldr	r3, [pc, #512]	@ (8003ff8 <HAL_RCC_OscConfig+0x4d4>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a7f      	ldr	r2, [pc, #508]	@ (8003ff8 <HAL_RCC_OscConfig+0x4d4>)
 8003dfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e02:	f7fd fdd5 	bl	80019b0 <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e08:	e008      	b.n	8003e1c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e0a:	f7fd fdd1 	bl	80019b0 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b64      	cmp	r3, #100	@ 0x64
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e12a      	b.n	8004072 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e1c:	4b76      	ldr	r3, [pc, #472]	@ (8003ff8 <HAL_RCC_OscConfig+0x4d4>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0f0      	beq.n	8003e0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d106      	bne.n	8003e3e <HAL_RCC_OscConfig+0x31a>
 8003e30:	4b70      	ldr	r3, [pc, #448]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e34:	4a6f      	ldr	r2, [pc, #444]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e3c:	e02d      	b.n	8003e9a <HAL_RCC_OscConfig+0x376>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10c      	bne.n	8003e60 <HAL_RCC_OscConfig+0x33c>
 8003e46:	4b6b      	ldr	r3, [pc, #428]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e4a:	4a6a      	ldr	r2, [pc, #424]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003e4c:	f023 0301 	bic.w	r3, r3, #1
 8003e50:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e52:	4b68      	ldr	r3, [pc, #416]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e56:	4a67      	ldr	r2, [pc, #412]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003e58:	f023 0304 	bic.w	r3, r3, #4
 8003e5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e5e:	e01c      	b.n	8003e9a <HAL_RCC_OscConfig+0x376>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2b05      	cmp	r3, #5
 8003e66:	d10c      	bne.n	8003e82 <HAL_RCC_OscConfig+0x35e>
 8003e68:	4b62      	ldr	r3, [pc, #392]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6c:	4a61      	ldr	r2, [pc, #388]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003e6e:	f043 0304 	orr.w	r3, r3, #4
 8003e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e74:	4b5f      	ldr	r3, [pc, #380]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e78:	4a5e      	ldr	r2, [pc, #376]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003e7a:	f043 0301 	orr.w	r3, r3, #1
 8003e7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e80:	e00b      	b.n	8003e9a <HAL_RCC_OscConfig+0x376>
 8003e82:	4b5c      	ldr	r3, [pc, #368]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e86:	4a5b      	ldr	r2, [pc, #364]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003e88:	f023 0301 	bic.w	r3, r3, #1
 8003e8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e8e:	4b59      	ldr	r3, [pc, #356]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e92:	4a58      	ldr	r2, [pc, #352]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003e94:	f023 0304 	bic.w	r3, r3, #4
 8003e98:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d015      	beq.n	8003ece <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea2:	f7fd fd85 	bl	80019b0 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea8:	e00a      	b.n	8003ec0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eaa:	f7fd fd81 	bl	80019b0 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e0d8      	b.n	8004072 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec0:	4b4c      	ldr	r3, [pc, #304]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0ee      	beq.n	8003eaa <HAL_RCC_OscConfig+0x386>
 8003ecc:	e014      	b.n	8003ef8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ece:	f7fd fd6f 	bl	80019b0 <HAL_GetTick>
 8003ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed4:	e00a      	b.n	8003eec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ed6:	f7fd fd6b 	bl	80019b0 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e0c2      	b.n	8004072 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eec:	4b41      	ldr	r3, [pc, #260]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1ee      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ef8:	7dfb      	ldrb	r3, [r7, #23]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d105      	bne.n	8003f0a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003efe:	4b3d      	ldr	r3, [pc, #244]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f02:	4a3c      	ldr	r2, [pc, #240]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003f04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f08:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 80ae 	beq.w	8004070 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f14:	4b37      	ldr	r3, [pc, #220]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 030c 	and.w	r3, r3, #12
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d06d      	beq.n	8003ffc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d14b      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f28:	4b32      	ldr	r3, [pc, #200]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a31      	ldr	r2, [pc, #196]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003f2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f34:	f7fd fd3c 	bl	80019b0 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3c:	f7fd fd38 	bl	80019b0 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e091      	b.n	8004072 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4e:	4b29      	ldr	r3, [pc, #164]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69da      	ldr	r2, [r3, #28]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	019b      	lsls	r3, r3, #6
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f70:	085b      	lsrs	r3, r3, #1
 8003f72:	3b01      	subs	r3, #1
 8003f74:	041b      	lsls	r3, r3, #16
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7c:	061b      	lsls	r3, r3, #24
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f84:	071b      	lsls	r3, r3, #28
 8003f86:	491b      	ldr	r1, [pc, #108]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f8c:	4b19      	ldr	r3, [pc, #100]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a18      	ldr	r2, [pc, #96]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003f92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f98:	f7fd fd0a 	bl	80019b0 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa0:	f7fd fd06 	bl	80019b0 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e05f      	b.n	8004072 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb2:	4b10      	ldr	r3, [pc, #64]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f0      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x47c>
 8003fbe:	e057      	b.n	8004070 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a0b      	ldr	r2, [pc, #44]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003fc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fcc:	f7fd fcf0 	bl	80019b0 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd4:	f7fd fcec 	bl	80019b0 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e045      	b.n	8004072 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe6:	4b03      	ldr	r3, [pc, #12]	@ (8003ff4 <HAL_RCC_OscConfig+0x4d0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f0      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x4b0>
 8003ff2:	e03d      	b.n	8004070 <HAL_RCC_OscConfig+0x54c>
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800407c <HAL_RCC_OscConfig+0x558>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d030      	beq.n	800406c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004014:	429a      	cmp	r2, r3
 8004016:	d129      	bne.n	800406c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004022:	429a      	cmp	r2, r3
 8004024:	d122      	bne.n	800406c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800402c:	4013      	ands	r3, r2
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004032:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004034:	4293      	cmp	r3, r2
 8004036:	d119      	bne.n	800406c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004042:	085b      	lsrs	r3, r3, #1
 8004044:	3b01      	subs	r3, #1
 8004046:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004048:	429a      	cmp	r2, r3
 800404a:	d10f      	bne.n	800406c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004056:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004058:	429a      	cmp	r2, r3
 800405a:	d107      	bne.n	800406c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004066:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004068:	429a      	cmp	r2, r3
 800406a:	d001      	beq.n	8004070 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40023800 	.word	0x40023800

08004080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800408a:	2300      	movs	r3, #0
 800408c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0d0      	b.n	800423a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004098:	4b6a      	ldr	r3, [pc, #424]	@ (8004244 <HAL_RCC_ClockConfig+0x1c4>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d910      	bls.n	80040c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b67      	ldr	r3, [pc, #412]	@ (8004244 <HAL_RCC_ClockConfig+0x1c4>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f023 020f 	bic.w	r2, r3, #15
 80040ae:	4965      	ldr	r1, [pc, #404]	@ (8004244 <HAL_RCC_ClockConfig+0x1c4>)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b6:	4b63      	ldr	r3, [pc, #396]	@ (8004244 <HAL_RCC_ClockConfig+0x1c4>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d001      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0b8      	b.n	800423a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d020      	beq.n	8004116 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040e0:	4b59      	ldr	r3, [pc, #356]	@ (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	4a58      	ldr	r2, [pc, #352]	@ (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 80040e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040f8:	4b53      	ldr	r3, [pc, #332]	@ (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4a52      	ldr	r2, [pc, #328]	@ (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 80040fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004102:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004104:	4b50      	ldr	r3, [pc, #320]	@ (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	494d      	ldr	r1, [pc, #308]	@ (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 8004112:	4313      	orrs	r3, r2
 8004114:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d040      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d107      	bne.n	800413a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412a:	4b47      	ldr	r3, [pc, #284]	@ (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d115      	bne.n	8004162 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e07f      	b.n	800423a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d107      	bne.n	8004152 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004142:	4b41      	ldr	r3, [pc, #260]	@ (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e073      	b.n	800423a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004152:	4b3d      	ldr	r3, [pc, #244]	@ (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e06b      	b.n	800423a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004162:	4b39      	ldr	r3, [pc, #228]	@ (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f023 0203 	bic.w	r2, r3, #3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	4936      	ldr	r1, [pc, #216]	@ (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 8004170:	4313      	orrs	r3, r2
 8004172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004174:	f7fd fc1c 	bl	80019b0 <HAL_GetTick>
 8004178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417a:	e00a      	b.n	8004192 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800417c:	f7fd fc18 	bl	80019b0 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800418a:	4293      	cmp	r3, r2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e053      	b.n	800423a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004192:	4b2d      	ldr	r3, [pc, #180]	@ (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 020c 	and.w	r2, r3, #12
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d1eb      	bne.n	800417c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041a4:	4b27      	ldr	r3, [pc, #156]	@ (8004244 <HAL_RCC_ClockConfig+0x1c4>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d210      	bcs.n	80041d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b2:	4b24      	ldr	r3, [pc, #144]	@ (8004244 <HAL_RCC_ClockConfig+0x1c4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f023 020f 	bic.w	r2, r3, #15
 80041ba:	4922      	ldr	r1, [pc, #136]	@ (8004244 <HAL_RCC_ClockConfig+0x1c4>)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	4313      	orrs	r3, r2
 80041c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c2:	4b20      	ldr	r3, [pc, #128]	@ (8004244 <HAL_RCC_ClockConfig+0x1c4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e032      	b.n	800423a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041e0:	4b19      	ldr	r3, [pc, #100]	@ (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	4916      	ldr	r1, [pc, #88]	@ (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d009      	beq.n	8004212 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041fe:	4b12      	ldr	r3, [pc, #72]	@ (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	490e      	ldr	r1, [pc, #56]	@ (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 800420e:	4313      	orrs	r3, r2
 8004210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004212:	f000 f831 	bl	8004278 <HAL_RCC_GetSysClockFreq>
 8004216:	4602      	mov	r2, r0
 8004218:	4b0b      	ldr	r3, [pc, #44]	@ (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	091b      	lsrs	r3, r3, #4
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	490a      	ldr	r1, [pc, #40]	@ (800424c <HAL_RCC_ClockConfig+0x1cc>)
 8004224:	5ccb      	ldrb	r3, [r1, r3]
 8004226:	fa22 f303 	lsr.w	r3, r2, r3
 800422a:	4a09      	ldr	r2, [pc, #36]	@ (8004250 <HAL_RCC_ClockConfig+0x1d0>)
 800422c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800422e:	4b09      	ldr	r3, [pc, #36]	@ (8004254 <HAL_RCC_ClockConfig+0x1d4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f7fd f9dc 	bl	80015f0 <HAL_InitTick>

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40023c00 	.word	0x40023c00
 8004248:	40023800 	.word	0x40023800
 800424c:	0800e5c0 	.word	0x0800e5c0
 8004250:	20000000 	.word	0x20000000
 8004254:	20000004 	.word	0x20000004

08004258 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 800425c:	4b05      	ldr	r3, [pc, #20]	@ (8004274 <HAL_RCC_EnableCSS+0x1c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a04      	ldr	r2, [pc, #16]	@ (8004274 <HAL_RCC_EnableCSS+0x1c>)
 8004262:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004266:	6013      	str	r3, [r2, #0]
}
 8004268:	bf00      	nop
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40023800 	.word	0x40023800

08004278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800427c:	b094      	sub	sp, #80	@ 0x50
 800427e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004280:	2300      	movs	r3, #0
 8004282:	647b      	str	r3, [r7, #68]	@ 0x44
 8004284:	2300      	movs	r3, #0
 8004286:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004288:	2300      	movs	r3, #0
 800428a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800428c:	2300      	movs	r3, #0
 800428e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004290:	4b79      	ldr	r3, [pc, #484]	@ (8004478 <HAL_RCC_GetSysClockFreq+0x200>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f003 030c 	and.w	r3, r3, #12
 8004298:	2b08      	cmp	r3, #8
 800429a:	d00d      	beq.n	80042b8 <HAL_RCC_GetSysClockFreq+0x40>
 800429c:	2b08      	cmp	r3, #8
 800429e:	f200 80e1 	bhi.w	8004464 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <HAL_RCC_GetSysClockFreq+0x34>
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d003      	beq.n	80042b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80042aa:	e0db      	b.n	8004464 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042ac:	4b73      	ldr	r3, [pc, #460]	@ (800447c <HAL_RCC_GetSysClockFreq+0x204>)
 80042ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042b0:	e0db      	b.n	800446a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042b2:	4b73      	ldr	r3, [pc, #460]	@ (8004480 <HAL_RCC_GetSysClockFreq+0x208>)
 80042b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042b6:	e0d8      	b.n	800446a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042b8:	4b6f      	ldr	r3, [pc, #444]	@ (8004478 <HAL_RCC_GetSysClockFreq+0x200>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80042c2:	4b6d      	ldr	r3, [pc, #436]	@ (8004478 <HAL_RCC_GetSysClockFreq+0x200>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d063      	beq.n	8004396 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ce:	4b6a      	ldr	r3, [pc, #424]	@ (8004478 <HAL_RCC_GetSysClockFreq+0x200>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	099b      	lsrs	r3, r3, #6
 80042d4:	2200      	movs	r2, #0
 80042d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80042da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80042e2:	2300      	movs	r3, #0
 80042e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80042e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80042ea:	4622      	mov	r2, r4
 80042ec:	462b      	mov	r3, r5
 80042ee:	f04f 0000 	mov.w	r0, #0
 80042f2:	f04f 0100 	mov.w	r1, #0
 80042f6:	0159      	lsls	r1, r3, #5
 80042f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042fc:	0150      	lsls	r0, r2, #5
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	4621      	mov	r1, r4
 8004304:	1a51      	subs	r1, r2, r1
 8004306:	6139      	str	r1, [r7, #16]
 8004308:	4629      	mov	r1, r5
 800430a:	eb63 0301 	sbc.w	r3, r3, r1
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800431c:	4659      	mov	r1, fp
 800431e:	018b      	lsls	r3, r1, #6
 8004320:	4651      	mov	r1, sl
 8004322:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004326:	4651      	mov	r1, sl
 8004328:	018a      	lsls	r2, r1, #6
 800432a:	4651      	mov	r1, sl
 800432c:	ebb2 0801 	subs.w	r8, r2, r1
 8004330:	4659      	mov	r1, fp
 8004332:	eb63 0901 	sbc.w	r9, r3, r1
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004342:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004346:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800434a:	4690      	mov	r8, r2
 800434c:	4699      	mov	r9, r3
 800434e:	4623      	mov	r3, r4
 8004350:	eb18 0303 	adds.w	r3, r8, r3
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	462b      	mov	r3, r5
 8004358:	eb49 0303 	adc.w	r3, r9, r3
 800435c:	60fb      	str	r3, [r7, #12]
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	f04f 0300 	mov.w	r3, #0
 8004366:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800436a:	4629      	mov	r1, r5
 800436c:	024b      	lsls	r3, r1, #9
 800436e:	4621      	mov	r1, r4
 8004370:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004374:	4621      	mov	r1, r4
 8004376:	024a      	lsls	r2, r1, #9
 8004378:	4610      	mov	r0, r2
 800437a:	4619      	mov	r1, r3
 800437c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800437e:	2200      	movs	r2, #0
 8004380:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004382:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004384:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004388:	f7fc f96e 	bl	8000668 <__aeabi_uldivmod>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	4613      	mov	r3, r2
 8004392:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004394:	e058      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004396:	4b38      	ldr	r3, [pc, #224]	@ (8004478 <HAL_RCC_GetSysClockFreq+0x200>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	099b      	lsrs	r3, r3, #6
 800439c:	2200      	movs	r2, #0
 800439e:	4618      	mov	r0, r3
 80043a0:	4611      	mov	r1, r2
 80043a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043a6:	623b      	str	r3, [r7, #32]
 80043a8:	2300      	movs	r3, #0
 80043aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043b0:	4642      	mov	r2, r8
 80043b2:	464b      	mov	r3, r9
 80043b4:	f04f 0000 	mov.w	r0, #0
 80043b8:	f04f 0100 	mov.w	r1, #0
 80043bc:	0159      	lsls	r1, r3, #5
 80043be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043c2:	0150      	lsls	r0, r2, #5
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4641      	mov	r1, r8
 80043ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80043ce:	4649      	mov	r1, r9
 80043d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043e8:	ebb2 040a 	subs.w	r4, r2, sl
 80043ec:	eb63 050b 	sbc.w	r5, r3, fp
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	00eb      	lsls	r3, r5, #3
 80043fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043fe:	00e2      	lsls	r2, r4, #3
 8004400:	4614      	mov	r4, r2
 8004402:	461d      	mov	r5, r3
 8004404:	4643      	mov	r3, r8
 8004406:	18e3      	adds	r3, r4, r3
 8004408:	603b      	str	r3, [r7, #0]
 800440a:	464b      	mov	r3, r9
 800440c:	eb45 0303 	adc.w	r3, r5, r3
 8004410:	607b      	str	r3, [r7, #4]
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800441e:	4629      	mov	r1, r5
 8004420:	028b      	lsls	r3, r1, #10
 8004422:	4621      	mov	r1, r4
 8004424:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004428:	4621      	mov	r1, r4
 800442a:	028a      	lsls	r2, r1, #10
 800442c:	4610      	mov	r0, r2
 800442e:	4619      	mov	r1, r3
 8004430:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004432:	2200      	movs	r2, #0
 8004434:	61bb      	str	r3, [r7, #24]
 8004436:	61fa      	str	r2, [r7, #28]
 8004438:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800443c:	f7fc f914 	bl	8000668 <__aeabi_uldivmod>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	4613      	mov	r3, r2
 8004446:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004448:	4b0b      	ldr	r3, [pc, #44]	@ (8004478 <HAL_RCC_GetSysClockFreq+0x200>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	0c1b      	lsrs	r3, r3, #16
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	3301      	adds	r3, #1
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004458:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800445a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800445c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004460:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004462:	e002      	b.n	800446a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004464:	4b05      	ldr	r3, [pc, #20]	@ (800447c <HAL_RCC_GetSysClockFreq+0x204>)
 8004466:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004468:	bf00      	nop
    }
  }
  return sysclockfreq;
 800446a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800446c:	4618      	mov	r0, r3
 800446e:	3750      	adds	r7, #80	@ 0x50
 8004470:	46bd      	mov	sp, r7
 8004472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004476:	bf00      	nop
 8004478:	40023800 	.word	0x40023800
 800447c:	00f42400 	.word	0x00f42400
 8004480:	007a1200 	.word	0x007a1200

08004484 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004488:	4b03      	ldr	r3, [pc, #12]	@ (8004498 <HAL_RCC_GetHCLKFreq+0x14>)
 800448a:	681b      	ldr	r3, [r3, #0]
}
 800448c:	4618      	mov	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	20000000 	.word	0x20000000

0800449c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044a0:	f7ff fff0 	bl	8004484 <HAL_RCC_GetHCLKFreq>
 80044a4:	4602      	mov	r2, r0
 80044a6:	4b05      	ldr	r3, [pc, #20]	@ (80044bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	0a9b      	lsrs	r3, r3, #10
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	4903      	ldr	r1, [pc, #12]	@ (80044c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044b2:	5ccb      	ldrb	r3, [r1, r3]
 80044b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40023800 	.word	0x40023800
 80044c0:	0800e5d0 	.word	0x0800e5d0

080044c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044c8:	f7ff ffdc 	bl	8004484 <HAL_RCC_GetHCLKFreq>
 80044cc:	4602      	mov	r2, r0
 80044ce:	4b05      	ldr	r3, [pc, #20]	@ (80044e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	0b5b      	lsrs	r3, r3, #13
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	4903      	ldr	r1, [pc, #12]	@ (80044e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044da:	5ccb      	ldrb	r3, [r1, r3]
 80044dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40023800 	.word	0x40023800
 80044e8:	0800e5d0 	.word	0x0800e5d0

080044ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	220f      	movs	r2, #15
 80044fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80044fc:	4b12      	ldr	r3, [pc, #72]	@ (8004548 <HAL_RCC_GetClockConfig+0x5c>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 0203 	and.w	r2, r3, #3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004508:	4b0f      	ldr	r3, [pc, #60]	@ (8004548 <HAL_RCC_GetClockConfig+0x5c>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004514:	4b0c      	ldr	r3, [pc, #48]	@ (8004548 <HAL_RCC_GetClockConfig+0x5c>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004520:	4b09      	ldr	r3, [pc, #36]	@ (8004548 <HAL_RCC_GetClockConfig+0x5c>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	08db      	lsrs	r3, r3, #3
 8004526:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800452e:	4b07      	ldr	r3, [pc, #28]	@ (800454c <HAL_RCC_GetClockConfig+0x60>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 020f 	and.w	r2, r3, #15
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	601a      	str	r2, [r3, #0]
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40023800 	.word	0x40023800
 800454c:	40023c00 	.word	0x40023c00

08004550 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004554:	4b06      	ldr	r3, [pc, #24]	@ (8004570 <HAL_RCC_NMI_IRQHandler+0x20>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800455c:	2b80      	cmp	r3, #128	@ 0x80
 800455e:	d104      	bne.n	800456a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004560:	f000 f80a 	bl	8004578 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004564:	4b03      	ldr	r3, [pc, #12]	@ (8004574 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004566:	2280      	movs	r2, #128	@ 0x80
 8004568:	701a      	strb	r2, [r3, #0]
  }
}
 800456a:	bf00      	nop
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40023800 	.word	0x40023800
 8004574:	4002380e 	.word	0x4002380e

08004578 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800457c:	bf00      	nop
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
	...

08004588 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b088      	sub	sp, #32
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004594:	2300      	movs	r3, #0
 8004596:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800459c:	2300      	movs	r3, #0
 800459e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80045a0:	2300      	movs	r3, #0
 80045a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d012      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045b0:	4b69      	ldr	r3, [pc, #420]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	4a68      	ldr	r2, [pc, #416]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80045ba:	6093      	str	r3, [r2, #8]
 80045bc:	4b66      	ldr	r3, [pc, #408]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c4:	4964      	ldr	r1, [pc, #400]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80045d2:	2301      	movs	r3, #1
 80045d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d017      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045e2:	4b5d      	ldr	r3, [pc, #372]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045e8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f0:	4959      	ldr	r1, [pc, #356]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004600:	d101      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004602:	2301      	movs	r3, #1
 8004604:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800460e:	2301      	movs	r3, #1
 8004610:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d017      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800461e:	4b4e      	ldr	r3, [pc, #312]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004620:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004624:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462c:	494a      	ldr	r1, [pc, #296]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004638:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800463c:	d101      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800463e:	2301      	movs	r3, #1
 8004640:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800464a:	2301      	movs	r3, #1
 800464c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800465a:	2301      	movs	r3, #1
 800465c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 808b 	beq.w	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800466c:	4b3a      	ldr	r3, [pc, #232]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800466e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004670:	4a39      	ldr	r2, [pc, #228]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004676:	6413      	str	r3, [r2, #64]	@ 0x40
 8004678:	4b37      	ldr	r3, [pc, #220]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004680:	60bb      	str	r3, [r7, #8]
 8004682:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004684:	4b35      	ldr	r3, [pc, #212]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a34      	ldr	r2, [pc, #208]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800468a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800468e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004690:	f7fd f98e 	bl	80019b0 <HAL_GetTick>
 8004694:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004698:	f7fd f98a 	bl	80019b0 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b64      	cmp	r3, #100	@ 0x64
 80046a4:	d901      	bls.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e38f      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046aa:	4b2c      	ldr	r3, [pc, #176]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0f0      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046b6:	4b28      	ldr	r3, [pc, #160]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d035      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d02e      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046d4:	4b20      	ldr	r3, [pc, #128]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046de:	4b1e      	ldr	r3, [pc, #120]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046e8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046f4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80046f6:	4a18      	ldr	r2, [pc, #96]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046fc:	4b16      	ldr	r3, [pc, #88]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b01      	cmp	r3, #1
 8004706:	d114      	bne.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004708:	f7fd f952 	bl	80019b0 <HAL_GetTick>
 800470c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800470e:	e00a      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004710:	f7fd f94e 	bl	80019b0 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800471e:	4293      	cmp	r3, r2
 8004720:	d901      	bls.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e351      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004726:	4b0c      	ldr	r3, [pc, #48]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0ee      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004736:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800473a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800473e:	d111      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004740:	4b05      	ldr	r3, [pc, #20]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800474c:	4b04      	ldr	r3, [pc, #16]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800474e:	400b      	ands	r3, r1
 8004750:	4901      	ldr	r1, [pc, #4]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004752:	4313      	orrs	r3, r2
 8004754:	608b      	str	r3, [r1, #8]
 8004756:	e00b      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004758:	40023800 	.word	0x40023800
 800475c:	40007000 	.word	0x40007000
 8004760:	0ffffcff 	.word	0x0ffffcff
 8004764:	4bac      	ldr	r3, [pc, #688]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	4aab      	ldr	r2, [pc, #684]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800476a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800476e:	6093      	str	r3, [r2, #8]
 8004770:	4ba9      	ldr	r3, [pc, #676]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004772:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800477c:	49a6      	ldr	r1, [pc, #664]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800477e:	4313      	orrs	r3, r2
 8004780:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	2b00      	cmp	r3, #0
 800478c:	d010      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800478e:	4ba2      	ldr	r3, [pc, #648]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004790:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004794:	4aa0      	ldr	r2, [pc, #640]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004796:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800479a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800479e:	4b9e      	ldr	r3, [pc, #632]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a8:	499b      	ldr	r1, [pc, #620]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047bc:	4b96      	ldr	r3, [pc, #600]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047ca:	4993      	ldr	r1, [pc, #588]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047de:	4b8e      	ldr	r3, [pc, #568]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047ec:	498a      	ldr	r1, [pc, #552]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004800:	4b85      	ldr	r3, [pc, #532]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004806:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800480e:	4982      	ldr	r1, [pc, #520]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004822:	4b7d      	ldr	r3, [pc, #500]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004828:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004830:	4979      	ldr	r1, [pc, #484]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004844:	4b74      	ldr	r3, [pc, #464]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800484a:	f023 0203 	bic.w	r2, r3, #3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004852:	4971      	ldr	r1, [pc, #452]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004866:	4b6c      	ldr	r3, [pc, #432]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800486c:	f023 020c 	bic.w	r2, r3, #12
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004874:	4968      	ldr	r1, [pc, #416]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004888:	4b63      	ldr	r3, [pc, #396]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800488a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800488e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004896:	4960      	ldr	r1, [pc, #384]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004898:	4313      	orrs	r3, r2
 800489a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048b8:	4957      	ldr	r1, [pc, #348]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048cc:	4b52      	ldr	r3, [pc, #328]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048da:	494f      	ldr	r1, [pc, #316]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80048ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fc:	4946      	ldr	r1, [pc, #280]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004910:	4b41      	ldr	r3, [pc, #260]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004916:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800491e:	493e      	ldr	r1, [pc, #248]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004932:	4b39      	ldr	r3, [pc, #228]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004938:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004940:	4935      	ldr	r1, [pc, #212]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00a      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004954:	4b30      	ldr	r3, [pc, #192]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800495a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004962:	492d      	ldr	r1, [pc, #180]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d011      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004976:	4b28      	ldr	r3, [pc, #160]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800497c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004984:	4924      	ldr	r1, [pc, #144]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004990:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004994:	d101      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004996:	2301      	movs	r3, #1
 8004998:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0308 	and.w	r3, r3, #8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80049a6:	2301      	movs	r3, #1
 80049a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049b6:	4b18      	ldr	r3, [pc, #96]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049bc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049c4:	4914      	ldr	r1, [pc, #80]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00b      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049de:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049e8:	490b      	ldr	r1, [pc, #44]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00f      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80049fc:	4b06      	ldr	r3, [pc, #24]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a02:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a0c:	4902      	ldr	r1, [pc, #8]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a14:	e002      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004a16:	bf00      	nop
 8004a18:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00b      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a28:	4b8a      	ldr	r3, [pc, #552]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a2e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a38:	4986      	ldr	r1, [pc, #536]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00b      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a4c:	4b81      	ldr	r3, [pc, #516]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a52:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a5c:	497d      	ldr	r1, [pc, #500]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d006      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 80d6 	beq.w	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a78:	4b76      	ldr	r3, [pc, #472]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a75      	ldr	r2, [pc, #468]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a84:	f7fc ff94 	bl	80019b0 <HAL_GetTick>
 8004a88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a8c:	f7fc ff90 	bl	80019b0 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b64      	cmp	r3, #100	@ 0x64
 8004a98:	d901      	bls.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e195      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a9e:	4b6d      	ldr	r3, [pc, #436]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f0      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d021      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d11d      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004abe:	4b65      	ldr	r3, [pc, #404]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ac4:	0c1b      	lsrs	r3, r3, #16
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004acc:	4b61      	ldr	r3, [pc, #388]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ad2:	0e1b      	lsrs	r3, r3, #24
 8004ad4:	f003 030f 	and.w	r3, r3, #15
 8004ad8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	019a      	lsls	r2, r3, #6
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	041b      	lsls	r3, r3, #16
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	061b      	lsls	r3, r3, #24
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	071b      	lsls	r3, r3, #28
 8004af2:	4958      	ldr	r1, [pc, #352]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d004      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b0e:	d00a      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d02e      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b24:	d129      	bne.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b26:	4b4b      	ldr	r3, [pc, #300]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b2c:	0c1b      	lsrs	r3, r3, #16
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b34:	4b47      	ldr	r3, [pc, #284]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b3a:	0f1b      	lsrs	r3, r3, #28
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	019a      	lsls	r2, r3, #6
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	041b      	lsls	r3, r3, #16
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	061b      	lsls	r3, r3, #24
 8004b54:	431a      	orrs	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	071b      	lsls	r3, r3, #28
 8004b5a:	493e      	ldr	r1, [pc, #248]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b62:	4b3c      	ldr	r3, [pc, #240]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b68:	f023 021f 	bic.w	r2, r3, #31
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b70:	3b01      	subs	r3, #1
 8004b72:	4938      	ldr	r1, [pc, #224]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d01d      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b86:	4b33      	ldr	r3, [pc, #204]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b8c:	0e1b      	lsrs	r3, r3, #24
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b94:	4b2f      	ldr	r3, [pc, #188]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b9a:	0f1b      	lsrs	r3, r3, #28
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	019a      	lsls	r2, r3, #6
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	041b      	lsls	r3, r3, #16
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	061b      	lsls	r3, r3, #24
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	071b      	lsls	r3, r3, #28
 8004bba:	4926      	ldr	r1, [pc, #152]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d011      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	019a      	lsls	r2, r3, #6
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	041b      	lsls	r3, r3, #16
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	061b      	lsls	r3, r3, #24
 8004be2:	431a      	orrs	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	071b      	lsls	r3, r3, #28
 8004bea:	491a      	ldr	r1, [pc, #104]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bf2:	4b18      	ldr	r3, [pc, #96]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a17      	ldr	r2, [pc, #92]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bfe:	f7fc fed7 	bl	80019b0 <HAL_GetTick>
 8004c02:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c04:	e008      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c06:	f7fc fed3 	bl	80019b0 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b64      	cmp	r3, #100	@ 0x64
 8004c12:	d901      	bls.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e0d8      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c18:	4b0e      	ldr	r3, [pc, #56]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0f0      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	f040 80ce 	bne.w	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c2c:	4b09      	ldr	r3, [pc, #36]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a08      	ldr	r2, [pc, #32]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c38:	f7fc feba 	bl	80019b0 <HAL_GetTick>
 8004c3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c3e:	e00b      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c40:	f7fc feb6 	bl	80019b0 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b64      	cmp	r3, #100	@ 0x64
 8004c4c:	d904      	bls.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e0bb      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004c52:	bf00      	nop
 8004c54:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c58:	4b5e      	ldr	r3, [pc, #376]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c64:	d0ec      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d009      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d02e      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d12a      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c8e:	4b51      	ldr	r3, [pc, #324]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c94:	0c1b      	lsrs	r3, r3, #16
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c9c:	4b4d      	ldr	r3, [pc, #308]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ca2:	0f1b      	lsrs	r3, r3, #28
 8004ca4:	f003 0307 	and.w	r3, r3, #7
 8004ca8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	019a      	lsls	r2, r3, #6
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	041b      	lsls	r3, r3, #16
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	061b      	lsls	r3, r3, #24
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	071b      	lsls	r3, r3, #28
 8004cc2:	4944      	ldr	r1, [pc, #272]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004cca:	4b42      	ldr	r3, [pc, #264]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cd0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	021b      	lsls	r3, r3, #8
 8004cdc:	493d      	ldr	r1, [pc, #244]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d022      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cf8:	d11d      	bne.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cfa:	4b36      	ldr	r3, [pc, #216]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d00:	0e1b      	lsrs	r3, r3, #24
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d08:	4b32      	ldr	r3, [pc, #200]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d0e:	0f1b      	lsrs	r3, r3, #28
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	019a      	lsls	r2, r3, #6
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	041b      	lsls	r3, r3, #16
 8004d22:	431a      	orrs	r2, r3
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	061b      	lsls	r3, r3, #24
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	071b      	lsls	r3, r3, #28
 8004d2e:	4929      	ldr	r1, [pc, #164]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d028      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d42:	4b24      	ldr	r3, [pc, #144]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d48:	0e1b      	lsrs	r3, r3, #24
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d50:	4b20      	ldr	r3, [pc, #128]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d56:	0c1b      	lsrs	r3, r3, #16
 8004d58:	f003 0303 	and.w	r3, r3, #3
 8004d5c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	019a      	lsls	r2, r3, #6
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	041b      	lsls	r3, r3, #16
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	061b      	lsls	r3, r3, #24
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	071b      	lsls	r3, r3, #28
 8004d76:	4917      	ldr	r1, [pc, #92]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d7e:	4b15      	ldr	r3, [pc, #84]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8c:	4911      	ldr	r1, [pc, #68]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d94:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a0e      	ldr	r2, [pc, #56]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da0:	f7fc fe06 	bl	80019b0 <HAL_GetTick>
 8004da4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004da6:	e008      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004da8:	f7fc fe02 	bl	80019b0 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b64      	cmp	r3, #100	@ 0x64
 8004db4:	d901      	bls.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e007      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004dba:	4b06      	ldr	r3, [pc, #24]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dc6:	d1ef      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3720      	adds	r7, #32
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40023800 	.word	0x40023800

08004dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e049      	b.n	8004e7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f841 	bl	8004e86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3304      	adds	r3, #4
 8004e14:	4619      	mov	r1, r3
 8004e16:	4610      	mov	r0, r2
 8004e18:	f000 f9e8 	bl	80051ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b083      	sub	sp, #12
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
	...

08004e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d001      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e054      	b.n	8004f5e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0201 	orr.w	r2, r2, #1
 8004eca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a26      	ldr	r2, [pc, #152]	@ (8004f6c <HAL_TIM_Base_Start_IT+0xd0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d022      	beq.n	8004f1c <HAL_TIM_Base_Start_IT+0x80>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ede:	d01d      	beq.n	8004f1c <HAL_TIM_Base_Start_IT+0x80>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a22      	ldr	r2, [pc, #136]	@ (8004f70 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d018      	beq.n	8004f1c <HAL_TIM_Base_Start_IT+0x80>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a21      	ldr	r2, [pc, #132]	@ (8004f74 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d013      	beq.n	8004f1c <HAL_TIM_Base_Start_IT+0x80>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8004f78 <HAL_TIM_Base_Start_IT+0xdc>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00e      	beq.n	8004f1c <HAL_TIM_Base_Start_IT+0x80>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a1e      	ldr	r2, [pc, #120]	@ (8004f7c <HAL_TIM_Base_Start_IT+0xe0>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d009      	beq.n	8004f1c <HAL_TIM_Base_Start_IT+0x80>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a1c      	ldr	r2, [pc, #112]	@ (8004f80 <HAL_TIM_Base_Start_IT+0xe4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d004      	beq.n	8004f1c <HAL_TIM_Base_Start_IT+0x80>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a1b      	ldr	r2, [pc, #108]	@ (8004f84 <HAL_TIM_Base_Start_IT+0xe8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d115      	bne.n	8004f48 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689a      	ldr	r2, [r3, #8]
 8004f22:	4b19      	ldr	r3, [pc, #100]	@ (8004f88 <HAL_TIM_Base_Start_IT+0xec>)
 8004f24:	4013      	ands	r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b06      	cmp	r3, #6
 8004f2c:	d015      	beq.n	8004f5a <HAL_TIM_Base_Start_IT+0xbe>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f34:	d011      	beq.n	8004f5a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f042 0201 	orr.w	r2, r2, #1
 8004f44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f46:	e008      	b.n	8004f5a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0201 	orr.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	e000      	b.n	8004f5c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	40010000 	.word	0x40010000
 8004f70:	40000400 	.word	0x40000400
 8004f74:	40000800 	.word	0x40000800
 8004f78:	40000c00 	.word	0x40000c00
 8004f7c:	40010400 	.word	0x40010400
 8004f80:	40014000 	.word	0x40014000
 8004f84:	40001800 	.word	0x40001800
 8004f88:	00010007 	.word	0x00010007

08004f8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d020      	beq.n	8004ff0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d01b      	beq.n	8004ff0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f06f 0202 	mvn.w	r2, #2
 8004fc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f8e9 	bl	80051ae <HAL_TIM_IC_CaptureCallback>
 8004fdc:	e005      	b.n	8004fea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f8db 	bl	800519a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f8ec 	bl	80051c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f003 0304 	and.w	r3, r3, #4
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d020      	beq.n	800503c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01b      	beq.n	800503c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f06f 0204 	mvn.w	r2, #4
 800500c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2202      	movs	r2, #2
 8005012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f8c3 	bl	80051ae <HAL_TIM_IC_CaptureCallback>
 8005028:	e005      	b.n	8005036 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f8b5 	bl	800519a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f8c6 	bl	80051c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f003 0308 	and.w	r3, r3, #8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d020      	beq.n	8005088 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01b      	beq.n	8005088 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f06f 0208 	mvn.w	r2, #8
 8005058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2204      	movs	r2, #4
 800505e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f89d 	bl	80051ae <HAL_TIM_IC_CaptureCallback>
 8005074:	e005      	b.n	8005082 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f88f 	bl	800519a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f8a0 	bl	80051c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f003 0310 	and.w	r3, r3, #16
 800508e:	2b00      	cmp	r3, #0
 8005090:	d020      	beq.n	80050d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f003 0310 	and.w	r3, r3, #16
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01b      	beq.n	80050d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f06f 0210 	mvn.w	r2, #16
 80050a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2208      	movs	r2, #8
 80050aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f877 	bl	80051ae <HAL_TIM_IC_CaptureCallback>
 80050c0:	e005      	b.n	80050ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f869 	bl	800519a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f87a 	bl	80051c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00c      	beq.n	80050f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d007      	beq.n	80050f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f06f 0201 	mvn.w	r2, #1
 80050f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fc f830 	bl	8001158 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d104      	bne.n	800510c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00c      	beq.n	8005126 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005112:	2b00      	cmp	r3, #0
 8005114:	d007      	beq.n	8005126 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800511e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f913 	bl	800534c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00c      	beq.n	800514a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005136:	2b00      	cmp	r3, #0
 8005138:	d007      	beq.n	800514a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f90b 	bl	8005360 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00c      	beq.n	800516e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800515a:	2b00      	cmp	r3, #0
 800515c:	d007      	beq.n	800516e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f834 	bl	80051d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	f003 0320 	and.w	r3, r3, #32
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00c      	beq.n	8005192 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f003 0320 	and.w	r3, r3, #32
 800517e:	2b00      	cmp	r3, #0
 8005180:	d007      	beq.n	8005192 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f06f 0220 	mvn.w	r2, #32
 800518a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f8d3 	bl	8005338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005192:	bf00      	nop
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
	...

080051ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a43      	ldr	r2, [pc, #268]	@ (800530c <TIM_Base_SetConfig+0x120>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d013      	beq.n	800522c <TIM_Base_SetConfig+0x40>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800520a:	d00f      	beq.n	800522c <TIM_Base_SetConfig+0x40>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a40      	ldr	r2, [pc, #256]	@ (8005310 <TIM_Base_SetConfig+0x124>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d00b      	beq.n	800522c <TIM_Base_SetConfig+0x40>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a3f      	ldr	r2, [pc, #252]	@ (8005314 <TIM_Base_SetConfig+0x128>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d007      	beq.n	800522c <TIM_Base_SetConfig+0x40>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a3e      	ldr	r2, [pc, #248]	@ (8005318 <TIM_Base_SetConfig+0x12c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d003      	beq.n	800522c <TIM_Base_SetConfig+0x40>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a3d      	ldr	r2, [pc, #244]	@ (800531c <TIM_Base_SetConfig+0x130>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d108      	bne.n	800523e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a32      	ldr	r2, [pc, #200]	@ (800530c <TIM_Base_SetConfig+0x120>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d02b      	beq.n	800529e <TIM_Base_SetConfig+0xb2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800524c:	d027      	beq.n	800529e <TIM_Base_SetConfig+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a2f      	ldr	r2, [pc, #188]	@ (8005310 <TIM_Base_SetConfig+0x124>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d023      	beq.n	800529e <TIM_Base_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a2e      	ldr	r2, [pc, #184]	@ (8005314 <TIM_Base_SetConfig+0x128>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d01f      	beq.n	800529e <TIM_Base_SetConfig+0xb2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a2d      	ldr	r2, [pc, #180]	@ (8005318 <TIM_Base_SetConfig+0x12c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d01b      	beq.n	800529e <TIM_Base_SetConfig+0xb2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a2c      	ldr	r2, [pc, #176]	@ (800531c <TIM_Base_SetConfig+0x130>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d017      	beq.n	800529e <TIM_Base_SetConfig+0xb2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a2b      	ldr	r2, [pc, #172]	@ (8005320 <TIM_Base_SetConfig+0x134>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d013      	beq.n	800529e <TIM_Base_SetConfig+0xb2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a2a      	ldr	r2, [pc, #168]	@ (8005324 <TIM_Base_SetConfig+0x138>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d00f      	beq.n	800529e <TIM_Base_SetConfig+0xb2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a29      	ldr	r2, [pc, #164]	@ (8005328 <TIM_Base_SetConfig+0x13c>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d00b      	beq.n	800529e <TIM_Base_SetConfig+0xb2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a28      	ldr	r2, [pc, #160]	@ (800532c <TIM_Base_SetConfig+0x140>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d007      	beq.n	800529e <TIM_Base_SetConfig+0xb2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a27      	ldr	r2, [pc, #156]	@ (8005330 <TIM_Base_SetConfig+0x144>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d003      	beq.n	800529e <TIM_Base_SetConfig+0xb2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a26      	ldr	r2, [pc, #152]	@ (8005334 <TIM_Base_SetConfig+0x148>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d108      	bne.n	80052b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	689a      	ldr	r2, [r3, #8]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a0e      	ldr	r2, [pc, #56]	@ (800530c <TIM_Base_SetConfig+0x120>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d003      	beq.n	80052de <TIM_Base_SetConfig+0xf2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a10      	ldr	r2, [pc, #64]	@ (800531c <TIM_Base_SetConfig+0x130>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d103      	bne.n	80052e6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	691a      	ldr	r2, [r3, #16]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f043 0204 	orr.w	r2, r3, #4
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	601a      	str	r2, [r3, #0]
}
 80052fe:	bf00      	nop
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40010000 	.word	0x40010000
 8005310:	40000400 	.word	0x40000400
 8005314:	40000800 	.word	0x40000800
 8005318:	40000c00 	.word	0x40000c00
 800531c:	40010400 	.word	0x40010400
 8005320:	40014000 	.word	0x40014000
 8005324:	40014400 	.word	0x40014400
 8005328:	40014800 	.word	0x40014800
 800532c:	40001800 	.word	0x40001800
 8005330:	40001c00 	.word	0x40001c00
 8005334:	40002000 	.word	0x40002000

08005338 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e040      	b.n	8005408 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800538a:	2b00      	cmp	r3, #0
 800538c:	d106      	bne.n	800539c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7fc f850 	bl	800143c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2224      	movs	r2, #36	@ 0x24
 80053a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 0201 	bic.w	r2, r2, #1
 80053b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d002      	beq.n	80053c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fb16 	bl	80059ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f8af 	bl	8005524 <UART_SetConfig>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e01b      	b.n	8005408 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689a      	ldr	r2, [r3, #8]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0201 	orr.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 fb95 	bl	8005b30 <UART_CheckIdleState>
 8005406:	4603      	mov	r3, r0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08a      	sub	sp, #40	@ 0x28
 8005414:	af02      	add	r7, sp, #8
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	603b      	str	r3, [r7, #0]
 800541c:	4613      	mov	r3, r2
 800541e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005424:	2b20      	cmp	r3, #32
 8005426:	d177      	bne.n	8005518 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <HAL_UART_Transmit+0x24>
 800542e:	88fb      	ldrh	r3, [r7, #6]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e070      	b.n	800551a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2221      	movs	r2, #33	@ 0x21
 8005444:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005446:	f7fc fab3 	bl	80019b0 <HAL_GetTick>
 800544a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	88fa      	ldrh	r2, [r7, #6]
 8005450:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	88fa      	ldrh	r2, [r7, #6]
 8005458:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005464:	d108      	bne.n	8005478 <HAL_UART_Transmit+0x68>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d104      	bne.n	8005478 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800546e:	2300      	movs	r3, #0
 8005470:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	61bb      	str	r3, [r7, #24]
 8005476:	e003      	b.n	8005480 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800547c:	2300      	movs	r3, #0
 800547e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005480:	e02f      	b.n	80054e2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2200      	movs	r2, #0
 800548a:	2180      	movs	r1, #128	@ 0x80
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 fbf7 	bl	8005c80 <UART_WaitOnFlagUntilTimeout>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d004      	beq.n	80054a2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2220      	movs	r2, #32
 800549c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e03b      	b.n	800551a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10b      	bne.n	80054c0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	461a      	mov	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	3302      	adds	r3, #2
 80054bc:	61bb      	str	r3, [r7, #24]
 80054be:	e007      	b.n	80054d0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	781a      	ldrb	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	3301      	adds	r3, #1
 80054ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	3b01      	subs	r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1c9      	bne.n	8005482 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2200      	movs	r2, #0
 80054f6:	2140      	movs	r1, #64	@ 0x40
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 fbc1 	bl	8005c80 <UART_WaitOnFlagUntilTimeout>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d004      	beq.n	800550e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2220      	movs	r2, #32
 8005508:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e005      	b.n	800551a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2220      	movs	r2, #32
 8005512:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	e000      	b.n	800551a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005518:	2302      	movs	r3, #2
  }
}
 800551a:	4618      	mov	r0, r3
 800551c:	3720      	adds	r7, #32
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800552c:	2300      	movs	r3, #0
 800552e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	431a      	orrs	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	431a      	orrs	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	4ba6      	ldr	r3, [pc, #664]	@ (80057e8 <UART_SetConfig+0x2c4>)
 8005550:	4013      	ands	r3, r2
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6812      	ldr	r2, [r2, #0]
 8005556:	6979      	ldr	r1, [r7, #20]
 8005558:	430b      	orrs	r3, r1
 800555a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	4313      	orrs	r3, r2
 8005580:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	430a      	orrs	r2, r1
 8005594:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a94      	ldr	r2, [pc, #592]	@ (80057ec <UART_SetConfig+0x2c8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d120      	bne.n	80055e2 <UART_SetConfig+0xbe>
 80055a0:	4b93      	ldr	r3, [pc, #588]	@ (80057f0 <UART_SetConfig+0x2cc>)
 80055a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a6:	f003 0303 	and.w	r3, r3, #3
 80055aa:	2b03      	cmp	r3, #3
 80055ac:	d816      	bhi.n	80055dc <UART_SetConfig+0xb8>
 80055ae:	a201      	add	r2, pc, #4	@ (adr r2, 80055b4 <UART_SetConfig+0x90>)
 80055b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b4:	080055c5 	.word	0x080055c5
 80055b8:	080055d1 	.word	0x080055d1
 80055bc:	080055cb 	.word	0x080055cb
 80055c0:	080055d7 	.word	0x080055d7
 80055c4:	2301      	movs	r3, #1
 80055c6:	77fb      	strb	r3, [r7, #31]
 80055c8:	e150      	b.n	800586c <UART_SetConfig+0x348>
 80055ca:	2302      	movs	r3, #2
 80055cc:	77fb      	strb	r3, [r7, #31]
 80055ce:	e14d      	b.n	800586c <UART_SetConfig+0x348>
 80055d0:	2304      	movs	r3, #4
 80055d2:	77fb      	strb	r3, [r7, #31]
 80055d4:	e14a      	b.n	800586c <UART_SetConfig+0x348>
 80055d6:	2308      	movs	r3, #8
 80055d8:	77fb      	strb	r3, [r7, #31]
 80055da:	e147      	b.n	800586c <UART_SetConfig+0x348>
 80055dc:	2310      	movs	r3, #16
 80055de:	77fb      	strb	r3, [r7, #31]
 80055e0:	e144      	b.n	800586c <UART_SetConfig+0x348>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a83      	ldr	r2, [pc, #524]	@ (80057f4 <UART_SetConfig+0x2d0>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d132      	bne.n	8005652 <UART_SetConfig+0x12e>
 80055ec:	4b80      	ldr	r3, [pc, #512]	@ (80057f0 <UART_SetConfig+0x2cc>)
 80055ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f2:	f003 030c 	and.w	r3, r3, #12
 80055f6:	2b0c      	cmp	r3, #12
 80055f8:	d828      	bhi.n	800564c <UART_SetConfig+0x128>
 80055fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005600 <UART_SetConfig+0xdc>)
 80055fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005600:	08005635 	.word	0x08005635
 8005604:	0800564d 	.word	0x0800564d
 8005608:	0800564d 	.word	0x0800564d
 800560c:	0800564d 	.word	0x0800564d
 8005610:	08005641 	.word	0x08005641
 8005614:	0800564d 	.word	0x0800564d
 8005618:	0800564d 	.word	0x0800564d
 800561c:	0800564d 	.word	0x0800564d
 8005620:	0800563b 	.word	0x0800563b
 8005624:	0800564d 	.word	0x0800564d
 8005628:	0800564d 	.word	0x0800564d
 800562c:	0800564d 	.word	0x0800564d
 8005630:	08005647 	.word	0x08005647
 8005634:	2300      	movs	r3, #0
 8005636:	77fb      	strb	r3, [r7, #31]
 8005638:	e118      	b.n	800586c <UART_SetConfig+0x348>
 800563a:	2302      	movs	r3, #2
 800563c:	77fb      	strb	r3, [r7, #31]
 800563e:	e115      	b.n	800586c <UART_SetConfig+0x348>
 8005640:	2304      	movs	r3, #4
 8005642:	77fb      	strb	r3, [r7, #31]
 8005644:	e112      	b.n	800586c <UART_SetConfig+0x348>
 8005646:	2308      	movs	r3, #8
 8005648:	77fb      	strb	r3, [r7, #31]
 800564a:	e10f      	b.n	800586c <UART_SetConfig+0x348>
 800564c:	2310      	movs	r3, #16
 800564e:	77fb      	strb	r3, [r7, #31]
 8005650:	e10c      	b.n	800586c <UART_SetConfig+0x348>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a68      	ldr	r2, [pc, #416]	@ (80057f8 <UART_SetConfig+0x2d4>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d120      	bne.n	800569e <UART_SetConfig+0x17a>
 800565c:	4b64      	ldr	r3, [pc, #400]	@ (80057f0 <UART_SetConfig+0x2cc>)
 800565e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005662:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005666:	2b30      	cmp	r3, #48	@ 0x30
 8005668:	d013      	beq.n	8005692 <UART_SetConfig+0x16e>
 800566a:	2b30      	cmp	r3, #48	@ 0x30
 800566c:	d814      	bhi.n	8005698 <UART_SetConfig+0x174>
 800566e:	2b20      	cmp	r3, #32
 8005670:	d009      	beq.n	8005686 <UART_SetConfig+0x162>
 8005672:	2b20      	cmp	r3, #32
 8005674:	d810      	bhi.n	8005698 <UART_SetConfig+0x174>
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <UART_SetConfig+0x15c>
 800567a:	2b10      	cmp	r3, #16
 800567c:	d006      	beq.n	800568c <UART_SetConfig+0x168>
 800567e:	e00b      	b.n	8005698 <UART_SetConfig+0x174>
 8005680:	2300      	movs	r3, #0
 8005682:	77fb      	strb	r3, [r7, #31]
 8005684:	e0f2      	b.n	800586c <UART_SetConfig+0x348>
 8005686:	2302      	movs	r3, #2
 8005688:	77fb      	strb	r3, [r7, #31]
 800568a:	e0ef      	b.n	800586c <UART_SetConfig+0x348>
 800568c:	2304      	movs	r3, #4
 800568e:	77fb      	strb	r3, [r7, #31]
 8005690:	e0ec      	b.n	800586c <UART_SetConfig+0x348>
 8005692:	2308      	movs	r3, #8
 8005694:	77fb      	strb	r3, [r7, #31]
 8005696:	e0e9      	b.n	800586c <UART_SetConfig+0x348>
 8005698:	2310      	movs	r3, #16
 800569a:	77fb      	strb	r3, [r7, #31]
 800569c:	e0e6      	b.n	800586c <UART_SetConfig+0x348>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a56      	ldr	r2, [pc, #344]	@ (80057fc <UART_SetConfig+0x2d8>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d120      	bne.n	80056ea <UART_SetConfig+0x1c6>
 80056a8:	4b51      	ldr	r3, [pc, #324]	@ (80057f0 <UART_SetConfig+0x2cc>)
 80056aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80056b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80056b4:	d013      	beq.n	80056de <UART_SetConfig+0x1ba>
 80056b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80056b8:	d814      	bhi.n	80056e4 <UART_SetConfig+0x1c0>
 80056ba:	2b80      	cmp	r3, #128	@ 0x80
 80056bc:	d009      	beq.n	80056d2 <UART_SetConfig+0x1ae>
 80056be:	2b80      	cmp	r3, #128	@ 0x80
 80056c0:	d810      	bhi.n	80056e4 <UART_SetConfig+0x1c0>
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <UART_SetConfig+0x1a8>
 80056c6:	2b40      	cmp	r3, #64	@ 0x40
 80056c8:	d006      	beq.n	80056d8 <UART_SetConfig+0x1b4>
 80056ca:	e00b      	b.n	80056e4 <UART_SetConfig+0x1c0>
 80056cc:	2300      	movs	r3, #0
 80056ce:	77fb      	strb	r3, [r7, #31]
 80056d0:	e0cc      	b.n	800586c <UART_SetConfig+0x348>
 80056d2:	2302      	movs	r3, #2
 80056d4:	77fb      	strb	r3, [r7, #31]
 80056d6:	e0c9      	b.n	800586c <UART_SetConfig+0x348>
 80056d8:	2304      	movs	r3, #4
 80056da:	77fb      	strb	r3, [r7, #31]
 80056dc:	e0c6      	b.n	800586c <UART_SetConfig+0x348>
 80056de:	2308      	movs	r3, #8
 80056e0:	77fb      	strb	r3, [r7, #31]
 80056e2:	e0c3      	b.n	800586c <UART_SetConfig+0x348>
 80056e4:	2310      	movs	r3, #16
 80056e6:	77fb      	strb	r3, [r7, #31]
 80056e8:	e0c0      	b.n	800586c <UART_SetConfig+0x348>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a44      	ldr	r2, [pc, #272]	@ (8005800 <UART_SetConfig+0x2dc>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d125      	bne.n	8005740 <UART_SetConfig+0x21c>
 80056f4:	4b3e      	ldr	r3, [pc, #248]	@ (80057f0 <UART_SetConfig+0x2cc>)
 80056f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005702:	d017      	beq.n	8005734 <UART_SetConfig+0x210>
 8005704:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005708:	d817      	bhi.n	800573a <UART_SetConfig+0x216>
 800570a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800570e:	d00b      	beq.n	8005728 <UART_SetConfig+0x204>
 8005710:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005714:	d811      	bhi.n	800573a <UART_SetConfig+0x216>
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <UART_SetConfig+0x1fe>
 800571a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800571e:	d006      	beq.n	800572e <UART_SetConfig+0x20a>
 8005720:	e00b      	b.n	800573a <UART_SetConfig+0x216>
 8005722:	2300      	movs	r3, #0
 8005724:	77fb      	strb	r3, [r7, #31]
 8005726:	e0a1      	b.n	800586c <UART_SetConfig+0x348>
 8005728:	2302      	movs	r3, #2
 800572a:	77fb      	strb	r3, [r7, #31]
 800572c:	e09e      	b.n	800586c <UART_SetConfig+0x348>
 800572e:	2304      	movs	r3, #4
 8005730:	77fb      	strb	r3, [r7, #31]
 8005732:	e09b      	b.n	800586c <UART_SetConfig+0x348>
 8005734:	2308      	movs	r3, #8
 8005736:	77fb      	strb	r3, [r7, #31]
 8005738:	e098      	b.n	800586c <UART_SetConfig+0x348>
 800573a:	2310      	movs	r3, #16
 800573c:	77fb      	strb	r3, [r7, #31]
 800573e:	e095      	b.n	800586c <UART_SetConfig+0x348>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a2f      	ldr	r2, [pc, #188]	@ (8005804 <UART_SetConfig+0x2e0>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d125      	bne.n	8005796 <UART_SetConfig+0x272>
 800574a:	4b29      	ldr	r3, [pc, #164]	@ (80057f0 <UART_SetConfig+0x2cc>)
 800574c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005750:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005754:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005758:	d017      	beq.n	800578a <UART_SetConfig+0x266>
 800575a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800575e:	d817      	bhi.n	8005790 <UART_SetConfig+0x26c>
 8005760:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005764:	d00b      	beq.n	800577e <UART_SetConfig+0x25a>
 8005766:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800576a:	d811      	bhi.n	8005790 <UART_SetConfig+0x26c>
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <UART_SetConfig+0x254>
 8005770:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005774:	d006      	beq.n	8005784 <UART_SetConfig+0x260>
 8005776:	e00b      	b.n	8005790 <UART_SetConfig+0x26c>
 8005778:	2301      	movs	r3, #1
 800577a:	77fb      	strb	r3, [r7, #31]
 800577c:	e076      	b.n	800586c <UART_SetConfig+0x348>
 800577e:	2302      	movs	r3, #2
 8005780:	77fb      	strb	r3, [r7, #31]
 8005782:	e073      	b.n	800586c <UART_SetConfig+0x348>
 8005784:	2304      	movs	r3, #4
 8005786:	77fb      	strb	r3, [r7, #31]
 8005788:	e070      	b.n	800586c <UART_SetConfig+0x348>
 800578a:	2308      	movs	r3, #8
 800578c:	77fb      	strb	r3, [r7, #31]
 800578e:	e06d      	b.n	800586c <UART_SetConfig+0x348>
 8005790:	2310      	movs	r3, #16
 8005792:	77fb      	strb	r3, [r7, #31]
 8005794:	e06a      	b.n	800586c <UART_SetConfig+0x348>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a1b      	ldr	r2, [pc, #108]	@ (8005808 <UART_SetConfig+0x2e4>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d138      	bne.n	8005812 <UART_SetConfig+0x2ee>
 80057a0:	4b13      	ldr	r3, [pc, #76]	@ (80057f0 <UART_SetConfig+0x2cc>)
 80057a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057a6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80057aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80057ae:	d017      	beq.n	80057e0 <UART_SetConfig+0x2bc>
 80057b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80057b4:	d82a      	bhi.n	800580c <UART_SetConfig+0x2e8>
 80057b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057ba:	d00b      	beq.n	80057d4 <UART_SetConfig+0x2b0>
 80057bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057c0:	d824      	bhi.n	800580c <UART_SetConfig+0x2e8>
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <UART_SetConfig+0x2aa>
 80057c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ca:	d006      	beq.n	80057da <UART_SetConfig+0x2b6>
 80057cc:	e01e      	b.n	800580c <UART_SetConfig+0x2e8>
 80057ce:	2300      	movs	r3, #0
 80057d0:	77fb      	strb	r3, [r7, #31]
 80057d2:	e04b      	b.n	800586c <UART_SetConfig+0x348>
 80057d4:	2302      	movs	r3, #2
 80057d6:	77fb      	strb	r3, [r7, #31]
 80057d8:	e048      	b.n	800586c <UART_SetConfig+0x348>
 80057da:	2304      	movs	r3, #4
 80057dc:	77fb      	strb	r3, [r7, #31]
 80057de:	e045      	b.n	800586c <UART_SetConfig+0x348>
 80057e0:	2308      	movs	r3, #8
 80057e2:	77fb      	strb	r3, [r7, #31]
 80057e4:	e042      	b.n	800586c <UART_SetConfig+0x348>
 80057e6:	bf00      	nop
 80057e8:	efff69f3 	.word	0xefff69f3
 80057ec:	40011000 	.word	0x40011000
 80057f0:	40023800 	.word	0x40023800
 80057f4:	40004400 	.word	0x40004400
 80057f8:	40004800 	.word	0x40004800
 80057fc:	40004c00 	.word	0x40004c00
 8005800:	40005000 	.word	0x40005000
 8005804:	40011400 	.word	0x40011400
 8005808:	40007800 	.word	0x40007800
 800580c:	2310      	movs	r3, #16
 800580e:	77fb      	strb	r3, [r7, #31]
 8005810:	e02c      	b.n	800586c <UART_SetConfig+0x348>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a72      	ldr	r2, [pc, #456]	@ (80059e0 <UART_SetConfig+0x4bc>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d125      	bne.n	8005868 <UART_SetConfig+0x344>
 800581c:	4b71      	ldr	r3, [pc, #452]	@ (80059e4 <UART_SetConfig+0x4c0>)
 800581e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005822:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005826:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800582a:	d017      	beq.n	800585c <UART_SetConfig+0x338>
 800582c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005830:	d817      	bhi.n	8005862 <UART_SetConfig+0x33e>
 8005832:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005836:	d00b      	beq.n	8005850 <UART_SetConfig+0x32c>
 8005838:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800583c:	d811      	bhi.n	8005862 <UART_SetConfig+0x33e>
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <UART_SetConfig+0x326>
 8005842:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005846:	d006      	beq.n	8005856 <UART_SetConfig+0x332>
 8005848:	e00b      	b.n	8005862 <UART_SetConfig+0x33e>
 800584a:	2300      	movs	r3, #0
 800584c:	77fb      	strb	r3, [r7, #31]
 800584e:	e00d      	b.n	800586c <UART_SetConfig+0x348>
 8005850:	2302      	movs	r3, #2
 8005852:	77fb      	strb	r3, [r7, #31]
 8005854:	e00a      	b.n	800586c <UART_SetConfig+0x348>
 8005856:	2304      	movs	r3, #4
 8005858:	77fb      	strb	r3, [r7, #31]
 800585a:	e007      	b.n	800586c <UART_SetConfig+0x348>
 800585c:	2308      	movs	r3, #8
 800585e:	77fb      	strb	r3, [r7, #31]
 8005860:	e004      	b.n	800586c <UART_SetConfig+0x348>
 8005862:	2310      	movs	r3, #16
 8005864:	77fb      	strb	r3, [r7, #31]
 8005866:	e001      	b.n	800586c <UART_SetConfig+0x348>
 8005868:	2310      	movs	r3, #16
 800586a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005874:	d15b      	bne.n	800592e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005876:	7ffb      	ldrb	r3, [r7, #31]
 8005878:	2b08      	cmp	r3, #8
 800587a:	d828      	bhi.n	80058ce <UART_SetConfig+0x3aa>
 800587c:	a201      	add	r2, pc, #4	@ (adr r2, 8005884 <UART_SetConfig+0x360>)
 800587e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005882:	bf00      	nop
 8005884:	080058a9 	.word	0x080058a9
 8005888:	080058b1 	.word	0x080058b1
 800588c:	080058b9 	.word	0x080058b9
 8005890:	080058cf 	.word	0x080058cf
 8005894:	080058bf 	.word	0x080058bf
 8005898:	080058cf 	.word	0x080058cf
 800589c:	080058cf 	.word	0x080058cf
 80058a0:	080058cf 	.word	0x080058cf
 80058a4:	080058c7 	.word	0x080058c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058a8:	f7fe fdf8 	bl	800449c <HAL_RCC_GetPCLK1Freq>
 80058ac:	61b8      	str	r0, [r7, #24]
        break;
 80058ae:	e013      	b.n	80058d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058b0:	f7fe fe08 	bl	80044c4 <HAL_RCC_GetPCLK2Freq>
 80058b4:	61b8      	str	r0, [r7, #24]
        break;
 80058b6:	e00f      	b.n	80058d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058b8:	4b4b      	ldr	r3, [pc, #300]	@ (80059e8 <UART_SetConfig+0x4c4>)
 80058ba:	61bb      	str	r3, [r7, #24]
        break;
 80058bc:	e00c      	b.n	80058d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058be:	f7fe fcdb 	bl	8004278 <HAL_RCC_GetSysClockFreq>
 80058c2:	61b8      	str	r0, [r7, #24]
        break;
 80058c4:	e008      	b.n	80058d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058ca:	61bb      	str	r3, [r7, #24]
        break;
 80058cc:	e004      	b.n	80058d8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	77bb      	strb	r3, [r7, #30]
        break;
 80058d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d074      	beq.n	80059c8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	005a      	lsls	r2, r3, #1
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	085b      	lsrs	r3, r3, #1
 80058e8:	441a      	add	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	2b0f      	cmp	r3, #15
 80058f8:	d916      	bls.n	8005928 <UART_SetConfig+0x404>
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005900:	d212      	bcs.n	8005928 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	b29b      	uxth	r3, r3
 8005906:	f023 030f 	bic.w	r3, r3, #15
 800590a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	085b      	lsrs	r3, r3, #1
 8005910:	b29b      	uxth	r3, r3
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	b29a      	uxth	r2, r3
 8005918:	89fb      	ldrh	r3, [r7, #14]
 800591a:	4313      	orrs	r3, r2
 800591c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	89fa      	ldrh	r2, [r7, #14]
 8005924:	60da      	str	r2, [r3, #12]
 8005926:	e04f      	b.n	80059c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	77bb      	strb	r3, [r7, #30]
 800592c:	e04c      	b.n	80059c8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800592e:	7ffb      	ldrb	r3, [r7, #31]
 8005930:	2b08      	cmp	r3, #8
 8005932:	d828      	bhi.n	8005986 <UART_SetConfig+0x462>
 8005934:	a201      	add	r2, pc, #4	@ (adr r2, 800593c <UART_SetConfig+0x418>)
 8005936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593a:	bf00      	nop
 800593c:	08005961 	.word	0x08005961
 8005940:	08005969 	.word	0x08005969
 8005944:	08005971 	.word	0x08005971
 8005948:	08005987 	.word	0x08005987
 800594c:	08005977 	.word	0x08005977
 8005950:	08005987 	.word	0x08005987
 8005954:	08005987 	.word	0x08005987
 8005958:	08005987 	.word	0x08005987
 800595c:	0800597f 	.word	0x0800597f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005960:	f7fe fd9c 	bl	800449c <HAL_RCC_GetPCLK1Freq>
 8005964:	61b8      	str	r0, [r7, #24]
        break;
 8005966:	e013      	b.n	8005990 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005968:	f7fe fdac 	bl	80044c4 <HAL_RCC_GetPCLK2Freq>
 800596c:	61b8      	str	r0, [r7, #24]
        break;
 800596e:	e00f      	b.n	8005990 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005970:	4b1d      	ldr	r3, [pc, #116]	@ (80059e8 <UART_SetConfig+0x4c4>)
 8005972:	61bb      	str	r3, [r7, #24]
        break;
 8005974:	e00c      	b.n	8005990 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005976:	f7fe fc7f 	bl	8004278 <HAL_RCC_GetSysClockFreq>
 800597a:	61b8      	str	r0, [r7, #24]
        break;
 800597c:	e008      	b.n	8005990 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800597e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005982:	61bb      	str	r3, [r7, #24]
        break;
 8005984:	e004      	b.n	8005990 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	77bb      	strb	r3, [r7, #30]
        break;
 800598e:	bf00      	nop
    }

    if (pclk != 0U)
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d018      	beq.n	80059c8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	085a      	lsrs	r2, r3, #1
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	441a      	add	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	2b0f      	cmp	r3, #15
 80059ae:	d909      	bls.n	80059c4 <UART_SetConfig+0x4a0>
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059b6:	d205      	bcs.n	80059c4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	60da      	str	r2, [r3, #12]
 80059c2:	e001      	b.n	80059c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80059d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3720      	adds	r7, #32
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	40007c00 	.word	0x40007c00
 80059e4:	40023800 	.word	0x40023800
 80059e8:	00f42400 	.word	0x00f42400

080059ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00a      	beq.n	8005a16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00a      	beq.n	8005a38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00a      	beq.n	8005a5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5e:	f003 0304 	and.w	r3, r3, #4
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00a      	beq.n	8005a7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a80:	f003 0310 	and.w	r3, r3, #16
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00a      	beq.n	8005a9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa2:	f003 0320 	and.w	r3, r3, #32
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d01a      	beq.n	8005b02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aea:	d10a      	bne.n	8005b02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00a      	beq.n	8005b24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	605a      	str	r2, [r3, #4]
  }
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b098      	sub	sp, #96	@ 0x60
 8005b34:	af02      	add	r7, sp, #8
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b40:	f7fb ff36 	bl	80019b0 <HAL_GetTick>
 8005b44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0308 	and.w	r3, r3, #8
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d12e      	bne.n	8005bb2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f88c 	bl	8005c80 <UART_WaitOnFlagUntilTimeout>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d021      	beq.n	8005bb2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b76:	e853 3f00 	ldrex	r3, [r3]
 8005b7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b82:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b8e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b94:	e841 2300 	strex	r3, r2, [r1]
 8005b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e6      	bne.n	8005b6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e062      	b.n	8005c78 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b04      	cmp	r3, #4
 8005bbe:	d149      	bne.n	8005c54 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f856 	bl	8005c80 <UART_WaitOnFlagUntilTimeout>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d03c      	beq.n	8005c54 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be2:	e853 3f00 	ldrex	r3, [r3]
 8005be6:	623b      	str	r3, [r7, #32]
   return(result);
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c00:	e841 2300 	strex	r3, r2, [r1]
 8005c04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1e6      	bne.n	8005bda <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3308      	adds	r3, #8
 8005c12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	e853 3f00 	ldrex	r3, [r3]
 8005c1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f023 0301 	bic.w	r3, r3, #1
 8005c22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3308      	adds	r3, #8
 8005c2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c2c:	61fa      	str	r2, [r7, #28]
 8005c2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	69b9      	ldr	r1, [r7, #24]
 8005c32:	69fa      	ldr	r2, [r7, #28]
 8005c34:	e841 2300 	strex	r3, r2, [r1]
 8005c38:	617b      	str	r3, [r7, #20]
   return(result);
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e5      	bne.n	8005c0c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2220      	movs	r2, #32
 8005c44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e011      	b.n	8005c78 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2220      	movs	r2, #32
 8005c58:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3758      	adds	r7, #88	@ 0x58
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	603b      	str	r3, [r7, #0]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c90:	e04f      	b.n	8005d32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c98:	d04b      	beq.n	8005d32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c9a:	f7fb fe89 	bl	80019b0 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d302      	bcc.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e04e      	b.n	8005d52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0304 	and.w	r3, r3, #4
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d037      	beq.n	8005d32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2b80      	cmp	r3, #128	@ 0x80
 8005cc6:	d034      	beq.n	8005d32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2b40      	cmp	r3, #64	@ 0x40
 8005ccc:	d031      	beq.n	8005d32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	f003 0308 	and.w	r3, r3, #8
 8005cd8:	2b08      	cmp	r3, #8
 8005cda:	d110      	bne.n	8005cfe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2208      	movs	r2, #8
 8005ce2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 f838 	bl	8005d5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2208      	movs	r2, #8
 8005cee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e029      	b.n	8005d52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d0c:	d111      	bne.n	8005d32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 f81e 	bl	8005d5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2220      	movs	r2, #32
 8005d22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e00f      	b.n	8005d52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	69da      	ldr	r2, [r3, #28]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	bf0c      	ite	eq
 8005d42:	2301      	moveq	r3, #1
 8005d44:	2300      	movne	r3, #0
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	461a      	mov	r2, r3
 8005d4a:	79fb      	ldrb	r3, [r7, #7]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d0a0      	beq.n	8005c92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b095      	sub	sp, #84	@ 0x54
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d6a:	e853 3f00 	ldrex	r3, [r3]
 8005d6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d80:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d82:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d88:	e841 2300 	strex	r3, r2, [r1]
 8005d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1e6      	bne.n	8005d62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3308      	adds	r3, #8
 8005d9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	e853 3f00 	ldrex	r3, [r3]
 8005da2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f023 0301 	bic.w	r3, r3, #1
 8005daa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	3308      	adds	r3, #8
 8005db2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005db4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005db6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dbc:	e841 2300 	strex	r3, r2, [r1]
 8005dc0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1e5      	bne.n	8005d94 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d118      	bne.n	8005e02 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	e853 3f00 	ldrex	r3, [r3]
 8005ddc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	f023 0310 	bic.w	r3, r3, #16
 8005de4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	461a      	mov	r2, r3
 8005dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dee:	61bb      	str	r3, [r7, #24]
 8005df0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df2:	6979      	ldr	r1, [r7, #20]
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	e841 2300 	strex	r3, r2, [r1]
 8005dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1e6      	bne.n	8005dd0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005e16:	bf00      	nop
 8005e18:	3754      	adds	r7, #84	@ 0x54
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
	...

08005e24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e24:	b084      	sub	sp, #16
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b084      	sub	sp, #16
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	f107 001c 	add.w	r0, r7, #28
 8005e32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e36:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d121      	bne.n	8005e82 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e42:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68da      	ldr	r2, [r3, #12]
 8005e4e:	4b21      	ldr	r3, [pc, #132]	@ (8005ed4 <USB_CoreInit+0xb0>)
 8005e50:	4013      	ands	r3, r2
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e62:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d105      	bne.n	8005e76 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fa92 	bl	80063a0 <USB_CoreReset>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	73fb      	strb	r3, [r7, #15]
 8005e80:	e010      	b.n	8005ea4 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fa86 	bl	80063a0 <USB_CoreReset>
 8005e94:	4603      	mov	r3, r0
 8005e96:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e9c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005ea4:	7fbb      	ldrb	r3, [r7, #30]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d10b      	bne.n	8005ec2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f043 0206 	orr.w	r2, r3, #6
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f043 0220 	orr.w	r2, r3, #32
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ece:	b004      	add	sp, #16
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	ffbdffbf 	.word	0xffbdffbf

08005ed8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f023 0201 	bic.w	r2, r3, #1
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b084      	sub	sp, #16
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	460b      	mov	r3, r1
 8005f04:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f16:	78fb      	ldrb	r3, [r7, #3]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d115      	bne.n	8005f48 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005f28:	200a      	movs	r0, #10
 8005f2a:	f7fb fd4d 	bl	80019c8 <HAL_Delay>
      ms += 10U;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	330a      	adds	r3, #10
 8005f32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fa25 	bl	8006384 <USB_GetMode>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d01e      	beq.n	8005f7e <USB_SetCurrentMode+0x84>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2bc7      	cmp	r3, #199	@ 0xc7
 8005f44:	d9f0      	bls.n	8005f28 <USB_SetCurrentMode+0x2e>
 8005f46:	e01a      	b.n	8005f7e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f48:	78fb      	ldrb	r3, [r7, #3]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d115      	bne.n	8005f7a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005f5a:	200a      	movs	r0, #10
 8005f5c:	f7fb fd34 	bl	80019c8 <HAL_Delay>
      ms += 10U;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	330a      	adds	r3, #10
 8005f64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fa0c 	bl	8006384 <USB_GetMode>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d005      	beq.n	8005f7e <USB_SetCurrentMode+0x84>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2bc7      	cmp	r3, #199	@ 0xc7
 8005f76:	d9f0      	bls.n	8005f5a <USB_SetCurrentMode+0x60>
 8005f78:	e001      	b.n	8005f7e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e005      	b.n	8005f8a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2bc8      	cmp	r3, #200	@ 0xc8
 8005f82:	d101      	bne.n	8005f88 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e000      	b.n	8005f8a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
	...

08005f94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f94:	b084      	sub	sp, #16
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b086      	sub	sp, #24
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
 8005f9e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005fa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005fae:	2300      	movs	r3, #0
 8005fb0:	613b      	str	r3, [r7, #16]
 8005fb2:	e009      	b.n	8005fc8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	3340      	adds	r3, #64	@ 0x40
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	613b      	str	r3, [r7, #16]
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	2b0e      	cmp	r3, #14
 8005fcc:	d9f2      	bls.n	8005fb4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005fce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d11c      	bne.n	8006010 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fe4:	f043 0302 	orr.w	r3, r3, #2
 8005fe8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fee:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	e005      	b.n	800601c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006014:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006022:	461a      	mov	r2, r3
 8006024:	2300      	movs	r3, #0
 8006026:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006028:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800602c:	2b01      	cmp	r3, #1
 800602e:	d10d      	bne.n	800604c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006030:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006034:	2b00      	cmp	r3, #0
 8006036:	d104      	bne.n	8006042 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006038:	2100      	movs	r1, #0
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f968 	bl	8006310 <USB_SetDevSpeed>
 8006040:	e008      	b.n	8006054 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006042:	2101      	movs	r1, #1
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f963 	bl	8006310 <USB_SetDevSpeed>
 800604a:	e003      	b.n	8006054 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800604c:	2103      	movs	r1, #3
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f95e 	bl	8006310 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006054:	2110      	movs	r1, #16
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f8fa 	bl	8006250 <USB_FlushTxFifo>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f924 	bl	80062b4 <USB_FlushRxFifo>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800607c:	461a      	mov	r2, r3
 800607e:	2300      	movs	r3, #0
 8006080:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006088:	461a      	mov	r2, r3
 800608a:	2300      	movs	r3, #0
 800608c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006094:	461a      	mov	r2, r3
 8006096:	2300      	movs	r3, #0
 8006098:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800609a:	2300      	movs	r3, #0
 800609c:	613b      	str	r3, [r7, #16]
 800609e:	e043      	b.n	8006128 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060b6:	d118      	bne.n	80060ea <USB_DevInit+0x156>
    {
      if (i == 0U)
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10a      	bne.n	80060d4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060ca:	461a      	mov	r2, r3
 80060cc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80060d0:	6013      	str	r3, [r2, #0]
 80060d2:	e013      	b.n	80060fc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060e0:	461a      	mov	r2, r3
 80060e2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80060e6:	6013      	str	r3, [r2, #0]
 80060e8:	e008      	b.n	80060fc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060f6:	461a      	mov	r2, r3
 80060f8:	2300      	movs	r3, #0
 80060fa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	4413      	add	r3, r2
 8006104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006108:	461a      	mov	r2, r3
 800610a:	2300      	movs	r3, #0
 800610c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800611a:	461a      	mov	r2, r3
 800611c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006120:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	3301      	adds	r3, #1
 8006126:	613b      	str	r3, [r7, #16]
 8006128:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800612c:	461a      	mov	r2, r3
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	4293      	cmp	r3, r2
 8006132:	d3b5      	bcc.n	80060a0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006134:	2300      	movs	r3, #0
 8006136:	613b      	str	r3, [r7, #16]
 8006138:	e043      	b.n	80061c2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	4413      	add	r3, r2
 8006142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800614c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006150:	d118      	bne.n	8006184 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10a      	bne.n	800616e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006164:	461a      	mov	r2, r3
 8006166:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800616a:	6013      	str	r3, [r2, #0]
 800616c:	e013      	b.n	8006196 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800617a:	461a      	mov	r2, r3
 800617c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006180:	6013      	str	r3, [r2, #0]
 8006182:	e008      	b.n	8006196 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	4413      	add	r3, r2
 800618c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006190:	461a      	mov	r2, r3
 8006192:	2300      	movs	r3, #0
 8006194:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061a2:	461a      	mov	r2, r3
 80061a4:	2300      	movs	r3, #0
 80061a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061b4:	461a      	mov	r2, r3
 80061b6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80061ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	3301      	adds	r3, #1
 80061c0:	613b      	str	r3, [r7, #16]
 80061c2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80061c6:	461a      	mov	r2, r3
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d3b5      	bcc.n	800613a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061e0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80061ee:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80061f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d105      	bne.n	8006204 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	f043 0210 	orr.w	r2, r3, #16
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	699a      	ldr	r2, [r3, #24]
 8006208:	4b0f      	ldr	r3, [pc, #60]	@ (8006248 <USB_DevInit+0x2b4>)
 800620a:	4313      	orrs	r3, r2
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006210:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006214:	2b00      	cmp	r3, #0
 8006216:	d005      	beq.n	8006224 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	f043 0208 	orr.w	r2, r3, #8
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006224:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006228:	2b01      	cmp	r3, #1
 800622a:	d105      	bne.n	8006238 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	699a      	ldr	r2, [r3, #24]
 8006230:	4b06      	ldr	r3, [pc, #24]	@ (800624c <USB_DevInit+0x2b8>)
 8006232:	4313      	orrs	r3, r2
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006238:	7dfb      	ldrb	r3, [r7, #23]
}
 800623a:	4618      	mov	r0, r3
 800623c:	3718      	adds	r7, #24
 800623e:	46bd      	mov	sp, r7
 8006240:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006244:	b004      	add	sp, #16
 8006246:	4770      	bx	lr
 8006248:	803c3800 	.word	0x803c3800
 800624c:	40000004 	.word	0x40000004

08006250 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3301      	adds	r3, #1
 8006262:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800626a:	d901      	bls.n	8006270 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e01b      	b.n	80062a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	daf2      	bge.n	800625e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	019b      	lsls	r3, r3, #6
 8006280:	f043 0220 	orr.w	r2, r3, #32
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	3301      	adds	r3, #1
 800628c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006294:	d901      	bls.n	800629a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e006      	b.n	80062a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f003 0320 	and.w	r3, r3, #32
 80062a2:	2b20      	cmp	r3, #32
 80062a4:	d0f0      	beq.n	8006288 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062bc:	2300      	movs	r3, #0
 80062be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	3301      	adds	r3, #1
 80062c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062cc:	d901      	bls.n	80062d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e018      	b.n	8006304 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	daf2      	bge.n	80062c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2210      	movs	r2, #16
 80062e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	3301      	adds	r3, #1
 80062e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062f0:	d901      	bls.n	80062f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e006      	b.n	8006304 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	f003 0310 	and.w	r3, r3, #16
 80062fe:	2b10      	cmp	r3, #16
 8006300:	d0f0      	beq.n	80062e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	460b      	mov	r3, r1
 800631a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	68f9      	ldr	r1, [r7, #12]
 800632c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006330:	4313      	orrs	r3, r2
 8006332:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006342:	b480      	push	{r7}
 8006344:	b085      	sub	sp, #20
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800635c:	f023 0303 	bic.w	r3, r3, #3
 8006360:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006370:	f043 0302 	orr.w	r3, r3, #2
 8006374:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	f003 0301 	and.w	r3, r3, #1
}
 8006394:	4618      	mov	r0, r3
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063a8:	2300      	movs	r3, #0
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3301      	adds	r3, #1
 80063b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063b8:	d901      	bls.n	80063be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e022      	b.n	8006404 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	daf2      	bge.n	80063ac <USB_CoreReset+0xc>

  count = 10U;
 80063c6:	230a      	movs	r3, #10
 80063c8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80063ca:	e002      	b.n	80063d2 <USB_CoreReset+0x32>
  {
    count--;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1f9      	bne.n	80063cc <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	f043 0201 	orr.w	r2, r3, #1
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	3301      	adds	r3, #1
 80063e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063f0:	d901      	bls.n	80063f6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e006      	b.n	8006404 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d0f0      	beq.n	80063e4 <USB_CoreReset+0x44>

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006410:	b480      	push	{r7}
 8006412:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006414:	bf00      	nop
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
	...

08006420 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006426:	f3ef 8305 	mrs	r3, IPSR
 800642a:	60bb      	str	r3, [r7, #8]
  return(result);
 800642c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10f      	bne.n	8006452 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006432:	f3ef 8310 	mrs	r3, PRIMASK
 8006436:	607b      	str	r3, [r7, #4]
  return(result);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d105      	bne.n	800644a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800643e:	f3ef 8311 	mrs	r3, BASEPRI
 8006442:	603b      	str	r3, [r7, #0]
  return(result);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d007      	beq.n	800645a <osKernelInitialize+0x3a>
 800644a:	4b0e      	ldr	r3, [pc, #56]	@ (8006484 <osKernelInitialize+0x64>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b02      	cmp	r3, #2
 8006450:	d103      	bne.n	800645a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006452:	f06f 0305 	mvn.w	r3, #5
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	e00c      	b.n	8006474 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800645a:	4b0a      	ldr	r3, [pc, #40]	@ (8006484 <osKernelInitialize+0x64>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d105      	bne.n	800646e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006462:	4b08      	ldr	r3, [pc, #32]	@ (8006484 <osKernelInitialize+0x64>)
 8006464:	2201      	movs	r2, #1
 8006466:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006468:	2300      	movs	r3, #0
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	e002      	b.n	8006474 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800646e:	f04f 33ff 	mov.w	r3, #4294967295
 8006472:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006474:	68fb      	ldr	r3, [r7, #12]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	200012a0 	.word	0x200012a0

08006488 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800648e:	f3ef 8305 	mrs	r3, IPSR
 8006492:	60bb      	str	r3, [r7, #8]
  return(result);
 8006494:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10f      	bne.n	80064ba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800649a:	f3ef 8310 	mrs	r3, PRIMASK
 800649e:	607b      	str	r3, [r7, #4]
  return(result);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d105      	bne.n	80064b2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064a6:	f3ef 8311 	mrs	r3, BASEPRI
 80064aa:	603b      	str	r3, [r7, #0]
  return(result);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d007      	beq.n	80064c2 <osKernelStart+0x3a>
 80064b2:	4b0f      	ldr	r3, [pc, #60]	@ (80064f0 <osKernelStart+0x68>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d103      	bne.n	80064c2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80064ba:	f06f 0305 	mvn.w	r3, #5
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	e010      	b.n	80064e4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80064c2:	4b0b      	ldr	r3, [pc, #44]	@ (80064f0 <osKernelStart+0x68>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d109      	bne.n	80064de <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80064ca:	f7ff ffa1 	bl	8006410 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80064ce:	4b08      	ldr	r3, [pc, #32]	@ (80064f0 <osKernelStart+0x68>)
 80064d0:	2202      	movs	r2, #2
 80064d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80064d4:	f001 ff02 	bl	80082dc <vTaskStartScheduler>
      stat = osOK;
 80064d8:	2300      	movs	r3, #0
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	e002      	b.n	80064e4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80064de:	f04f 33ff 	mov.w	r3, #4294967295
 80064e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80064e4:	68fb      	ldr	r3, [r7, #12]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	200012a0 	.word	0x200012a0

080064f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b090      	sub	sp, #64	@ 0x40
 80064f8:	af04      	add	r7, sp, #16
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006500:	2300      	movs	r3, #0
 8006502:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006504:	f3ef 8305 	mrs	r3, IPSR
 8006508:	61fb      	str	r3, [r7, #28]
  return(result);
 800650a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800650c:	2b00      	cmp	r3, #0
 800650e:	f040 808f 	bne.w	8006630 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006512:	f3ef 8310 	mrs	r3, PRIMASK
 8006516:	61bb      	str	r3, [r7, #24]
  return(result);
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d105      	bne.n	800652a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800651e:	f3ef 8311 	mrs	r3, BASEPRI
 8006522:	617b      	str	r3, [r7, #20]
  return(result);
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <osThreadNew+0x3e>
 800652a:	4b44      	ldr	r3, [pc, #272]	@ (800663c <osThreadNew+0x148>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b02      	cmp	r3, #2
 8006530:	d07e      	beq.n	8006630 <osThreadNew+0x13c>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d07b      	beq.n	8006630 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006538:	2380      	movs	r3, #128	@ 0x80
 800653a:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800653c:	2318      	movs	r3, #24
 800653e:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8006540:	2300      	movs	r3, #0
 8006542:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8006544:	f04f 33ff 	mov.w	r3, #4294967295
 8006548:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d045      	beq.n	80065dc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <osThreadNew+0x6a>
        name = attr->name;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800656c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656e:	2b00      	cmp	r3, #0
 8006570:	d008      	beq.n	8006584 <osThreadNew+0x90>
 8006572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006574:	2b38      	cmp	r3, #56	@ 0x38
 8006576:	d805      	bhi.n	8006584 <osThreadNew+0x90>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <osThreadNew+0x94>
        return (NULL);
 8006584:	2300      	movs	r3, #0
 8006586:	e054      	b.n	8006632 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d003      	beq.n	8006598 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	089b      	lsrs	r3, r3, #2
 8006596:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00e      	beq.n	80065be <osThreadNew+0xca>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	2ba7      	cmp	r3, #167	@ 0xa7
 80065a6:	d90a      	bls.n	80065be <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d006      	beq.n	80065be <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <osThreadNew+0xca>
        mem = 1;
 80065b8:	2301      	movs	r3, #1
 80065ba:	623b      	str	r3, [r7, #32]
 80065bc:	e010      	b.n	80065e0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10c      	bne.n	80065e0 <osThreadNew+0xec>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d108      	bne.n	80065e0 <osThreadNew+0xec>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d104      	bne.n	80065e0 <osThreadNew+0xec>
          mem = 0;
 80065d6:	2300      	movs	r3, #0
 80065d8:	623b      	str	r3, [r7, #32]
 80065da:	e001      	b.n	80065e0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80065dc:	2300      	movs	r3, #0
 80065de:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d110      	bne.n	8006608 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80065ee:	9202      	str	r2, [sp, #8]
 80065f0:	9301      	str	r3, [sp, #4]
 80065f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f001 fc6f 	bl	8007ee0 <xTaskCreateStatic>
 8006602:	4603      	mov	r3, r0
 8006604:	613b      	str	r3, [r7, #16]
 8006606:	e013      	b.n	8006630 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d110      	bne.n	8006630 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800660e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006610:	b29a      	uxth	r2, r3
 8006612:	f107 0310 	add.w	r3, r7, #16
 8006616:	9301      	str	r3, [sp, #4]
 8006618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f001 fcc3 	bl	8007fac <xTaskCreate>
 8006626:	4603      	mov	r3, r0
 8006628:	2b01      	cmp	r3, #1
 800662a:	d001      	beq.n	8006630 <osThreadNew+0x13c>
          hTask = NULL;
 800662c:	2300      	movs	r3, #0
 800662e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006630:	693b      	ldr	r3, [r7, #16]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3730      	adds	r7, #48	@ 0x30
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	200012a0 	.word	0x200012a0

08006640 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006648:	f3ef 8305 	mrs	r3, IPSR
 800664c:	613b      	str	r3, [r7, #16]
  return(result);
 800664e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10f      	bne.n	8006674 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006654:	f3ef 8310 	mrs	r3, PRIMASK
 8006658:	60fb      	str	r3, [r7, #12]
  return(result);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d105      	bne.n	800666c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006660:	f3ef 8311 	mrs	r3, BASEPRI
 8006664:	60bb      	str	r3, [r7, #8]
  return(result);
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d007      	beq.n	800667c <osDelay+0x3c>
 800666c:	4b0a      	ldr	r3, [pc, #40]	@ (8006698 <osDelay+0x58>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b02      	cmp	r3, #2
 8006672:	d103      	bne.n	800667c <osDelay+0x3c>
    stat = osErrorISR;
 8006674:	f06f 0305 	mvn.w	r3, #5
 8006678:	617b      	str	r3, [r7, #20]
 800667a:	e007      	b.n	800668c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800667c:	2300      	movs	r3, #0
 800667e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d002      	beq.n	800668c <osDelay+0x4c>
      vTaskDelay(ticks);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f001 fdf0 	bl	800826c <vTaskDelay>
    }
  }

  return (stat);
 800668c:	697b      	ldr	r3, [r7, #20]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3718      	adds	r7, #24
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	200012a0 	.word	0x200012a0

0800669c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800669c:	b580      	push	{r7, lr}
 800669e:	b08c      	sub	sp, #48	@ 0x30
 80066a0:	af02      	add	r7, sp, #8
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80066a8:	2300      	movs	r3, #0
 80066aa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066ac:	f3ef 8305 	mrs	r3, IPSR
 80066b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80066b2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f040 8086 	bne.w	80067c6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066ba:	f3ef 8310 	mrs	r3, PRIMASK
 80066be:	617b      	str	r3, [r7, #20]
  return(result);
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d105      	bne.n	80066d2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066c6:	f3ef 8311 	mrs	r3, BASEPRI
 80066ca:	613b      	str	r3, [r7, #16]
  return(result);
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <osSemaphoreNew+0x3e>
 80066d2:	4b3f      	ldr	r3, [pc, #252]	@ (80067d0 <osSemaphoreNew+0x134>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d075      	beq.n	80067c6 <osSemaphoreNew+0x12a>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d072      	beq.n	80067c6 <osSemaphoreNew+0x12a>
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d86e      	bhi.n	80067c6 <osSemaphoreNew+0x12a>
    mem = -1;
 80066e8:	f04f 33ff 	mov.w	r3, #4294967295
 80066ec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d015      	beq.n	8006720 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d006      	beq.n	800670a <osSemaphoreNew+0x6e>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	2b4f      	cmp	r3, #79	@ 0x4f
 8006702:	d902      	bls.n	800670a <osSemaphoreNew+0x6e>
        mem = 1;
 8006704:	2301      	movs	r3, #1
 8006706:	623b      	str	r3, [r7, #32]
 8006708:	e00c      	b.n	8006724 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d108      	bne.n	8006724 <osSemaphoreNew+0x88>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d104      	bne.n	8006724 <osSemaphoreNew+0x88>
          mem = 0;
 800671a:	2300      	movs	r3, #0
 800671c:	623b      	str	r3, [r7, #32]
 800671e:	e001      	b.n	8006724 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006720:	2300      	movs	r3, #0
 8006722:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672a:	d04c      	beq.n	80067c6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d128      	bne.n	8006784 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d10a      	bne.n	800674e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	2203      	movs	r2, #3
 800673e:	9200      	str	r2, [sp, #0]
 8006740:	2200      	movs	r2, #0
 8006742:	2100      	movs	r1, #0
 8006744:	2001      	movs	r0, #1
 8006746:	f000 fbc3 	bl	8006ed0 <xQueueGenericCreateStatic>
 800674a:	6278      	str	r0, [r7, #36]	@ 0x24
 800674c:	e005      	b.n	800675a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800674e:	2203      	movs	r2, #3
 8006750:	2100      	movs	r1, #0
 8006752:	2001      	movs	r0, #1
 8006754:	f000 fc43 	bl	8006fde <xQueueGenericCreate>
 8006758:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800675a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675c:	2b00      	cmp	r3, #0
 800675e:	d022      	beq.n	80067a6 <osSemaphoreNew+0x10a>
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d01f      	beq.n	80067a6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006766:	2300      	movs	r3, #0
 8006768:	2200      	movs	r2, #0
 800676a:	2100      	movs	r1, #0
 800676c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800676e:	f000 fd13 	bl	8007198 <xQueueGenericSend>
 8006772:	4603      	mov	r3, r0
 8006774:	2b01      	cmp	r3, #1
 8006776:	d016      	beq.n	80067a6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8006778:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800677a:	f001 f9db 	bl	8007b34 <vQueueDelete>
            hSemaphore = NULL;
 800677e:	2300      	movs	r3, #0
 8006780:	627b      	str	r3, [r7, #36]	@ 0x24
 8006782:	e010      	b.n	80067a6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d108      	bne.n	800679c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	461a      	mov	r2, r3
 8006790:	68b9      	ldr	r1, [r7, #8]
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f000 fc89 	bl	80070aa <xQueueCreateCountingSemaphoreStatic>
 8006798:	6278      	str	r0, [r7, #36]	@ 0x24
 800679a:	e004      	b.n	80067a6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800679c:	68b9      	ldr	r1, [r7, #8]
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 fcc0 	bl	8007124 <xQueueCreateCountingSemaphore>
 80067a4:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80067a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00c      	beq.n	80067c6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <osSemaphoreNew+0x11e>
          name = attr->name;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	61fb      	str	r3, [r7, #28]
 80067b8:	e001      	b.n	80067be <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80067ba:	2300      	movs	r3, #0
 80067bc:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80067be:	69f9      	ldr	r1, [r7, #28]
 80067c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80067c2:	f001 fb05 	bl	8007dd0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80067c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3728      	adds	r7, #40	@ 0x28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	200012a0 	.word	0x200012a0

080067d4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b088      	sub	sp, #32
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d103      	bne.n	80067f4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80067ec:	f06f 0303 	mvn.w	r3, #3
 80067f0:	61fb      	str	r3, [r7, #28]
 80067f2:	e04b      	b.n	800688c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067f4:	f3ef 8305 	mrs	r3, IPSR
 80067f8:	617b      	str	r3, [r7, #20]
  return(result);
 80067fa:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10f      	bne.n	8006820 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006800:	f3ef 8310 	mrs	r3, PRIMASK
 8006804:	613b      	str	r3, [r7, #16]
  return(result);
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d105      	bne.n	8006818 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800680c:	f3ef 8311 	mrs	r3, BASEPRI
 8006810:	60fb      	str	r3, [r7, #12]
  return(result);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d026      	beq.n	8006866 <osSemaphoreAcquire+0x92>
 8006818:	4b1f      	ldr	r3, [pc, #124]	@ (8006898 <osSemaphoreAcquire+0xc4>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b02      	cmp	r3, #2
 800681e:	d122      	bne.n	8006866 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8006826:	f06f 0303 	mvn.w	r3, #3
 800682a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800682c:	e02d      	b.n	800688a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800682e:	2300      	movs	r3, #0
 8006830:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006832:	f107 0308 	add.w	r3, r7, #8
 8006836:	461a      	mov	r2, r3
 8006838:	2100      	movs	r1, #0
 800683a:	69b8      	ldr	r0, [r7, #24]
 800683c:	f001 f8f2 	bl	8007a24 <xQueueReceiveFromISR>
 8006840:	4603      	mov	r3, r0
 8006842:	2b01      	cmp	r3, #1
 8006844:	d003      	beq.n	800684e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8006846:	f06f 0302 	mvn.w	r3, #2
 800684a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800684c:	e01d      	b.n	800688a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d01a      	beq.n	800688a <osSemaphoreAcquire+0xb6>
 8006854:	4b11      	ldr	r3, [pc, #68]	@ (800689c <osSemaphoreAcquire+0xc8>)
 8006856:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8006864:	e011      	b.n	800688a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006866:	6839      	ldr	r1, [r7, #0]
 8006868:	69b8      	ldr	r0, [r7, #24]
 800686a:	f000 ffc3 	bl	80077f4 <xQueueSemaphoreTake>
 800686e:	4603      	mov	r3, r0
 8006870:	2b01      	cmp	r3, #1
 8006872:	d00b      	beq.n	800688c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800687a:	f06f 0301 	mvn.w	r3, #1
 800687e:	61fb      	str	r3, [r7, #28]
 8006880:	e004      	b.n	800688c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8006882:	f06f 0302 	mvn.w	r3, #2
 8006886:	61fb      	str	r3, [r7, #28]
 8006888:	e000      	b.n	800688c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800688a:	bf00      	nop
      }
    }
  }

  return (stat);
 800688c:	69fb      	ldr	r3, [r7, #28]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3720      	adds	r7, #32
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	200012a0 	.word	0x200012a0
 800689c:	e000ed04 	.word	0xe000ed04

080068a0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b088      	sub	sp, #32
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80068ac:	2300      	movs	r3, #0
 80068ae:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d103      	bne.n	80068be <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80068b6:	f06f 0303 	mvn.w	r3, #3
 80068ba:	61fb      	str	r3, [r7, #28]
 80068bc:	e03e      	b.n	800693c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068be:	f3ef 8305 	mrs	r3, IPSR
 80068c2:	617b      	str	r3, [r7, #20]
  return(result);
 80068c4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10f      	bne.n	80068ea <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068ca:	f3ef 8310 	mrs	r3, PRIMASK
 80068ce:	613b      	str	r3, [r7, #16]
  return(result);
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d105      	bne.n	80068e2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068d6:	f3ef 8311 	mrs	r3, BASEPRI
 80068da:	60fb      	str	r3, [r7, #12]
  return(result);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d01e      	beq.n	8006920 <osSemaphoreRelease+0x80>
 80068e2:	4b19      	ldr	r3, [pc, #100]	@ (8006948 <osSemaphoreRelease+0xa8>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d11a      	bne.n	8006920 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80068ea:	2300      	movs	r3, #0
 80068ec:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80068ee:	f107 0308 	add.w	r3, r7, #8
 80068f2:	4619      	mov	r1, r3
 80068f4:	69b8      	ldr	r0, [r7, #24]
 80068f6:	f000 fdfc 	bl	80074f2 <xQueueGiveFromISR>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d003      	beq.n	8006908 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8006900:	f06f 0302 	mvn.w	r3, #2
 8006904:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006906:	e018      	b.n	800693a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d015      	beq.n	800693a <osSemaphoreRelease+0x9a>
 800690e:	4b0f      	ldr	r3, [pc, #60]	@ (800694c <osSemaphoreRelease+0xac>)
 8006910:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800691e:	e00c      	b.n	800693a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006920:	2300      	movs	r3, #0
 8006922:	2200      	movs	r2, #0
 8006924:	2100      	movs	r1, #0
 8006926:	69b8      	ldr	r0, [r7, #24]
 8006928:	f000 fc36 	bl	8007198 <xQueueGenericSend>
 800692c:	4603      	mov	r3, r0
 800692e:	2b01      	cmp	r3, #1
 8006930:	d004      	beq.n	800693c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8006932:	f06f 0302 	mvn.w	r3, #2
 8006936:	61fb      	str	r3, [r7, #28]
 8006938:	e000      	b.n	800693c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800693a:	bf00      	nop
    }
  }

  return (stat);
 800693c:	69fb      	ldr	r3, [r7, #28]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3720      	adds	r7, #32
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	200012a0 	.word	0x200012a0
 800694c:	e000ed04 	.word	0xe000ed04

08006950 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006950:	b580      	push	{r7, lr}
 8006952:	b08c      	sub	sp, #48	@ 0x30
 8006954:	af02      	add	r7, sp, #8
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800695c:	2300      	movs	r3, #0
 800695e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006960:	f3ef 8305 	mrs	r3, IPSR
 8006964:	61bb      	str	r3, [r7, #24]
  return(result);
 8006966:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006968:	2b00      	cmp	r3, #0
 800696a:	d16f      	bne.n	8006a4c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800696c:	f3ef 8310 	mrs	r3, PRIMASK
 8006970:	617b      	str	r3, [r7, #20]
  return(result);
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d105      	bne.n	8006984 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006978:	f3ef 8311 	mrs	r3, BASEPRI
 800697c:	613b      	str	r3, [r7, #16]
  return(result);
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d003      	beq.n	800698c <osMessageQueueNew+0x3c>
 8006984:	4b34      	ldr	r3, [pc, #208]	@ (8006a58 <osMessageQueueNew+0x108>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b02      	cmp	r3, #2
 800698a:	d05f      	beq.n	8006a4c <osMessageQueueNew+0xfc>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d05c      	beq.n	8006a4c <osMessageQueueNew+0xfc>
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d059      	beq.n	8006a4c <osMessageQueueNew+0xfc>
    mem = -1;
 8006998:	f04f 33ff 	mov.w	r3, #4294967295
 800699c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d029      	beq.n	80069f8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d012      	beq.n	80069d2 <osMessageQueueNew+0x82>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	2b4f      	cmp	r3, #79	@ 0x4f
 80069b2:	d90e      	bls.n	80069d2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00a      	beq.n	80069d2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	695a      	ldr	r2, [r3, #20]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	68b9      	ldr	r1, [r7, #8]
 80069c4:	fb01 f303 	mul.w	r3, r1, r3
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d302      	bcc.n	80069d2 <osMessageQueueNew+0x82>
        mem = 1;
 80069cc:	2301      	movs	r3, #1
 80069ce:	623b      	str	r3, [r7, #32]
 80069d0:	e014      	b.n	80069fc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d110      	bne.n	80069fc <osMessageQueueNew+0xac>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10c      	bne.n	80069fc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d108      	bne.n	80069fc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d104      	bne.n	80069fc <osMessageQueueNew+0xac>
          mem = 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	623b      	str	r3, [r7, #32]
 80069f6:	e001      	b.n	80069fc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80069f8:	2300      	movs	r3, #0
 80069fa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d10b      	bne.n	8006a1a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691a      	ldr	r2, [r3, #16]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	9100      	str	r1, [sp, #0]
 8006a0e:	68b9      	ldr	r1, [r7, #8]
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 fa5d 	bl	8006ed0 <xQueueGenericCreateStatic>
 8006a16:	6278      	str	r0, [r7, #36]	@ 0x24
 8006a18:	e008      	b.n	8006a2c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d105      	bne.n	8006a2c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006a20:	2200      	movs	r2, #0
 8006a22:	68b9      	ldr	r1, [r7, #8]
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 fada 	bl	8006fde <xQueueGenericCreate>
 8006a2a:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00c      	beq.n	8006a4c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <osMessageQueueNew+0xf0>
        name = attr->name;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	61fb      	str	r3, [r7, #28]
 8006a3e:	e001      	b.n	8006a44 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006a40:	2300      	movs	r3, #0
 8006a42:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006a44:	69f9      	ldr	r1, [r7, #28]
 8006a46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006a48:	f001 f9c2 	bl	8007dd0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3728      	adds	r7, #40	@ 0x28
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	200012a0 	.word	0x200012a0

08006a5c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b08a      	sub	sp, #40	@ 0x28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	603b      	str	r3, [r7, #0]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006a70:	2300      	movs	r3, #0
 8006a72:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a74:	f3ef 8305 	mrs	r3, IPSR
 8006a78:	61fb      	str	r3, [r7, #28]
  return(result);
 8006a7a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10f      	bne.n	8006aa0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a80:	f3ef 8310 	mrs	r3, PRIMASK
 8006a84:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d105      	bne.n	8006a98 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a8c:	f3ef 8311 	mrs	r3, BASEPRI
 8006a90:	617b      	str	r3, [r7, #20]
  return(result);
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d02c      	beq.n	8006af2 <osMessageQueuePut+0x96>
 8006a98:	4b28      	ldr	r3, [pc, #160]	@ (8006b3c <osMessageQueuePut+0xe0>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d128      	bne.n	8006af2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d005      	beq.n	8006ab2 <osMessageQueuePut+0x56>
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d002      	beq.n	8006ab2 <osMessageQueuePut+0x56>
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006ab2:	f06f 0303 	mvn.w	r3, #3
 8006ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ab8:	e039      	b.n	8006b2e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006aba:	2300      	movs	r3, #0
 8006abc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006abe:	f107 0210 	add.w	r2, r7, #16
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	68b9      	ldr	r1, [r7, #8]
 8006ac6:	6a38      	ldr	r0, [r7, #32]
 8006ac8:	f000 fc70 	bl	80073ac <xQueueGenericSendFromISR>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d003      	beq.n	8006ada <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006ad2:	f06f 0302 	mvn.w	r3, #2
 8006ad6:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ad8:	e029      	b.n	8006b2e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d026      	beq.n	8006b2e <osMessageQueuePut+0xd2>
 8006ae0:	4b17      	ldr	r3, [pc, #92]	@ (8006b40 <osMessageQueuePut+0xe4>)
 8006ae2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006af0:	e01d      	b.n	8006b2e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d002      	beq.n	8006afe <osMessageQueuePut+0xa2>
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d103      	bne.n	8006b06 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006afe:	f06f 0303 	mvn.w	r3, #3
 8006b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b04:	e014      	b.n	8006b30 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006b06:	2300      	movs	r3, #0
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	68b9      	ldr	r1, [r7, #8]
 8006b0c:	6a38      	ldr	r0, [r7, #32]
 8006b0e:	f000 fb43 	bl	8007198 <xQueueGenericSend>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d00b      	beq.n	8006b30 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006b1e:	f06f 0301 	mvn.w	r3, #1
 8006b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b24:	e004      	b.n	8006b30 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006b26:	f06f 0302 	mvn.w	r3, #2
 8006b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b2c:	e000      	b.n	8006b30 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b2e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3728      	adds	r7, #40	@ 0x28
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	200012a0 	.word	0x200012a0
 8006b40:	e000ed04 	.word	0xe000ed04

08006b44 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b08a      	sub	sp, #40	@ 0x28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
 8006b50:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b5a:	f3ef 8305 	mrs	r3, IPSR
 8006b5e:	61fb      	str	r3, [r7, #28]
  return(result);
 8006b60:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10f      	bne.n	8006b86 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b66:	f3ef 8310 	mrs	r3, PRIMASK
 8006b6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d105      	bne.n	8006b7e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b72:	f3ef 8311 	mrs	r3, BASEPRI
 8006b76:	617b      	str	r3, [r7, #20]
  return(result);
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d02c      	beq.n	8006bd8 <osMessageQueueGet+0x94>
 8006b7e:	4b28      	ldr	r3, [pc, #160]	@ (8006c20 <osMessageQueueGet+0xdc>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d128      	bne.n	8006bd8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b86:	6a3b      	ldr	r3, [r7, #32]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <osMessageQueueGet+0x54>
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <osMessageQueueGet+0x54>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006b98:	f06f 0303 	mvn.w	r3, #3
 8006b9c:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b9e:	e038      	b.n	8006c12 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006ba4:	f107 0310 	add.w	r3, r7, #16
 8006ba8:	461a      	mov	r2, r3
 8006baa:	68b9      	ldr	r1, [r7, #8]
 8006bac:	6a38      	ldr	r0, [r7, #32]
 8006bae:	f000 ff39 	bl	8007a24 <xQueueReceiveFromISR>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d003      	beq.n	8006bc0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006bb8:	f06f 0302 	mvn.w	r3, #2
 8006bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006bbe:	e028      	b.n	8006c12 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d025      	beq.n	8006c12 <osMessageQueueGet+0xce>
 8006bc6:	4b17      	ldr	r3, [pc, #92]	@ (8006c24 <osMessageQueueGet+0xe0>)
 8006bc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006bd6:	e01c      	b.n	8006c12 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d002      	beq.n	8006be4 <osMessageQueueGet+0xa0>
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d103      	bne.n	8006bec <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006be4:	f06f 0303 	mvn.w	r3, #3
 8006be8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bea:	e013      	b.n	8006c14 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006bec:	683a      	ldr	r2, [r7, #0]
 8006bee:	68b9      	ldr	r1, [r7, #8]
 8006bf0:	6a38      	ldr	r0, [r7, #32]
 8006bf2:	f000 fd17 	bl	8007624 <xQueueReceive>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d00b      	beq.n	8006c14 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006c02:	f06f 0301 	mvn.w	r3, #1
 8006c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c08:	e004      	b.n	8006c14 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006c0a:	f06f 0302 	mvn.w	r3, #2
 8006c0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c10:	e000      	b.n	8006c14 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c12:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3728      	adds	r7, #40	@ 0x28
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	200012a0 	.word	0x200012a0
 8006c24:	e000ed04 	.word	0xe000ed04

08006c28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4a07      	ldr	r2, [pc, #28]	@ (8006c54 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	4a06      	ldr	r2, [pc, #24]	@ (8006c58 <vApplicationGetIdleTaskMemory+0x30>)
 8006c3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2280      	movs	r2, #128	@ 0x80
 8006c44:	601a      	str	r2, [r3, #0]
}
 8006c46:	bf00      	nop
 8006c48:	3714      	adds	r7, #20
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	200012a4 	.word	0x200012a4
 8006c58:	2000134c 	.word	0x2000134c

08006c5c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	4a07      	ldr	r2, [pc, #28]	@ (8006c88 <vApplicationGetTimerTaskMemory+0x2c>)
 8006c6c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	4a06      	ldr	r2, [pc, #24]	@ (8006c8c <vApplicationGetTimerTaskMemory+0x30>)
 8006c72:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006c7a:	601a      	str	r2, [r3, #0]
}
 8006c7c:	bf00      	nop
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	2000154c 	.word	0x2000154c
 8006c8c:	200015f4 	.word	0x200015f4

08006c90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f103 0208 	add.w	r2, r3, #8
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f103 0208 	add.w	r2, r3, #8
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f103 0208 	add.w	r2, r3, #8
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006cde:	bf00      	nop
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cea:	b480      	push	{r7}
 8006cec:	b085      	sub	sp, #20
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	683a      	ldr	r2, [r7, #0]
 8006d0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	1c5a      	adds	r2, r3, #1
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	601a      	str	r2, [r3, #0]
}
 8006d26:	bf00      	nop
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d32:	b480      	push	{r7}
 8006d34:	b085      	sub	sp, #20
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d48:	d103      	bne.n	8006d52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	60fb      	str	r3, [r7, #12]
 8006d50:	e00c      	b.n	8006d6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	3308      	adds	r3, #8
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	e002      	b.n	8006d60 <vListInsert+0x2e>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d2f6      	bcs.n	8006d5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	683a      	ldr	r2, [r7, #0]
 8006d7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	601a      	str	r2, [r3, #0]
}
 8006d98:	bf00      	nop
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	6892      	ldr	r2, [r2, #8]
 8006dba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	6852      	ldr	r2, [r2, #4]
 8006dc4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d103      	bne.n	8006dd8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	689a      	ldr	r2, [r3, #8]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	1e5a      	subs	r2, r3, #1
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3714      	adds	r7, #20
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10d      	bne.n	8006e28 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e10:	b672      	cpsid	i
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	b662      	cpsie	i
 8006e20:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e22:	bf00      	nop
 8006e24:	bf00      	nop
 8006e26:	e7fd      	b.n	8006e24 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006e28:	f002 fd30 	bl	800988c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e34:	68f9      	ldr	r1, [r7, #12]
 8006e36:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006e38:	fb01 f303 	mul.w	r3, r1, r3
 8006e3c:	441a      	add	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	68f9      	ldr	r1, [r7, #12]
 8006e5c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006e5e:	fb01 f303 	mul.w	r3, r1, r3
 8006e62:	441a      	add	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	22ff      	movs	r2, #255	@ 0xff
 8006e6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	22ff      	movs	r2, #255	@ 0xff
 8006e74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d114      	bne.n	8006ea8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d01a      	beq.n	8006ebc <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	3310      	adds	r3, #16
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f001 fcd2 	bl	8008834 <xTaskRemoveFromEventList>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d012      	beq.n	8006ebc <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006e96:	4b0d      	ldr	r3, [pc, #52]	@ (8006ecc <xQueueGenericReset+0xd4>)
 8006e98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	e009      	b.n	8006ebc <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	3310      	adds	r3, #16
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7ff feef 	bl	8006c90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	3324      	adds	r3, #36	@ 0x24
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7ff feea 	bl	8006c90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ebc:	f002 fd1c 	bl	80098f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006ec0:	2301      	movs	r3, #1
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	e000ed04 	.word	0xe000ed04

08006ed0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b08e      	sub	sp, #56	@ 0x38
 8006ed4:	af02      	add	r7, sp, #8
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10d      	bne.n	8006f00 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8006ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee8:	b672      	cpsid	i
 8006eea:	f383 8811 	msr	BASEPRI, r3
 8006eee:	f3bf 8f6f 	isb	sy
 8006ef2:	f3bf 8f4f 	dsb	sy
 8006ef6:	b662      	cpsie	i
 8006ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006efa:	bf00      	nop
 8006efc:	bf00      	nop
 8006efe:	e7fd      	b.n	8006efc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10d      	bne.n	8006f22 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8006f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f0a:	b672      	cpsid	i
 8006f0c:	f383 8811 	msr	BASEPRI, r3
 8006f10:	f3bf 8f6f 	isb	sy
 8006f14:	f3bf 8f4f 	dsb	sy
 8006f18:	b662      	cpsie	i
 8006f1a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006f1c:	bf00      	nop
 8006f1e:	bf00      	nop
 8006f20:	e7fd      	b.n	8006f1e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <xQueueGenericCreateStatic+0x5e>
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d001      	beq.n	8006f32 <xQueueGenericCreateStatic+0x62>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e000      	b.n	8006f34 <xQueueGenericCreateStatic+0x64>
 8006f32:	2300      	movs	r3, #0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10d      	bne.n	8006f54 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8006f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f3c:	b672      	cpsid	i
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	b662      	cpsie	i
 8006f4c:	623b      	str	r3, [r7, #32]
}
 8006f4e:	bf00      	nop
 8006f50:	bf00      	nop
 8006f52:	e7fd      	b.n	8006f50 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d102      	bne.n	8006f60 <xQueueGenericCreateStatic+0x90>
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d101      	bne.n	8006f64 <xQueueGenericCreateStatic+0x94>
 8006f60:	2301      	movs	r3, #1
 8006f62:	e000      	b.n	8006f66 <xQueueGenericCreateStatic+0x96>
 8006f64:	2300      	movs	r3, #0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10d      	bne.n	8006f86 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8006f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f6e:	b672      	cpsid	i
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	b662      	cpsie	i
 8006f7e:	61fb      	str	r3, [r7, #28]
}
 8006f80:	bf00      	nop
 8006f82:	bf00      	nop
 8006f84:	e7fd      	b.n	8006f82 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006f86:	2350      	movs	r3, #80	@ 0x50
 8006f88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b50      	cmp	r3, #80	@ 0x50
 8006f8e:	d00d      	beq.n	8006fac <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8006f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f94:	b672      	cpsid	i
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	b662      	cpsie	i
 8006fa4:	61bb      	str	r3, [r7, #24]
}
 8006fa6:	bf00      	nop
 8006fa8:	bf00      	nop
 8006faa:	e7fd      	b.n	8006fa8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006fac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00d      	beq.n	8006fd4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fc0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	68b9      	ldr	r1, [r7, #8]
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 f848 	bl	8007064 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3730      	adds	r7, #48	@ 0x30
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b08a      	sub	sp, #40	@ 0x28
 8006fe2:	af02      	add	r7, sp, #8
 8006fe4:	60f8      	str	r0, [r7, #12]
 8006fe6:	60b9      	str	r1, [r7, #8]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10d      	bne.n	800700e <xQueueGenericCreate+0x30>
	__asm volatile
 8006ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff6:	b672      	cpsid	i
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	b662      	cpsie	i
 8007006:	613b      	str	r3, [r7, #16]
}
 8007008:	bf00      	nop
 800700a:	bf00      	nop
 800700c:	e7fd      	b.n	800700a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d102      	bne.n	800701a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007014:	2300      	movs	r3, #0
 8007016:	61fb      	str	r3, [r7, #28]
 8007018:	e004      	b.n	8007024 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	fb02 f303 	mul.w	r3, r2, r3
 8007022:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	3350      	adds	r3, #80	@ 0x50
 8007028:	4618      	mov	r0, r3
 800702a:	f002 fd5d 	bl	8009ae8 <pvPortMalloc>
 800702e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d011      	beq.n	800705a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	3350      	adds	r3, #80	@ 0x50
 800703e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007048:	79fa      	ldrb	r2, [r7, #7]
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	4613      	mov	r3, r2
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	68b9      	ldr	r1, [r7, #8]
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f000 f805 	bl	8007064 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800705a:	69bb      	ldr	r3, [r7, #24]
	}
 800705c:	4618      	mov	r0, r3
 800705e:	3720      	adds	r7, #32
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
 8007070:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d103      	bne.n	8007080 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	69ba      	ldr	r2, [r7, #24]
 800707c:	601a      	str	r2, [r3, #0]
 800707e:	e002      	b.n	8007086 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007092:	2101      	movs	r1, #1
 8007094:	69b8      	ldr	r0, [r7, #24]
 8007096:	f7ff feaf 	bl	8006df8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	78fa      	ldrb	r2, [r7, #3]
 800709e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80070a2:	bf00      	nop
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b08a      	sub	sp, #40	@ 0x28
 80070ae:	af02      	add	r7, sp, #8
 80070b0:	60f8      	str	r0, [r7, #12]
 80070b2:	60b9      	str	r1, [r7, #8]
 80070b4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10d      	bne.n	80070d8 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c0:	b672      	cpsid	i
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	b662      	cpsie	i
 80070d0:	61bb      	str	r3, [r7, #24]
}
 80070d2:	bf00      	nop
 80070d4:	bf00      	nop
 80070d6:	e7fd      	b.n	80070d4 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d90d      	bls.n	80070fc <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e4:	b672      	cpsid	i
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	b662      	cpsie	i
 80070f4:	617b      	str	r3, [r7, #20]
}
 80070f6:	bf00      	nop
 80070f8:	bf00      	nop
 80070fa:	e7fd      	b.n	80070f8 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80070fc:	2302      	movs	r3, #2
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	2100      	movs	r1, #0
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f7ff fee2 	bl	8006ed0 <xQueueGenericCreateStatic>
 800710c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d002      	beq.n	800711a <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800711a:	69fb      	ldr	r3, [r7, #28]
	}
 800711c:	4618      	mov	r0, r3
 800711e:	3720      	adds	r7, #32
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10d      	bne.n	8007150 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 8007134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007138:	b672      	cpsid	i
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	b662      	cpsie	i
 8007148:	613b      	str	r3, [r7, #16]
}
 800714a:	bf00      	nop
 800714c:	bf00      	nop
 800714e:	e7fd      	b.n	800714c <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	429a      	cmp	r2, r3
 8007156:	d90d      	bls.n	8007174 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 8007158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800715c:	b672      	cpsid	i
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	b662      	cpsie	i
 800716c:	60fb      	str	r3, [r7, #12]
}
 800716e:	bf00      	nop
 8007170:	bf00      	nop
 8007172:	e7fd      	b.n	8007170 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007174:	2202      	movs	r2, #2
 8007176:	2100      	movs	r1, #0
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7ff ff30 	bl	8006fde <xQueueGenericCreate>
 800717e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d002      	beq.n	800718c <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	683a      	ldr	r2, [r7, #0]
 800718a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800718c:	697b      	ldr	r3, [r7, #20]
	}
 800718e:	4618      	mov	r0, r3
 8007190:	3718      	adds	r7, #24
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
	...

08007198 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b08e      	sub	sp, #56	@ 0x38
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
 80071a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80071a6:	2300      	movs	r3, #0
 80071a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80071ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10d      	bne.n	80071d0 <xQueueGenericSend+0x38>
	__asm volatile
 80071b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b8:	b672      	cpsid	i
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	b662      	cpsie	i
 80071c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80071ca:	bf00      	nop
 80071cc:	bf00      	nop
 80071ce:	e7fd      	b.n	80071cc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d103      	bne.n	80071de <xQueueGenericSend+0x46>
 80071d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <xQueueGenericSend+0x4a>
 80071de:	2301      	movs	r3, #1
 80071e0:	e000      	b.n	80071e4 <xQueueGenericSend+0x4c>
 80071e2:	2300      	movs	r3, #0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10d      	bne.n	8007204 <xQueueGenericSend+0x6c>
	__asm volatile
 80071e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ec:	b672      	cpsid	i
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	b662      	cpsie	i
 80071fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80071fe:	bf00      	nop
 8007200:	bf00      	nop
 8007202:	e7fd      	b.n	8007200 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	2b02      	cmp	r3, #2
 8007208:	d103      	bne.n	8007212 <xQueueGenericSend+0x7a>
 800720a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800720e:	2b01      	cmp	r3, #1
 8007210:	d101      	bne.n	8007216 <xQueueGenericSend+0x7e>
 8007212:	2301      	movs	r3, #1
 8007214:	e000      	b.n	8007218 <xQueueGenericSend+0x80>
 8007216:	2300      	movs	r3, #0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10d      	bne.n	8007238 <xQueueGenericSend+0xa0>
	__asm volatile
 800721c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007220:	b672      	cpsid	i
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	b662      	cpsie	i
 8007230:	623b      	str	r3, [r7, #32]
}
 8007232:	bf00      	nop
 8007234:	bf00      	nop
 8007236:	e7fd      	b.n	8007234 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007238:	f001 fcca 	bl	8008bd0 <xTaskGetSchedulerState>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d102      	bne.n	8007248 <xQueueGenericSend+0xb0>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <xQueueGenericSend+0xb4>
 8007248:	2301      	movs	r3, #1
 800724a:	e000      	b.n	800724e <xQueueGenericSend+0xb6>
 800724c:	2300      	movs	r3, #0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10d      	bne.n	800726e <xQueueGenericSend+0xd6>
	__asm volatile
 8007252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007256:	b672      	cpsid	i
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	b662      	cpsie	i
 8007266:	61fb      	str	r3, [r7, #28]
}
 8007268:	bf00      	nop
 800726a:	bf00      	nop
 800726c:	e7fd      	b.n	800726a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800726e:	f002 fb0d 	bl	800988c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007274:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800727a:	429a      	cmp	r2, r3
 800727c:	d302      	bcc.n	8007284 <xQueueGenericSend+0xec>
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	2b02      	cmp	r3, #2
 8007282:	d129      	bne.n	80072d8 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	68b9      	ldr	r1, [r7, #8]
 8007288:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800728a:	f000 fc91 	bl	8007bb0 <prvCopyDataToQueue>
 800728e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007294:	2b00      	cmp	r3, #0
 8007296:	d010      	beq.n	80072ba <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729a:	3324      	adds	r3, #36	@ 0x24
 800729c:	4618      	mov	r0, r3
 800729e:	f001 fac9 	bl	8008834 <xTaskRemoveFromEventList>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d013      	beq.n	80072d0 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80072a8:	4b3f      	ldr	r3, [pc, #252]	@ (80073a8 <xQueueGenericSend+0x210>)
 80072aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072ae:	601a      	str	r2, [r3, #0]
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	e00a      	b.n	80072d0 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80072ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d007      	beq.n	80072d0 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80072c0:	4b39      	ldr	r3, [pc, #228]	@ (80073a8 <xQueueGenericSend+0x210>)
 80072c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072c6:	601a      	str	r2, [r3, #0]
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80072d0:	f002 fb12 	bl	80098f8 <vPortExitCritical>
				return pdPASS;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e063      	b.n	80073a0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d103      	bne.n	80072e6 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80072de:	f002 fb0b 	bl	80098f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80072e2:	2300      	movs	r3, #0
 80072e4:	e05c      	b.n	80073a0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d106      	bne.n	80072fa <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072ec:	f107 0314 	add.w	r3, r7, #20
 80072f0:	4618      	mov	r0, r3
 80072f2:	f001 fb05 	bl	8008900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072f6:	2301      	movs	r3, #1
 80072f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072fa:	f002 fafd 	bl	80098f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072fe:	f001 f861 	bl	80083c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007302:	f002 fac3 	bl	800988c <vPortEnterCritical>
 8007306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007308:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800730c:	b25b      	sxtb	r3, r3
 800730e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007312:	d103      	bne.n	800731c <xQueueGenericSend+0x184>
 8007314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007316:	2200      	movs	r2, #0
 8007318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800731c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007322:	b25b      	sxtb	r3, r3
 8007324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007328:	d103      	bne.n	8007332 <xQueueGenericSend+0x19a>
 800732a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007332:	f002 fae1 	bl	80098f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007336:	1d3a      	adds	r2, r7, #4
 8007338:	f107 0314 	add.w	r3, r7, #20
 800733c:	4611      	mov	r1, r2
 800733e:	4618      	mov	r0, r3
 8007340:	f001 faf4 	bl	800892c <xTaskCheckForTimeOut>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d124      	bne.n	8007394 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800734a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800734c:	f000 fd28 	bl	8007da0 <prvIsQueueFull>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d018      	beq.n	8007388 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007358:	3310      	adds	r3, #16
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	4611      	mov	r1, r2
 800735e:	4618      	mov	r0, r3
 8007360:	f001 fa12 	bl	8008788 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007364:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007366:	f000 fcb3 	bl	8007cd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800736a:	f001 f839 	bl	80083e0 <xTaskResumeAll>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	f47f af7c 	bne.w	800726e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8007376:	4b0c      	ldr	r3, [pc, #48]	@ (80073a8 <xQueueGenericSend+0x210>)
 8007378:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	e772      	b.n	800726e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007388:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800738a:	f000 fca1 	bl	8007cd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800738e:	f001 f827 	bl	80083e0 <xTaskResumeAll>
 8007392:	e76c      	b.n	800726e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007394:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007396:	f000 fc9b 	bl	8007cd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800739a:	f001 f821 	bl	80083e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800739e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3738      	adds	r7, #56	@ 0x38
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	e000ed04 	.word	0xe000ed04

080073ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b08e      	sub	sp, #56	@ 0x38
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
 80073b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80073be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10d      	bne.n	80073e0 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80073c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c8:	b672      	cpsid	i
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	b662      	cpsie	i
 80073d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80073da:	bf00      	nop
 80073dc:	bf00      	nop
 80073de:	e7fd      	b.n	80073dc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d103      	bne.n	80073ee <xQueueGenericSendFromISR+0x42>
 80073e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <xQueueGenericSendFromISR+0x46>
 80073ee:	2301      	movs	r3, #1
 80073f0:	e000      	b.n	80073f4 <xQueueGenericSendFromISR+0x48>
 80073f2:	2300      	movs	r3, #0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10d      	bne.n	8007414 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80073f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fc:	b672      	cpsid	i
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	b662      	cpsie	i
 800740c:	623b      	str	r3, [r7, #32]
}
 800740e:	bf00      	nop
 8007410:	bf00      	nop
 8007412:	e7fd      	b.n	8007410 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	2b02      	cmp	r3, #2
 8007418:	d103      	bne.n	8007422 <xQueueGenericSendFromISR+0x76>
 800741a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800741e:	2b01      	cmp	r3, #1
 8007420:	d101      	bne.n	8007426 <xQueueGenericSendFromISR+0x7a>
 8007422:	2301      	movs	r3, #1
 8007424:	e000      	b.n	8007428 <xQueueGenericSendFromISR+0x7c>
 8007426:	2300      	movs	r3, #0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10d      	bne.n	8007448 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007430:	b672      	cpsid	i
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	b662      	cpsie	i
 8007440:	61fb      	str	r3, [r7, #28]
}
 8007442:	bf00      	nop
 8007444:	bf00      	nop
 8007446:	e7fd      	b.n	8007444 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007448:	f002 fb08 	bl	8009a5c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800744c:	f3ef 8211 	mrs	r2, BASEPRI
 8007450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007454:	b672      	cpsid	i
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	b662      	cpsie	i
 8007464:	61ba      	str	r2, [r7, #24]
 8007466:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007468:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800746a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800746c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007474:	429a      	cmp	r2, r3
 8007476:	d302      	bcc.n	800747e <xQueueGenericSendFromISR+0xd2>
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2b02      	cmp	r3, #2
 800747c:	d12c      	bne.n	80074d8 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800747e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007480:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007484:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007488:	683a      	ldr	r2, [r7, #0]
 800748a:	68b9      	ldr	r1, [r7, #8]
 800748c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800748e:	f000 fb8f 	bl	8007bb0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007492:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8007496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749a:	d112      	bne.n	80074c2 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800749c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d016      	beq.n	80074d2 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a6:	3324      	adds	r3, #36	@ 0x24
 80074a8:	4618      	mov	r0, r3
 80074aa:	f001 f9c3 	bl	8008834 <xTaskRemoveFromEventList>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00e      	beq.n	80074d2 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00b      	beq.n	80074d2 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	601a      	str	r2, [r3, #0]
 80074c0:	e007      	b.n	80074d2 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80074c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80074c6:	3301      	adds	r3, #1
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	b25a      	sxtb	r2, r3
 80074cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80074d2:	2301      	movs	r3, #1
 80074d4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80074d6:	e001      	b.n	80074dc <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80074d8:	2300      	movs	r3, #0
 80074da:	637b      	str	r3, [r7, #52]	@ 0x34
 80074dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074de:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80074e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80074e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3738      	adds	r7, #56	@ 0x38
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b08e      	sub	sp, #56	@ 0x38
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10d      	bne.n	8007522 <xQueueGiveFromISR+0x30>
	__asm volatile
 8007506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750a:	b672      	cpsid	i
 800750c:	f383 8811 	msr	BASEPRI, r3
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	b662      	cpsie	i
 800751a:	623b      	str	r3, [r7, #32]
}
 800751c:	bf00      	nop
 800751e:	bf00      	nop
 8007520:	e7fd      	b.n	800751e <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00d      	beq.n	8007546 <xQueueGiveFromISR+0x54>
	__asm volatile
 800752a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752e:	b672      	cpsid	i
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	b662      	cpsie	i
 800753e:	61fb      	str	r3, [r7, #28]
}
 8007540:	bf00      	nop
 8007542:	bf00      	nop
 8007544:	e7fd      	b.n	8007542 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d103      	bne.n	8007556 <xQueueGiveFromISR+0x64>
 800754e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <xQueueGiveFromISR+0x68>
 8007556:	2301      	movs	r3, #1
 8007558:	e000      	b.n	800755c <xQueueGiveFromISR+0x6a>
 800755a:	2300      	movs	r3, #0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10d      	bne.n	800757c <xQueueGiveFromISR+0x8a>
	__asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007564:	b672      	cpsid	i
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	b662      	cpsie	i
 8007574:	61bb      	str	r3, [r7, #24]
}
 8007576:	bf00      	nop
 8007578:	bf00      	nop
 800757a:	e7fd      	b.n	8007578 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800757c:	f002 fa6e 	bl	8009a5c <vPortValidateInterruptPriority>
	__asm volatile
 8007580:	f3ef 8211 	mrs	r2, BASEPRI
 8007584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007588:	b672      	cpsid	i
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	b662      	cpsie	i
 8007598:	617a      	str	r2, [r7, #20]
 800759a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800759c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800759e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a4:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80075a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d22b      	bcs.n	8007608 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80075b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075bc:	1c5a      	adds	r2, r3, #1
 80075be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c0:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80075c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ca:	d112      	bne.n	80075f2 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d016      	beq.n	8007602 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d6:	3324      	adds	r3, #36	@ 0x24
 80075d8:	4618      	mov	r0, r3
 80075da:	f001 f92b 	bl	8008834 <xTaskRemoveFromEventList>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00e      	beq.n	8007602 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00b      	beq.n	8007602 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	2201      	movs	r2, #1
 80075ee:	601a      	str	r2, [r3, #0]
 80075f0:	e007      	b.n	8007602 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80075f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075f6:	3301      	adds	r3, #1
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	b25a      	sxtb	r2, r3
 80075fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007602:	2301      	movs	r3, #1
 8007604:	637b      	str	r3, [r7, #52]	@ 0x34
 8007606:	e001      	b.n	800760c <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007608:	2300      	movs	r3, #0
 800760a:	637b      	str	r3, [r7, #52]	@ 0x34
 800760c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800760e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f383 8811 	msr	BASEPRI, r3
}
 8007616:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800761a:	4618      	mov	r0, r3
 800761c:	3738      	adds	r7, #56	@ 0x38
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
	...

08007624 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b08c      	sub	sp, #48	@ 0x30
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007630:	2300      	movs	r3, #0
 8007632:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10d      	bne.n	800765a <xQueueReceive+0x36>
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007642:	b672      	cpsid	i
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	b662      	cpsie	i
 8007652:	623b      	str	r3, [r7, #32]
}
 8007654:	bf00      	nop
 8007656:	bf00      	nop
 8007658:	e7fd      	b.n	8007656 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d103      	bne.n	8007668 <xQueueReceive+0x44>
 8007660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <xQueueReceive+0x48>
 8007668:	2301      	movs	r3, #1
 800766a:	e000      	b.n	800766e <xQueueReceive+0x4a>
 800766c:	2300      	movs	r3, #0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10d      	bne.n	800768e <xQueueReceive+0x6a>
	__asm volatile
 8007672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007676:	b672      	cpsid	i
 8007678:	f383 8811 	msr	BASEPRI, r3
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	b662      	cpsie	i
 8007686:	61fb      	str	r3, [r7, #28]
}
 8007688:	bf00      	nop
 800768a:	bf00      	nop
 800768c:	e7fd      	b.n	800768a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800768e:	f001 fa9f 	bl	8008bd0 <xTaskGetSchedulerState>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d102      	bne.n	800769e <xQueueReceive+0x7a>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d101      	bne.n	80076a2 <xQueueReceive+0x7e>
 800769e:	2301      	movs	r3, #1
 80076a0:	e000      	b.n	80076a4 <xQueueReceive+0x80>
 80076a2:	2300      	movs	r3, #0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10d      	bne.n	80076c4 <xQueueReceive+0xa0>
	__asm volatile
 80076a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ac:	b672      	cpsid	i
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	b662      	cpsie	i
 80076bc:	61bb      	str	r3, [r7, #24]
}
 80076be:	bf00      	nop
 80076c0:	bf00      	nop
 80076c2:	e7fd      	b.n	80076c0 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076c4:	f002 f8e2 	bl	800988c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076cc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d01f      	beq.n	8007714 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80076d4:	68b9      	ldr	r1, [r7, #8]
 80076d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076d8:	f000 fad4 	bl	8007c84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076de:	1e5a      	subs	r2, r3, #1
 80076e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00f      	beq.n	800770c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ee:	3310      	adds	r3, #16
 80076f0:	4618      	mov	r0, r3
 80076f2:	f001 f89f 	bl	8008834 <xTaskRemoveFromEventList>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d007      	beq.n	800770c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076fc:	4b3c      	ldr	r3, [pc, #240]	@ (80077f0 <xQueueReceive+0x1cc>)
 80076fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007702:	601a      	str	r2, [r3, #0]
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800770c:	f002 f8f4 	bl	80098f8 <vPortExitCritical>
				return pdPASS;
 8007710:	2301      	movs	r3, #1
 8007712:	e069      	b.n	80077e8 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d103      	bne.n	8007722 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800771a:	f002 f8ed 	bl	80098f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800771e:	2300      	movs	r3, #0
 8007720:	e062      	b.n	80077e8 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007724:	2b00      	cmp	r3, #0
 8007726:	d106      	bne.n	8007736 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007728:	f107 0310 	add.w	r3, r7, #16
 800772c:	4618      	mov	r0, r3
 800772e:	f001 f8e7 	bl	8008900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007732:	2301      	movs	r3, #1
 8007734:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007736:	f002 f8df 	bl	80098f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800773a:	f000 fe43 	bl	80083c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800773e:	f002 f8a5 	bl	800988c <vPortEnterCritical>
 8007742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007744:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007748:	b25b      	sxtb	r3, r3
 800774a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774e:	d103      	bne.n	8007758 <xQueueReceive+0x134>
 8007750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007752:	2200      	movs	r2, #0
 8007754:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800775a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800775e:	b25b      	sxtb	r3, r3
 8007760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007764:	d103      	bne.n	800776e <xQueueReceive+0x14a>
 8007766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800776e:	f002 f8c3 	bl	80098f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007772:	1d3a      	adds	r2, r7, #4
 8007774:	f107 0310 	add.w	r3, r7, #16
 8007778:	4611      	mov	r1, r2
 800777a:	4618      	mov	r0, r3
 800777c:	f001 f8d6 	bl	800892c <xTaskCheckForTimeOut>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d123      	bne.n	80077ce <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007786:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007788:	f000 faf4 	bl	8007d74 <prvIsQueueEmpty>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d017      	beq.n	80077c2 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007794:	3324      	adds	r3, #36	@ 0x24
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	4611      	mov	r1, r2
 800779a:	4618      	mov	r0, r3
 800779c:	f000 fff4 	bl	8008788 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077a2:	f000 fa95 	bl	8007cd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077a6:	f000 fe1b 	bl	80083e0 <xTaskResumeAll>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d189      	bne.n	80076c4 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80077b0:	4b0f      	ldr	r3, [pc, #60]	@ (80077f0 <xQueueReceive+0x1cc>)
 80077b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077b6:	601a      	str	r2, [r3, #0]
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	e780      	b.n	80076c4 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80077c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077c4:	f000 fa84 	bl	8007cd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077c8:	f000 fe0a 	bl	80083e0 <xTaskResumeAll>
 80077cc:	e77a      	b.n	80076c4 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80077ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077d0:	f000 fa7e 	bl	8007cd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077d4:	f000 fe04 	bl	80083e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077da:	f000 facb 	bl	8007d74 <prvIsQueueEmpty>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f43f af6f 	beq.w	80076c4 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80077e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3730      	adds	r7, #48	@ 0x30
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	e000ed04 	.word	0xe000ed04

080077f4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b08e      	sub	sp, #56	@ 0x38
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80077fe:	2300      	movs	r3, #0
 8007800:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007806:	2300      	movs	r3, #0
 8007808:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800780a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10d      	bne.n	800782c <xQueueSemaphoreTake+0x38>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007814:	b672      	cpsid	i
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	b662      	cpsie	i
 8007824:	623b      	str	r3, [r7, #32]
}
 8007826:	bf00      	nop
 8007828:	bf00      	nop
 800782a:	e7fd      	b.n	8007828 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800782c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800782e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00d      	beq.n	8007850 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8007834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007838:	b672      	cpsid	i
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	b662      	cpsie	i
 8007848:	61fb      	str	r3, [r7, #28]
}
 800784a:	bf00      	nop
 800784c:	bf00      	nop
 800784e:	e7fd      	b.n	800784c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007850:	f001 f9be 	bl	8008bd0 <xTaskGetSchedulerState>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d102      	bne.n	8007860 <xQueueSemaphoreTake+0x6c>
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d101      	bne.n	8007864 <xQueueSemaphoreTake+0x70>
 8007860:	2301      	movs	r3, #1
 8007862:	e000      	b.n	8007866 <xQueueSemaphoreTake+0x72>
 8007864:	2300      	movs	r3, #0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10d      	bne.n	8007886 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800786e:	b672      	cpsid	i
 8007870:	f383 8811 	msr	BASEPRI, r3
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	b662      	cpsie	i
 800787e:	61bb      	str	r3, [r7, #24]
}
 8007880:	bf00      	nop
 8007882:	bf00      	nop
 8007884:	e7fd      	b.n	8007882 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007886:	f002 f801 	bl	800988c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800788a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800788c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800788e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007892:	2b00      	cmp	r3, #0
 8007894:	d024      	beq.n	80078e0 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007898:	1e5a      	subs	r2, r3, #1
 800789a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800789c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800789e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d104      	bne.n	80078b0 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80078a6:	f001 fb15 	bl	8008ed4 <pvTaskIncrementMutexHeldCount>
 80078aa:	4602      	mov	r2, r0
 80078ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ae:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00f      	beq.n	80078d8 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ba:	3310      	adds	r3, #16
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 ffb9 	bl	8008834 <xTaskRemoveFromEventList>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d007      	beq.n	80078d8 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078c8:	4b55      	ldr	r3, [pc, #340]	@ (8007a20 <xQueueSemaphoreTake+0x22c>)
 80078ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078ce:	601a      	str	r2, [r3, #0]
 80078d0:	f3bf 8f4f 	dsb	sy
 80078d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078d8:	f002 f80e 	bl	80098f8 <vPortExitCritical>
				return pdPASS;
 80078dc:	2301      	movs	r3, #1
 80078de:	e09a      	b.n	8007a16 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d114      	bne.n	8007910 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80078e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00d      	beq.n	8007908 <xQueueSemaphoreTake+0x114>
	__asm volatile
 80078ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f0:	b672      	cpsid	i
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	b662      	cpsie	i
 8007900:	617b      	str	r3, [r7, #20]
}
 8007902:	bf00      	nop
 8007904:	bf00      	nop
 8007906:	e7fd      	b.n	8007904 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007908:	f001 fff6 	bl	80098f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800790c:	2300      	movs	r3, #0
 800790e:	e082      	b.n	8007a16 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007912:	2b00      	cmp	r3, #0
 8007914:	d106      	bne.n	8007924 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007916:	f107 030c 	add.w	r3, r7, #12
 800791a:	4618      	mov	r0, r3
 800791c:	f000 fff0 	bl	8008900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007920:	2301      	movs	r3, #1
 8007922:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007924:	f001 ffe8 	bl	80098f8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007928:	f000 fd4c 	bl	80083c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800792c:	f001 ffae 	bl	800988c <vPortEnterCritical>
 8007930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007932:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007936:	b25b      	sxtb	r3, r3
 8007938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793c:	d103      	bne.n	8007946 <xQueueSemaphoreTake+0x152>
 800793e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007940:	2200      	movs	r2, #0
 8007942:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007948:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800794c:	b25b      	sxtb	r3, r3
 800794e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007952:	d103      	bne.n	800795c <xQueueSemaphoreTake+0x168>
 8007954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007956:	2200      	movs	r2, #0
 8007958:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800795c:	f001 ffcc 	bl	80098f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007960:	463a      	mov	r2, r7
 8007962:	f107 030c 	add.w	r3, r7, #12
 8007966:	4611      	mov	r1, r2
 8007968:	4618      	mov	r0, r3
 800796a:	f000 ffdf 	bl	800892c <xTaskCheckForTimeOut>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d132      	bne.n	80079da <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007974:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007976:	f000 f9fd 	bl	8007d74 <prvIsQueueEmpty>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d026      	beq.n	80079ce <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d109      	bne.n	800799c <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8007988:	f001 ff80 	bl	800988c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800798c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	4618      	mov	r0, r3
 8007992:	f001 f93b 	bl	8008c0c <xTaskPriorityInherit>
 8007996:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007998:	f001 ffae 	bl	80098f8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800799c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800799e:	3324      	adds	r3, #36	@ 0x24
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	4611      	mov	r1, r2
 80079a4:	4618      	mov	r0, r3
 80079a6:	f000 feef 	bl	8008788 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80079aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079ac:	f000 f990 	bl	8007cd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80079b0:	f000 fd16 	bl	80083e0 <xTaskResumeAll>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f47f af65 	bne.w	8007886 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80079bc:	4b18      	ldr	r3, [pc, #96]	@ (8007a20 <xQueueSemaphoreTake+0x22c>)
 80079be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	e75b      	b.n	8007886 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80079ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079d0:	f000 f97e 	bl	8007cd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079d4:	f000 fd04 	bl	80083e0 <xTaskResumeAll>
 80079d8:	e755      	b.n	8007886 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80079da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079dc:	f000 f978 	bl	8007cd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079e0:	f000 fcfe 	bl	80083e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079e6:	f000 f9c5 	bl	8007d74 <prvIsQueueEmpty>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f43f af4a 	beq.w	8007886 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80079f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00d      	beq.n	8007a14 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80079f8:	f001 ff48 	bl	800988c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80079fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079fe:	f000 f8bf 	bl	8007b80 <prvGetDisinheritPriorityAfterTimeout>
 8007a02:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f001 f9da 	bl	8008dc4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007a10:	f001 ff72 	bl	80098f8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3738      	adds	r7, #56	@ 0x38
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	e000ed04 	.word	0xe000ed04

08007a24 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b08e      	sub	sp, #56	@ 0x38
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10d      	bne.n	8007a56 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8007a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a3e:	b672      	cpsid	i
 8007a40:	f383 8811 	msr	BASEPRI, r3
 8007a44:	f3bf 8f6f 	isb	sy
 8007a48:	f3bf 8f4f 	dsb	sy
 8007a4c:	b662      	cpsie	i
 8007a4e:	623b      	str	r3, [r7, #32]
}
 8007a50:	bf00      	nop
 8007a52:	bf00      	nop
 8007a54:	e7fd      	b.n	8007a52 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d103      	bne.n	8007a64 <xQueueReceiveFromISR+0x40>
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <xQueueReceiveFromISR+0x44>
 8007a64:	2301      	movs	r3, #1
 8007a66:	e000      	b.n	8007a6a <xQueueReceiveFromISR+0x46>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10d      	bne.n	8007a8a <xQueueReceiveFromISR+0x66>
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a72:	b672      	cpsid	i
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	b662      	cpsie	i
 8007a82:	61fb      	str	r3, [r7, #28]
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop
 8007a88:	e7fd      	b.n	8007a86 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a8a:	f001 ffe7 	bl	8009a5c <vPortValidateInterruptPriority>
	__asm volatile
 8007a8e:	f3ef 8211 	mrs	r2, BASEPRI
 8007a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a96:	b672      	cpsid	i
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	b662      	cpsie	i
 8007aa6:	61ba      	str	r2, [r7, #24]
 8007aa8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007aaa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d02f      	beq.n	8007b1a <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007abc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ac0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ac4:	68b9      	ldr	r1, [r7, #8]
 8007ac6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ac8:	f000 f8dc 	bl	8007c84 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ace:	1e5a      	subs	r2, r3, #1
 8007ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007ad4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007adc:	d112      	bne.n	8007b04 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d016      	beq.n	8007b14 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae8:	3310      	adds	r3, #16
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 fea2 	bl	8008834 <xTaskRemoveFromEventList>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00e      	beq.n	8007b14 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00b      	beq.n	8007b14 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	601a      	str	r2, [r3, #0]
 8007b02:	e007      	b.n	8007b14 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007b04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b08:	3301      	adds	r3, #1
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	b25a      	sxtb	r2, r3
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007b14:	2301      	movs	r3, #1
 8007b16:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b18:	e001      	b.n	8007b1e <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b20:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	f383 8811 	msr	BASEPRI, r3
}
 8007b28:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3738      	adds	r7, #56	@ 0x38
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10d      	bne.n	8007b62 <vQueueDelete+0x2e>
	__asm volatile
 8007b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b4a:	b672      	cpsid	i
 8007b4c:	f383 8811 	msr	BASEPRI, r3
 8007b50:	f3bf 8f6f 	isb	sy
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	b662      	cpsie	i
 8007b5a:	60bb      	str	r3, [r7, #8]
}
 8007b5c:	bf00      	nop
 8007b5e:	bf00      	nop
 8007b60:	e7fd      	b.n	8007b5e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 f95e 	bl	8007e24 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d102      	bne.n	8007b78 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f002 f886 	bl	8009c84 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007b78:	bf00      	nop
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d006      	beq.n	8007b9e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007b9a:	60fb      	str	r3, [r7, #12]
 8007b9c:	e001      	b.n	8007ba2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
	}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3714      	adds	r7, #20
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10d      	bne.n	8007bea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d14d      	bne.n	8007c72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f001 f87e 	bl	8008cdc <xTaskPriorityDisinherit>
 8007be0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	609a      	str	r2, [r3, #8]
 8007be8:	e043      	b.n	8007c72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d119      	bne.n	8007c24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6858      	ldr	r0, [r3, #4]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	68b9      	ldr	r1, [r7, #8]
 8007bfc:	f003 f99b 	bl	800af36 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c08:	441a      	add	r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	685a      	ldr	r2, [r3, #4]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d32b      	bcc.n	8007c72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	605a      	str	r2, [r3, #4]
 8007c22:	e026      	b.n	8007c72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	68d8      	ldr	r0, [r3, #12]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	68b9      	ldr	r1, [r7, #8]
 8007c30:	f003 f981 	bl	800af36 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	68da      	ldr	r2, [r3, #12]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c3c:	425b      	negs	r3, r3
 8007c3e:	441a      	add	r2, r3
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	68da      	ldr	r2, [r3, #12]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d207      	bcs.n	8007c60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	689a      	ldr	r2, [r3, #8]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c58:	425b      	negs	r3, r3
 8007c5a:	441a      	add	r2, r3
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d105      	bne.n	8007c72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d002      	beq.n	8007c72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	1c5a      	adds	r2, r3, #1
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007c7a:	697b      	ldr	r3, [r7, #20]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3718      	adds	r7, #24
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d018      	beq.n	8007cc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	68da      	ldr	r2, [r3, #12]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c9e:	441a      	add	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	68da      	ldr	r2, [r3, #12]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d303      	bcc.n	8007cb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	68d9      	ldr	r1, [r3, #12]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	6838      	ldr	r0, [r7, #0]
 8007cc4:	f003 f937 	bl	800af36 <memcpy>
	}
}
 8007cc8:	bf00      	nop
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007cd8:	f001 fdd8 	bl	800988c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ce2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ce4:	e011      	b.n	8007d0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d012      	beq.n	8007d14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	3324      	adds	r3, #36	@ 0x24
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 fd9e 	bl	8008834 <xTaskRemoveFromEventList>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007cfe:	f000 fe7d 	bl	80089fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
 8007d04:	3b01      	subs	r3, #1
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	dce9      	bgt.n	8007ce6 <prvUnlockQueue+0x16>
 8007d12:	e000      	b.n	8007d16 <prvUnlockQueue+0x46>
					break;
 8007d14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	22ff      	movs	r2, #255	@ 0xff
 8007d1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007d1e:	f001 fdeb 	bl	80098f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d22:	f001 fdb3 	bl	800988c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d2e:	e011      	b.n	8007d54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d012      	beq.n	8007d5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	3310      	adds	r3, #16
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f000 fd79 	bl	8008834 <xTaskRemoveFromEventList>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d48:	f000 fe58 	bl	80089fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d4c:	7bbb      	ldrb	r3, [r7, #14]
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	dce9      	bgt.n	8007d30 <prvUnlockQueue+0x60>
 8007d5c:	e000      	b.n	8007d60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	22ff      	movs	r2, #255	@ 0xff
 8007d64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007d68:	f001 fdc6 	bl	80098f8 <vPortExitCritical>
}
 8007d6c:	bf00      	nop
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d7c:	f001 fd86 	bl	800988c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d102      	bne.n	8007d8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	60fb      	str	r3, [r7, #12]
 8007d8c:	e001      	b.n	8007d92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d92:	f001 fdb1 	bl	80098f8 <vPortExitCritical>

	return xReturn;
 8007d96:	68fb      	ldr	r3, [r7, #12]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007da8:	f001 fd70 	bl	800988c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d102      	bne.n	8007dbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007db8:	2301      	movs	r3, #1
 8007dba:	60fb      	str	r3, [r7, #12]
 8007dbc:	e001      	b.n	8007dc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007dc2:	f001 fd99 	bl	80098f8 <vPortExitCritical>

	return xReturn;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007dda:	2300      	movs	r3, #0
 8007ddc:	60fb      	str	r3, [r7, #12]
 8007dde:	e014      	b.n	8007e0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007de0:	4a0f      	ldr	r2, [pc, #60]	@ (8007e20 <vQueueAddToRegistry+0x50>)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10b      	bne.n	8007e04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007dec:	490c      	ldr	r1, [pc, #48]	@ (8007e20 <vQueueAddToRegistry+0x50>)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	683a      	ldr	r2, [r7, #0]
 8007df2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007df6:	4a0a      	ldr	r2, [pc, #40]	@ (8007e20 <vQueueAddToRegistry+0x50>)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	00db      	lsls	r3, r3, #3
 8007dfc:	4413      	add	r3, r2
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007e02:	e006      	b.n	8007e12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	3301      	adds	r3, #1
 8007e08:	60fb      	str	r3, [r7, #12]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2b07      	cmp	r3, #7
 8007e0e:	d9e7      	bls.n	8007de0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e10:	bf00      	nop
 8007e12:	bf00      	nop
 8007e14:	3714      	adds	r7, #20
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	200019f4 	.word	0x200019f4

08007e24 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	e016      	b.n	8007e60 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007e32:	4a10      	ldr	r2, [pc, #64]	@ (8007e74 <vQueueUnregisterQueue+0x50>)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	00db      	lsls	r3, r3, #3
 8007e38:	4413      	add	r3, r2
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d10b      	bne.n	8007e5a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007e42:	4a0c      	ldr	r2, [pc, #48]	@ (8007e74 <vQueueUnregisterQueue+0x50>)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2100      	movs	r1, #0
 8007e48:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007e4c:	4a09      	ldr	r2, [pc, #36]	@ (8007e74 <vQueueUnregisterQueue+0x50>)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	00db      	lsls	r3, r3, #3
 8007e52:	4413      	add	r3, r2
 8007e54:	2200      	movs	r2, #0
 8007e56:	605a      	str	r2, [r3, #4]
				break;
 8007e58:	e006      	b.n	8007e68 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	60fb      	str	r3, [r7, #12]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2b07      	cmp	r3, #7
 8007e64:	d9e5      	bls.n	8007e32 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007e66:	bf00      	nop
 8007e68:	bf00      	nop
 8007e6a:	3714      	adds	r7, #20
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr
 8007e74:	200019f4 	.word	0x200019f4

08007e78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007e88:	f001 fd00 	bl	800988c <vPortEnterCritical>
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e92:	b25b      	sxtb	r3, r3
 8007e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e98:	d103      	bne.n	8007ea2 <vQueueWaitForMessageRestricted+0x2a>
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ea8:	b25b      	sxtb	r3, r3
 8007eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eae:	d103      	bne.n	8007eb8 <vQueueWaitForMessageRestricted+0x40>
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007eb8:	f001 fd1e 	bl	80098f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d106      	bne.n	8007ed2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	3324      	adds	r3, #36	@ 0x24
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	68b9      	ldr	r1, [r7, #8]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 fc83 	bl	80087d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007ed2:	6978      	ldr	r0, [r7, #20]
 8007ed4:	f7ff fefc 	bl	8007cd0 <prvUnlockQueue>
	}
 8007ed8:	bf00      	nop
 8007eda:	3718      	adds	r7, #24
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b08e      	sub	sp, #56	@ 0x38
 8007ee4:	af04      	add	r7, sp, #16
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
 8007eec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10d      	bne.n	8007f10 <xTaskCreateStatic+0x30>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef8:	b672      	cpsid	i
 8007efa:	f383 8811 	msr	BASEPRI, r3
 8007efe:	f3bf 8f6f 	isb	sy
 8007f02:	f3bf 8f4f 	dsb	sy
 8007f06:	b662      	cpsie	i
 8007f08:	623b      	str	r3, [r7, #32]
}
 8007f0a:	bf00      	nop
 8007f0c:	bf00      	nop
 8007f0e:	e7fd      	b.n	8007f0c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10d      	bne.n	8007f32 <xTaskCreateStatic+0x52>
	__asm volatile
 8007f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f1a:	b672      	cpsid	i
 8007f1c:	f383 8811 	msr	BASEPRI, r3
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	b662      	cpsie	i
 8007f2a:	61fb      	str	r3, [r7, #28]
}
 8007f2c:	bf00      	nop
 8007f2e:	bf00      	nop
 8007f30:	e7fd      	b.n	8007f2e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f32:	23a8      	movs	r3, #168	@ 0xa8
 8007f34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	2ba8      	cmp	r3, #168	@ 0xa8
 8007f3a:	d00d      	beq.n	8007f58 <xTaskCreateStatic+0x78>
	__asm volatile
 8007f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f40:	b672      	cpsid	i
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	b662      	cpsie	i
 8007f50:	61bb      	str	r3, [r7, #24]
}
 8007f52:	bf00      	nop
 8007f54:	bf00      	nop
 8007f56:	e7fd      	b.n	8007f54 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f58:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d01e      	beq.n	8007f9e <xTaskCreateStatic+0xbe>
 8007f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d01b      	beq.n	8007f9e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f68:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f6e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f72:	2202      	movs	r2, #2
 8007f74:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f78:	2300      	movs	r3, #0
 8007f7a:	9303      	str	r3, [sp, #12]
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7e:	9302      	str	r3, [sp, #8]
 8007f80:	f107 0314 	add.w	r3, r7, #20
 8007f84:	9301      	str	r3, [sp, #4]
 8007f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	68b9      	ldr	r1, [r7, #8]
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 f851 	bl	8008038 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007f98:	f000 f8f8 	bl	800818c <prvAddNewTaskToReadyList>
 8007f9c:	e001      	b.n	8007fa2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007fa2:	697b      	ldr	r3, [r7, #20]
	}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3728      	adds	r7, #40	@ 0x28
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b08c      	sub	sp, #48	@ 0x30
 8007fb0:	af04      	add	r7, sp, #16
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	603b      	str	r3, [r7, #0]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007fbc:	88fb      	ldrh	r3, [r7, #6]
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f001 fd91 	bl	8009ae8 <pvPortMalloc>
 8007fc6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00e      	beq.n	8007fec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007fce:	20a8      	movs	r0, #168	@ 0xa8
 8007fd0:	f001 fd8a 	bl	8009ae8 <pvPortMalloc>
 8007fd4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d003      	beq.n	8007fe4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	631a      	str	r2, [r3, #48]	@ 0x30
 8007fe2:	e005      	b.n	8007ff0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007fe4:	6978      	ldr	r0, [r7, #20]
 8007fe6:	f001 fe4d 	bl	8009c84 <vPortFree>
 8007fea:	e001      	b.n	8007ff0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007fec:	2300      	movs	r3, #0
 8007fee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d017      	beq.n	8008026 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ffe:	88fa      	ldrh	r2, [r7, #6]
 8008000:	2300      	movs	r3, #0
 8008002:	9303      	str	r3, [sp, #12]
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	9302      	str	r3, [sp, #8]
 8008008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800800a:	9301      	str	r3, [sp, #4]
 800800c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	68b9      	ldr	r1, [r7, #8]
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f000 f80f 	bl	8008038 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800801a:	69f8      	ldr	r0, [r7, #28]
 800801c:	f000 f8b6 	bl	800818c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008020:	2301      	movs	r3, #1
 8008022:	61bb      	str	r3, [r7, #24]
 8008024:	e002      	b.n	800802c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008026:	f04f 33ff 	mov.w	r3, #4294967295
 800802a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800802c:	69bb      	ldr	r3, [r7, #24]
	}
 800802e:	4618      	mov	r0, r3
 8008030:	3720      	adds	r7, #32
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
	...

08008038 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b088      	sub	sp, #32
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	607a      	str	r2, [r7, #4]
 8008044:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008048:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	461a      	mov	r2, r3
 8008050:	21a5      	movs	r1, #165	@ 0xa5
 8008052:	f002 fe9a 	bl	800ad8a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008058:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800805a:	6879      	ldr	r1, [r7, #4]
 800805c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008060:	440b      	add	r3, r1
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4413      	add	r3, r2
 8008066:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	f023 0307 	bic.w	r3, r3, #7
 800806e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	f003 0307 	and.w	r3, r3, #7
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00d      	beq.n	8008096 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800807a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807e:	b672      	cpsid	i
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	b662      	cpsie	i
 800808e:	617b      	str	r3, [r7, #20]
}
 8008090:	bf00      	nop
 8008092:	bf00      	nop
 8008094:	e7fd      	b.n	8008092 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d01f      	beq.n	80080dc <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800809c:	2300      	movs	r3, #0
 800809e:	61fb      	str	r3, [r7, #28]
 80080a0:	e012      	b.n	80080c8 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080a2:	68ba      	ldr	r2, [r7, #8]
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	4413      	add	r3, r2
 80080a8:	7819      	ldrb	r1, [r3, #0]
 80080aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	4413      	add	r3, r2
 80080b0:	3334      	adds	r3, #52	@ 0x34
 80080b2:	460a      	mov	r2, r1
 80080b4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	4413      	add	r3, r2
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d006      	beq.n	80080d0 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	3301      	adds	r3, #1
 80080c6:	61fb      	str	r3, [r7, #28]
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	2b0f      	cmp	r3, #15
 80080cc:	d9e9      	bls.n	80080a2 <prvInitialiseNewTask+0x6a>
 80080ce:	e000      	b.n	80080d2 <prvInitialiseNewTask+0x9a>
			{
				break;
 80080d0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80080da:	e003      	b.n	80080e4 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80080dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e6:	2b37      	cmp	r3, #55	@ 0x37
 80080e8:	d901      	bls.n	80080ee <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80080ea:	2337      	movs	r3, #55	@ 0x37
 80080ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80080ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80080f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080f8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80080fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fc:	2200      	movs	r2, #0
 80080fe:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008102:	3304      	adds	r3, #4
 8008104:	4618      	mov	r0, r3
 8008106:	f7fe fde3 	bl	8006cd0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800810a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800810c:	3318      	adds	r3, #24
 800810e:	4618      	mov	r0, r3
 8008110:	f7fe fdde 	bl	8006cd0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008118:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800811a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800811c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008122:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008126:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008128:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800812a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812c:	2200      	movs	r2, #0
 800812e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008134:	2200      	movs	r2, #0
 8008136:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800813a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813c:	3354      	adds	r3, #84	@ 0x54
 800813e:	224c      	movs	r2, #76	@ 0x4c
 8008140:	2100      	movs	r1, #0
 8008142:	4618      	mov	r0, r3
 8008144:	f002 fe21 	bl	800ad8a <memset>
 8008148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814a:	4a0d      	ldr	r2, [pc, #52]	@ (8008180 <prvInitialiseNewTask+0x148>)
 800814c:	659a      	str	r2, [r3, #88]	@ 0x58
 800814e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008150:	4a0c      	ldr	r2, [pc, #48]	@ (8008184 <prvInitialiseNewTask+0x14c>)
 8008152:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008156:	4a0c      	ldr	r2, [pc, #48]	@ (8008188 <prvInitialiseNewTask+0x150>)
 8008158:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	68f9      	ldr	r1, [r7, #12]
 800815e:	69b8      	ldr	r0, [r7, #24]
 8008160:	f001 fa88 	bl	8009674 <pxPortInitialiseStack>
 8008164:	4602      	mov	r2, r0
 8008166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008168:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800816a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800816c:	2b00      	cmp	r3, #0
 800816e:	d002      	beq.n	8008176 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008172:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008174:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008176:	bf00      	nop
 8008178:	3720      	adds	r7, #32
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	20005c80 	.word	0x20005c80
 8008184:	20005ce8 	.word	0x20005ce8
 8008188:	20005d50 	.word	0x20005d50

0800818c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008194:	f001 fb7a 	bl	800988c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008198:	4b2d      	ldr	r3, [pc, #180]	@ (8008250 <prvAddNewTaskToReadyList+0xc4>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	3301      	adds	r3, #1
 800819e:	4a2c      	ldr	r2, [pc, #176]	@ (8008250 <prvAddNewTaskToReadyList+0xc4>)
 80081a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80081a2:	4b2c      	ldr	r3, [pc, #176]	@ (8008254 <prvAddNewTaskToReadyList+0xc8>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d109      	bne.n	80081be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80081aa:	4a2a      	ldr	r2, [pc, #168]	@ (8008254 <prvAddNewTaskToReadyList+0xc8>)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80081b0:	4b27      	ldr	r3, [pc, #156]	@ (8008250 <prvAddNewTaskToReadyList+0xc4>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d110      	bne.n	80081da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80081b8:	f000 fc44 	bl	8008a44 <prvInitialiseTaskLists>
 80081bc:	e00d      	b.n	80081da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80081be:	4b26      	ldr	r3, [pc, #152]	@ (8008258 <prvAddNewTaskToReadyList+0xcc>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d109      	bne.n	80081da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80081c6:	4b23      	ldr	r3, [pc, #140]	@ (8008254 <prvAddNewTaskToReadyList+0xc8>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d802      	bhi.n	80081da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081d4:	4a1f      	ldr	r2, [pc, #124]	@ (8008254 <prvAddNewTaskToReadyList+0xc8>)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081da:	4b20      	ldr	r3, [pc, #128]	@ (800825c <prvAddNewTaskToReadyList+0xd0>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	3301      	adds	r3, #1
 80081e0:	4a1e      	ldr	r2, [pc, #120]	@ (800825c <prvAddNewTaskToReadyList+0xd0>)
 80081e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80081e4:	4b1d      	ldr	r3, [pc, #116]	@ (800825c <prvAddNewTaskToReadyList+0xd0>)
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081f0:	4b1b      	ldr	r3, [pc, #108]	@ (8008260 <prvAddNewTaskToReadyList+0xd4>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d903      	bls.n	8008200 <prvAddNewTaskToReadyList+0x74>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fc:	4a18      	ldr	r2, [pc, #96]	@ (8008260 <prvAddNewTaskToReadyList+0xd4>)
 80081fe:	6013      	str	r3, [r2, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008204:	4613      	mov	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4a15      	ldr	r2, [pc, #84]	@ (8008264 <prvAddNewTaskToReadyList+0xd8>)
 800820e:	441a      	add	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	3304      	adds	r3, #4
 8008214:	4619      	mov	r1, r3
 8008216:	4610      	mov	r0, r2
 8008218:	f7fe fd67 	bl	8006cea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800821c:	f001 fb6c 	bl	80098f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008220:	4b0d      	ldr	r3, [pc, #52]	@ (8008258 <prvAddNewTaskToReadyList+0xcc>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00e      	beq.n	8008246 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008228:	4b0a      	ldr	r3, [pc, #40]	@ (8008254 <prvAddNewTaskToReadyList+0xc8>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008232:	429a      	cmp	r2, r3
 8008234:	d207      	bcs.n	8008246 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008236:	4b0c      	ldr	r3, [pc, #48]	@ (8008268 <prvAddNewTaskToReadyList+0xdc>)
 8008238:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800823c:	601a      	str	r2, [r3, #0]
 800823e:	f3bf 8f4f 	dsb	sy
 8008242:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008246:	bf00      	nop
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20001f08 	.word	0x20001f08
 8008254:	20001a34 	.word	0x20001a34
 8008258:	20001f14 	.word	0x20001f14
 800825c:	20001f24 	.word	0x20001f24
 8008260:	20001f10 	.word	0x20001f10
 8008264:	20001a38 	.word	0x20001a38
 8008268:	e000ed04 	.word	0xe000ed04

0800826c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008274:	2300      	movs	r3, #0
 8008276:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d01a      	beq.n	80082b4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800827e:	4b15      	ldr	r3, [pc, #84]	@ (80082d4 <vTaskDelay+0x68>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00d      	beq.n	80082a2 <vTaskDelay+0x36>
	__asm volatile
 8008286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800828a:	b672      	cpsid	i
 800828c:	f383 8811 	msr	BASEPRI, r3
 8008290:	f3bf 8f6f 	isb	sy
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	b662      	cpsie	i
 800829a:	60bb      	str	r3, [r7, #8]
}
 800829c:	bf00      	nop
 800829e:	bf00      	nop
 80082a0:	e7fd      	b.n	800829e <vTaskDelay+0x32>
			vTaskSuspendAll();
 80082a2:	f000 f88f 	bl	80083c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80082a6:	2100      	movs	r1, #0
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fe27 	bl	8008efc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80082ae:	f000 f897 	bl	80083e0 <xTaskResumeAll>
 80082b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d107      	bne.n	80082ca <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80082ba:	4b07      	ldr	r3, [pc, #28]	@ (80082d8 <vTaskDelay+0x6c>)
 80082bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082c0:	601a      	str	r2, [r3, #0]
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082ca:	bf00      	nop
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	20001f30 	.word	0x20001f30
 80082d8:	e000ed04 	.word	0xe000ed04

080082dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b08a      	sub	sp, #40	@ 0x28
 80082e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082e2:	2300      	movs	r3, #0
 80082e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082e6:	2300      	movs	r3, #0
 80082e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082ea:	463a      	mov	r2, r7
 80082ec:	1d39      	adds	r1, r7, #4
 80082ee:	f107 0308 	add.w	r3, r7, #8
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fe fc98 	bl	8006c28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	9202      	str	r2, [sp, #8]
 8008300:	9301      	str	r3, [sp, #4]
 8008302:	2300      	movs	r3, #0
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	2300      	movs	r3, #0
 8008308:	460a      	mov	r2, r1
 800830a:	4926      	ldr	r1, [pc, #152]	@ (80083a4 <vTaskStartScheduler+0xc8>)
 800830c:	4826      	ldr	r0, [pc, #152]	@ (80083a8 <vTaskStartScheduler+0xcc>)
 800830e:	f7ff fde7 	bl	8007ee0 <xTaskCreateStatic>
 8008312:	4603      	mov	r3, r0
 8008314:	4a25      	ldr	r2, [pc, #148]	@ (80083ac <vTaskStartScheduler+0xd0>)
 8008316:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008318:	4b24      	ldr	r3, [pc, #144]	@ (80083ac <vTaskStartScheduler+0xd0>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d002      	beq.n	8008326 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008320:	2301      	movs	r3, #1
 8008322:	617b      	str	r3, [r7, #20]
 8008324:	e001      	b.n	800832a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008326:	2300      	movs	r3, #0
 8008328:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d102      	bne.n	8008336 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008330:	f000 fe38 	bl	8008fa4 <xTimerCreateTimerTask>
 8008334:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d11d      	bne.n	8008378 <vTaskStartScheduler+0x9c>
	__asm volatile
 800833c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008340:	b672      	cpsid	i
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	b662      	cpsie	i
 8008350:	613b      	str	r3, [r7, #16]
}
 8008352:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008354:	4b16      	ldr	r3, [pc, #88]	@ (80083b0 <vTaskStartScheduler+0xd4>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	3354      	adds	r3, #84	@ 0x54
 800835a:	4a16      	ldr	r2, [pc, #88]	@ (80083b4 <vTaskStartScheduler+0xd8>)
 800835c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800835e:	4b16      	ldr	r3, [pc, #88]	@ (80083b8 <vTaskStartScheduler+0xdc>)
 8008360:	f04f 32ff 	mov.w	r2, #4294967295
 8008364:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008366:	4b15      	ldr	r3, [pc, #84]	@ (80083bc <vTaskStartScheduler+0xe0>)
 8008368:	2201      	movs	r2, #1
 800836a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800836c:	4b14      	ldr	r3, [pc, #80]	@ (80083c0 <vTaskStartScheduler+0xe4>)
 800836e:	2200      	movs	r2, #0
 8008370:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008372:	f001 fa0d 	bl	8009790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008376:	e011      	b.n	800839c <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800837e:	d10d      	bne.n	800839c <vTaskStartScheduler+0xc0>
	__asm volatile
 8008380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008384:	b672      	cpsid	i
 8008386:	f383 8811 	msr	BASEPRI, r3
 800838a:	f3bf 8f6f 	isb	sy
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	b662      	cpsie	i
 8008394:	60fb      	str	r3, [r7, #12]
}
 8008396:	bf00      	nop
 8008398:	bf00      	nop
 800839a:	e7fd      	b.n	8008398 <vTaskStartScheduler+0xbc>
}
 800839c:	bf00      	nop
 800839e:	3718      	adds	r7, #24
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	0800e518 	.word	0x0800e518
 80083a8:	08008a15 	.word	0x08008a15
 80083ac:	20001f2c 	.word	0x20001f2c
 80083b0:	20001a34 	.word	0x20001a34
 80083b4:	2000001c 	.word	0x2000001c
 80083b8:	20001f28 	.word	0x20001f28
 80083bc:	20001f14 	.word	0x20001f14
 80083c0:	20001f0c 	.word	0x20001f0c

080083c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80083c4:	b480      	push	{r7}
 80083c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80083c8:	4b04      	ldr	r3, [pc, #16]	@ (80083dc <vTaskSuspendAll+0x18>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	3301      	adds	r3, #1
 80083ce:	4a03      	ldr	r2, [pc, #12]	@ (80083dc <vTaskSuspendAll+0x18>)
 80083d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80083d2:	bf00      	nop
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	20001f30 	.word	0x20001f30

080083e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083e6:	2300      	movs	r3, #0
 80083e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083ea:	2300      	movs	r3, #0
 80083ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80083ee:	4b43      	ldr	r3, [pc, #268]	@ (80084fc <xTaskResumeAll+0x11c>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10d      	bne.n	8008412 <xTaskResumeAll+0x32>
	__asm volatile
 80083f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083fa:	b672      	cpsid	i
 80083fc:	f383 8811 	msr	BASEPRI, r3
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	b662      	cpsie	i
 800840a:	603b      	str	r3, [r7, #0]
}
 800840c:	bf00      	nop
 800840e:	bf00      	nop
 8008410:	e7fd      	b.n	800840e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008412:	f001 fa3b 	bl	800988c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008416:	4b39      	ldr	r3, [pc, #228]	@ (80084fc <xTaskResumeAll+0x11c>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3b01      	subs	r3, #1
 800841c:	4a37      	ldr	r2, [pc, #220]	@ (80084fc <xTaskResumeAll+0x11c>)
 800841e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008420:	4b36      	ldr	r3, [pc, #216]	@ (80084fc <xTaskResumeAll+0x11c>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d162      	bne.n	80084ee <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008428:	4b35      	ldr	r3, [pc, #212]	@ (8008500 <xTaskResumeAll+0x120>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d05e      	beq.n	80084ee <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008430:	e02f      	b.n	8008492 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008432:	4b34      	ldr	r3, [pc, #208]	@ (8008504 <xTaskResumeAll+0x124>)
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	3318      	adds	r3, #24
 800843e:	4618      	mov	r0, r3
 8008440:	f7fe fcb0 	bl	8006da4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	3304      	adds	r3, #4
 8008448:	4618      	mov	r0, r3
 800844a:	f7fe fcab 	bl	8006da4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008452:	4b2d      	ldr	r3, [pc, #180]	@ (8008508 <xTaskResumeAll+0x128>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	429a      	cmp	r2, r3
 8008458:	d903      	bls.n	8008462 <xTaskResumeAll+0x82>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800845e:	4a2a      	ldr	r2, [pc, #168]	@ (8008508 <xTaskResumeAll+0x128>)
 8008460:	6013      	str	r3, [r2, #0]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008466:	4613      	mov	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4413      	add	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4a27      	ldr	r2, [pc, #156]	@ (800850c <xTaskResumeAll+0x12c>)
 8008470:	441a      	add	r2, r3
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	3304      	adds	r3, #4
 8008476:	4619      	mov	r1, r3
 8008478:	4610      	mov	r0, r2
 800847a:	f7fe fc36 	bl	8006cea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008482:	4b23      	ldr	r3, [pc, #140]	@ (8008510 <xTaskResumeAll+0x130>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008488:	429a      	cmp	r2, r3
 800848a:	d302      	bcc.n	8008492 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800848c:	4b21      	ldr	r3, [pc, #132]	@ (8008514 <xTaskResumeAll+0x134>)
 800848e:	2201      	movs	r2, #1
 8008490:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008492:	4b1c      	ldr	r3, [pc, #112]	@ (8008504 <xTaskResumeAll+0x124>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1cb      	bne.n	8008432 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80084a0:	f000 fb76 	bl	8008b90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80084a4:	4b1c      	ldr	r3, [pc, #112]	@ (8008518 <xTaskResumeAll+0x138>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d010      	beq.n	80084d2 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80084b0:	f000 f846 	bl	8008540 <xTaskIncrementTick>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d002      	beq.n	80084c0 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80084ba:	4b16      	ldr	r3, [pc, #88]	@ (8008514 <xTaskResumeAll+0x134>)
 80084bc:	2201      	movs	r2, #1
 80084be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	3b01      	subs	r3, #1
 80084c4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1f1      	bne.n	80084b0 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80084cc:	4b12      	ldr	r3, [pc, #72]	@ (8008518 <xTaskResumeAll+0x138>)
 80084ce:	2200      	movs	r2, #0
 80084d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80084d2:	4b10      	ldr	r3, [pc, #64]	@ (8008514 <xTaskResumeAll+0x134>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d009      	beq.n	80084ee <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084da:	2301      	movs	r3, #1
 80084dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084de:	4b0f      	ldr	r3, [pc, #60]	@ (800851c <xTaskResumeAll+0x13c>)
 80084e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084e4:	601a      	str	r2, [r3, #0]
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084ee:	f001 fa03 	bl	80098f8 <vPortExitCritical>

	return xAlreadyYielded;
 80084f2:	68bb      	ldr	r3, [r7, #8]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	20001f30 	.word	0x20001f30
 8008500:	20001f08 	.word	0x20001f08
 8008504:	20001ec8 	.word	0x20001ec8
 8008508:	20001f10 	.word	0x20001f10
 800850c:	20001a38 	.word	0x20001a38
 8008510:	20001a34 	.word	0x20001a34
 8008514:	20001f1c 	.word	0x20001f1c
 8008518:	20001f18 	.word	0x20001f18
 800851c:	e000ed04 	.word	0xe000ed04

08008520 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008526:	4b05      	ldr	r3, [pc, #20]	@ (800853c <xTaskGetTickCount+0x1c>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800852c:	687b      	ldr	r3, [r7, #4]
}
 800852e:	4618      	mov	r0, r3
 8008530:	370c      	adds	r7, #12
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	20001f0c 	.word	0x20001f0c

08008540 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008546:	2300      	movs	r3, #0
 8008548:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800854a:	4b50      	ldr	r3, [pc, #320]	@ (800868c <xTaskIncrementTick+0x14c>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	f040 808c 	bne.w	800866c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008554:	4b4e      	ldr	r3, [pc, #312]	@ (8008690 <xTaskIncrementTick+0x150>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	3301      	adds	r3, #1
 800855a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800855c:	4a4c      	ldr	r2, [pc, #304]	@ (8008690 <xTaskIncrementTick+0x150>)
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d123      	bne.n	80085b0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8008568:	4b4a      	ldr	r3, [pc, #296]	@ (8008694 <xTaskIncrementTick+0x154>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00d      	beq.n	800858e <xTaskIncrementTick+0x4e>
	__asm volatile
 8008572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008576:	b672      	cpsid	i
 8008578:	f383 8811 	msr	BASEPRI, r3
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	b662      	cpsie	i
 8008586:	603b      	str	r3, [r7, #0]
}
 8008588:	bf00      	nop
 800858a:	bf00      	nop
 800858c:	e7fd      	b.n	800858a <xTaskIncrementTick+0x4a>
 800858e:	4b41      	ldr	r3, [pc, #260]	@ (8008694 <xTaskIncrementTick+0x154>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	60fb      	str	r3, [r7, #12]
 8008594:	4b40      	ldr	r3, [pc, #256]	@ (8008698 <xTaskIncrementTick+0x158>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a3e      	ldr	r2, [pc, #248]	@ (8008694 <xTaskIncrementTick+0x154>)
 800859a:	6013      	str	r3, [r2, #0]
 800859c:	4a3e      	ldr	r2, [pc, #248]	@ (8008698 <xTaskIncrementTick+0x158>)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6013      	str	r3, [r2, #0]
 80085a2:	4b3e      	ldr	r3, [pc, #248]	@ (800869c <xTaskIncrementTick+0x15c>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	3301      	adds	r3, #1
 80085a8:	4a3c      	ldr	r2, [pc, #240]	@ (800869c <xTaskIncrementTick+0x15c>)
 80085aa:	6013      	str	r3, [r2, #0]
 80085ac:	f000 faf0 	bl	8008b90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80085b0:	4b3b      	ldr	r3, [pc, #236]	@ (80086a0 <xTaskIncrementTick+0x160>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d349      	bcc.n	800864e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085ba:	4b36      	ldr	r3, [pc, #216]	@ (8008694 <xTaskIncrementTick+0x154>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d104      	bne.n	80085ce <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085c4:	4b36      	ldr	r3, [pc, #216]	@ (80086a0 <xTaskIncrementTick+0x160>)
 80085c6:	f04f 32ff 	mov.w	r2, #4294967295
 80085ca:	601a      	str	r2, [r3, #0]
					break;
 80085cc:	e03f      	b.n	800864e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085ce:	4b31      	ldr	r3, [pc, #196]	@ (8008694 <xTaskIncrementTick+0x154>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085de:	693a      	ldr	r2, [r7, #16]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d203      	bcs.n	80085ee <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085e6:	4a2e      	ldr	r2, [pc, #184]	@ (80086a0 <xTaskIncrementTick+0x160>)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085ec:	e02f      	b.n	800864e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	3304      	adds	r3, #4
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7fe fbd6 	bl	8006da4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d004      	beq.n	800860a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	3318      	adds	r3, #24
 8008604:	4618      	mov	r0, r3
 8008606:	f7fe fbcd 	bl	8006da4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800860e:	4b25      	ldr	r3, [pc, #148]	@ (80086a4 <xTaskIncrementTick+0x164>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	429a      	cmp	r2, r3
 8008614:	d903      	bls.n	800861e <xTaskIncrementTick+0xde>
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861a:	4a22      	ldr	r2, [pc, #136]	@ (80086a4 <xTaskIncrementTick+0x164>)
 800861c:	6013      	str	r3, [r2, #0]
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008622:	4613      	mov	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4413      	add	r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	4a1f      	ldr	r2, [pc, #124]	@ (80086a8 <xTaskIncrementTick+0x168>)
 800862c:	441a      	add	r2, r3
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	3304      	adds	r3, #4
 8008632:	4619      	mov	r1, r3
 8008634:	4610      	mov	r0, r2
 8008636:	f7fe fb58 	bl	8006cea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800863e:	4b1b      	ldr	r3, [pc, #108]	@ (80086ac <xTaskIncrementTick+0x16c>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008644:	429a      	cmp	r2, r3
 8008646:	d3b8      	bcc.n	80085ba <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8008648:	2301      	movs	r3, #1
 800864a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800864c:	e7b5      	b.n	80085ba <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800864e:	4b17      	ldr	r3, [pc, #92]	@ (80086ac <xTaskIncrementTick+0x16c>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008654:	4914      	ldr	r1, [pc, #80]	@ (80086a8 <xTaskIncrementTick+0x168>)
 8008656:	4613      	mov	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	440b      	add	r3, r1
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2b01      	cmp	r3, #1
 8008664:	d907      	bls.n	8008676 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8008666:	2301      	movs	r3, #1
 8008668:	617b      	str	r3, [r7, #20]
 800866a:	e004      	b.n	8008676 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800866c:	4b10      	ldr	r3, [pc, #64]	@ (80086b0 <xTaskIncrementTick+0x170>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	3301      	adds	r3, #1
 8008672:	4a0f      	ldr	r2, [pc, #60]	@ (80086b0 <xTaskIncrementTick+0x170>)
 8008674:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008676:	4b0f      	ldr	r3, [pc, #60]	@ (80086b4 <xTaskIncrementTick+0x174>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d001      	beq.n	8008682 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800867e:	2301      	movs	r3, #1
 8008680:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008682:	697b      	ldr	r3, [r7, #20]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3718      	adds	r7, #24
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	20001f30 	.word	0x20001f30
 8008690:	20001f0c 	.word	0x20001f0c
 8008694:	20001ec0 	.word	0x20001ec0
 8008698:	20001ec4 	.word	0x20001ec4
 800869c:	20001f20 	.word	0x20001f20
 80086a0:	20001f28 	.word	0x20001f28
 80086a4:	20001f10 	.word	0x20001f10
 80086a8:	20001a38 	.word	0x20001a38
 80086ac:	20001a34 	.word	0x20001a34
 80086b0:	20001f18 	.word	0x20001f18
 80086b4:	20001f1c 	.word	0x20001f1c

080086b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80086be:	4b2c      	ldr	r3, [pc, #176]	@ (8008770 <vTaskSwitchContext+0xb8>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d003      	beq.n	80086ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80086c6:	4b2b      	ldr	r3, [pc, #172]	@ (8008774 <vTaskSwitchContext+0xbc>)
 80086c8:	2201      	movs	r2, #1
 80086ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80086cc:	e049      	b.n	8008762 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 80086ce:	4b29      	ldr	r3, [pc, #164]	@ (8008774 <vTaskSwitchContext+0xbc>)
 80086d0:	2200      	movs	r2, #0
 80086d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086d4:	4b28      	ldr	r3, [pc, #160]	@ (8008778 <vTaskSwitchContext+0xc0>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	60fb      	str	r3, [r7, #12]
 80086da:	e013      	b.n	8008704 <vTaskSwitchContext+0x4c>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10d      	bne.n	80086fe <vTaskSwitchContext+0x46>
	__asm volatile
 80086e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e6:	b672      	cpsid	i
 80086e8:	f383 8811 	msr	BASEPRI, r3
 80086ec:	f3bf 8f6f 	isb	sy
 80086f0:	f3bf 8f4f 	dsb	sy
 80086f4:	b662      	cpsie	i
 80086f6:	607b      	str	r3, [r7, #4]
}
 80086f8:	bf00      	nop
 80086fa:	bf00      	nop
 80086fc:	e7fd      	b.n	80086fa <vTaskSwitchContext+0x42>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	3b01      	subs	r3, #1
 8008702:	60fb      	str	r3, [r7, #12]
 8008704:	491d      	ldr	r1, [pc, #116]	@ (800877c <vTaskSwitchContext+0xc4>)
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	4613      	mov	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4413      	add	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	440b      	add	r3, r1
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d0e1      	beq.n	80086dc <vTaskSwitchContext+0x24>
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	4613      	mov	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4413      	add	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	4a16      	ldr	r2, [pc, #88]	@ (800877c <vTaskSwitchContext+0xc4>)
 8008724:	4413      	add	r3, r2
 8008726:	60bb      	str	r3, [r7, #8]
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	605a      	str	r2, [r3, #4]
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	685a      	ldr	r2, [r3, #4]
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	3308      	adds	r3, #8
 800873a:	429a      	cmp	r2, r3
 800873c:	d104      	bne.n	8008748 <vTaskSwitchContext+0x90>
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	685a      	ldr	r2, [r3, #4]
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	605a      	str	r2, [r3, #4]
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	4a0c      	ldr	r2, [pc, #48]	@ (8008780 <vTaskSwitchContext+0xc8>)
 8008750:	6013      	str	r3, [r2, #0]
 8008752:	4a09      	ldr	r2, [pc, #36]	@ (8008778 <vTaskSwitchContext+0xc0>)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008758:	4b09      	ldr	r3, [pc, #36]	@ (8008780 <vTaskSwitchContext+0xc8>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	3354      	adds	r3, #84	@ 0x54
 800875e:	4a09      	ldr	r2, [pc, #36]	@ (8008784 <vTaskSwitchContext+0xcc>)
 8008760:	6013      	str	r3, [r2, #0]
}
 8008762:	bf00      	nop
 8008764:	3714      	adds	r7, #20
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	20001f30 	.word	0x20001f30
 8008774:	20001f1c 	.word	0x20001f1c
 8008778:	20001f10 	.word	0x20001f10
 800877c:	20001a38 	.word	0x20001a38
 8008780:	20001a34 	.word	0x20001a34
 8008784:	2000001c 	.word	0x2000001c

08008788 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10d      	bne.n	80087b4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8008798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800879c:	b672      	cpsid	i
 800879e:	f383 8811 	msr	BASEPRI, r3
 80087a2:	f3bf 8f6f 	isb	sy
 80087a6:	f3bf 8f4f 	dsb	sy
 80087aa:	b662      	cpsie	i
 80087ac:	60fb      	str	r3, [r7, #12]
}
 80087ae:	bf00      	nop
 80087b0:	bf00      	nop
 80087b2:	e7fd      	b.n	80087b0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087b4:	4b07      	ldr	r3, [pc, #28]	@ (80087d4 <vTaskPlaceOnEventList+0x4c>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	3318      	adds	r3, #24
 80087ba:	4619      	mov	r1, r3
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f7fe fab8 	bl	8006d32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80087c2:	2101      	movs	r1, #1
 80087c4:	6838      	ldr	r0, [r7, #0]
 80087c6:	f000 fb99 	bl	8008efc <prvAddCurrentTaskToDelayedList>
}
 80087ca:	bf00      	nop
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20001a34 	.word	0x20001a34

080087d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b086      	sub	sp, #24
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d10d      	bne.n	8008806 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 80087ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ee:	b672      	cpsid	i
 80087f0:	f383 8811 	msr	BASEPRI, r3
 80087f4:	f3bf 8f6f 	isb	sy
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	b662      	cpsie	i
 80087fe:	617b      	str	r3, [r7, #20]
}
 8008800:	bf00      	nop
 8008802:	bf00      	nop
 8008804:	e7fd      	b.n	8008802 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008806:	4b0a      	ldr	r3, [pc, #40]	@ (8008830 <vTaskPlaceOnEventListRestricted+0x58>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	3318      	adds	r3, #24
 800880c:	4619      	mov	r1, r3
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f7fe fa6b 	bl	8006cea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d002      	beq.n	8008820 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800881a:	f04f 33ff 	mov.w	r3, #4294967295
 800881e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008820:	6879      	ldr	r1, [r7, #4]
 8008822:	68b8      	ldr	r0, [r7, #8]
 8008824:	f000 fb6a 	bl	8008efc <prvAddCurrentTaskToDelayedList>
	}
 8008828:	bf00      	nop
 800882a:	3718      	adds	r7, #24
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	20001a34 	.word	0x20001a34

08008834 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b086      	sub	sp, #24
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10d      	bne.n	8008866 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800884a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884e:	b672      	cpsid	i
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	b662      	cpsie	i
 800885e:	60fb      	str	r3, [r7, #12]
}
 8008860:	bf00      	nop
 8008862:	bf00      	nop
 8008864:	e7fd      	b.n	8008862 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	3318      	adds	r3, #24
 800886a:	4618      	mov	r0, r3
 800886c:	f7fe fa9a 	bl	8006da4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008870:	4b1d      	ldr	r3, [pc, #116]	@ (80088e8 <xTaskRemoveFromEventList+0xb4>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d11d      	bne.n	80088b4 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	3304      	adds	r3, #4
 800887c:	4618      	mov	r0, r3
 800887e:	f7fe fa91 	bl	8006da4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008886:	4b19      	ldr	r3, [pc, #100]	@ (80088ec <xTaskRemoveFromEventList+0xb8>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	429a      	cmp	r2, r3
 800888c:	d903      	bls.n	8008896 <xTaskRemoveFromEventList+0x62>
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008892:	4a16      	ldr	r2, [pc, #88]	@ (80088ec <xTaskRemoveFromEventList+0xb8>)
 8008894:	6013      	str	r3, [r2, #0]
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800889a:	4613      	mov	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4413      	add	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4a13      	ldr	r2, [pc, #76]	@ (80088f0 <xTaskRemoveFromEventList+0xbc>)
 80088a4:	441a      	add	r2, r3
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	3304      	adds	r3, #4
 80088aa:	4619      	mov	r1, r3
 80088ac:	4610      	mov	r0, r2
 80088ae:	f7fe fa1c 	bl	8006cea <vListInsertEnd>
 80088b2:	e005      	b.n	80088c0 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	3318      	adds	r3, #24
 80088b8:	4619      	mov	r1, r3
 80088ba:	480e      	ldr	r0, [pc, #56]	@ (80088f4 <xTaskRemoveFromEventList+0xc0>)
 80088bc:	f7fe fa15 	bl	8006cea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088c4:	4b0c      	ldr	r3, [pc, #48]	@ (80088f8 <xTaskRemoveFromEventList+0xc4>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d905      	bls.n	80088da <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80088ce:	2301      	movs	r3, #1
 80088d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80088d2:	4b0a      	ldr	r3, [pc, #40]	@ (80088fc <xTaskRemoveFromEventList+0xc8>)
 80088d4:	2201      	movs	r2, #1
 80088d6:	601a      	str	r2, [r3, #0]
 80088d8:	e001      	b.n	80088de <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80088da:	2300      	movs	r3, #0
 80088dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80088de:	697b      	ldr	r3, [r7, #20]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3718      	adds	r7, #24
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	20001f30 	.word	0x20001f30
 80088ec:	20001f10 	.word	0x20001f10
 80088f0:	20001a38 	.word	0x20001a38
 80088f4:	20001ec8 	.word	0x20001ec8
 80088f8:	20001a34 	.word	0x20001a34
 80088fc:	20001f1c 	.word	0x20001f1c

08008900 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008908:	4b06      	ldr	r3, [pc, #24]	@ (8008924 <vTaskInternalSetTimeOutState+0x24>)
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008910:	4b05      	ldr	r3, [pc, #20]	@ (8008928 <vTaskInternalSetTimeOutState+0x28>)
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	605a      	str	r2, [r3, #4]
}
 8008918:	bf00      	nop
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr
 8008924:	20001f20 	.word	0x20001f20
 8008928:	20001f0c 	.word	0x20001f0c

0800892c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b088      	sub	sp, #32
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d10d      	bne.n	8008958 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800893c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008940:	b672      	cpsid	i
 8008942:	f383 8811 	msr	BASEPRI, r3
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	b662      	cpsie	i
 8008950:	613b      	str	r3, [r7, #16]
}
 8008952:	bf00      	nop
 8008954:	bf00      	nop
 8008956:	e7fd      	b.n	8008954 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10d      	bne.n	800897a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008962:	b672      	cpsid	i
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	b662      	cpsie	i
 8008972:	60fb      	str	r3, [r7, #12]
}
 8008974:	bf00      	nop
 8008976:	bf00      	nop
 8008978:	e7fd      	b.n	8008976 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800897a:	f000 ff87 	bl	800988c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800897e:	4b1d      	ldr	r3, [pc, #116]	@ (80089f4 <xTaskCheckForTimeOut+0xc8>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	69ba      	ldr	r2, [r7, #24]
 800898a:	1ad3      	subs	r3, r2, r3
 800898c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008996:	d102      	bne.n	800899e <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008998:	2300      	movs	r3, #0
 800899a:	61fb      	str	r3, [r7, #28]
 800899c:	e023      	b.n	80089e6 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	4b15      	ldr	r3, [pc, #84]	@ (80089f8 <xTaskCheckForTimeOut+0xcc>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d007      	beq.n	80089ba <xTaskCheckForTimeOut+0x8e>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	69ba      	ldr	r2, [r7, #24]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d302      	bcc.n	80089ba <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80089b4:	2301      	movs	r3, #1
 80089b6:	61fb      	str	r3, [r7, #28]
 80089b8:	e015      	b.n	80089e6 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d20b      	bcs.n	80089dc <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	1ad2      	subs	r2, r2, r3
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7ff ff95 	bl	8008900 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80089d6:	2300      	movs	r3, #0
 80089d8:	61fb      	str	r3, [r7, #28]
 80089da:	e004      	b.n	80089e6 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	2200      	movs	r2, #0
 80089e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80089e2:	2301      	movs	r3, #1
 80089e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80089e6:	f000 ff87 	bl	80098f8 <vPortExitCritical>

	return xReturn;
 80089ea:	69fb      	ldr	r3, [r7, #28]
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3720      	adds	r7, #32
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	20001f0c 	.word	0x20001f0c
 80089f8:	20001f20 	.word	0x20001f20

080089fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80089fc:	b480      	push	{r7}
 80089fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a00:	4b03      	ldr	r3, [pc, #12]	@ (8008a10 <vTaskMissedYield+0x14>)
 8008a02:	2201      	movs	r2, #1
 8008a04:	601a      	str	r2, [r3, #0]
}
 8008a06:	bf00      	nop
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr
 8008a10:	20001f1c 	.word	0x20001f1c

08008a14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a1c:	f000 f852 	bl	8008ac4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a20:	4b06      	ldr	r3, [pc, #24]	@ (8008a3c <prvIdleTask+0x28>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d9f9      	bls.n	8008a1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a28:	4b05      	ldr	r3, [pc, #20]	@ (8008a40 <prvIdleTask+0x2c>)
 8008a2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a2e:	601a      	str	r2, [r3, #0]
 8008a30:	f3bf 8f4f 	dsb	sy
 8008a34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a38:	e7f0      	b.n	8008a1c <prvIdleTask+0x8>
 8008a3a:	bf00      	nop
 8008a3c:	20001a38 	.word	0x20001a38
 8008a40:	e000ed04 	.word	0xe000ed04

08008a44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	607b      	str	r3, [r7, #4]
 8008a4e:	e00c      	b.n	8008a6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	4613      	mov	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4413      	add	r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	4a12      	ldr	r2, [pc, #72]	@ (8008aa4 <prvInitialiseTaskLists+0x60>)
 8008a5c:	4413      	add	r3, r2
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fe f916 	bl	8006c90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	3301      	adds	r3, #1
 8008a68:	607b      	str	r3, [r7, #4]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2b37      	cmp	r3, #55	@ 0x37
 8008a6e:	d9ef      	bls.n	8008a50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a70:	480d      	ldr	r0, [pc, #52]	@ (8008aa8 <prvInitialiseTaskLists+0x64>)
 8008a72:	f7fe f90d 	bl	8006c90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a76:	480d      	ldr	r0, [pc, #52]	@ (8008aac <prvInitialiseTaskLists+0x68>)
 8008a78:	f7fe f90a 	bl	8006c90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a7c:	480c      	ldr	r0, [pc, #48]	@ (8008ab0 <prvInitialiseTaskLists+0x6c>)
 8008a7e:	f7fe f907 	bl	8006c90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a82:	480c      	ldr	r0, [pc, #48]	@ (8008ab4 <prvInitialiseTaskLists+0x70>)
 8008a84:	f7fe f904 	bl	8006c90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a88:	480b      	ldr	r0, [pc, #44]	@ (8008ab8 <prvInitialiseTaskLists+0x74>)
 8008a8a:	f7fe f901 	bl	8006c90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8008abc <prvInitialiseTaskLists+0x78>)
 8008a90:	4a05      	ldr	r2, [pc, #20]	@ (8008aa8 <prvInitialiseTaskLists+0x64>)
 8008a92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a94:	4b0a      	ldr	r3, [pc, #40]	@ (8008ac0 <prvInitialiseTaskLists+0x7c>)
 8008a96:	4a05      	ldr	r2, [pc, #20]	@ (8008aac <prvInitialiseTaskLists+0x68>)
 8008a98:	601a      	str	r2, [r3, #0]
}
 8008a9a:	bf00      	nop
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	20001a38 	.word	0x20001a38
 8008aa8:	20001e98 	.word	0x20001e98
 8008aac:	20001eac 	.word	0x20001eac
 8008ab0:	20001ec8 	.word	0x20001ec8
 8008ab4:	20001edc 	.word	0x20001edc
 8008ab8:	20001ef4 	.word	0x20001ef4
 8008abc:	20001ec0 	.word	0x20001ec0
 8008ac0:	20001ec4 	.word	0x20001ec4

08008ac4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008aca:	e019      	b.n	8008b00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008acc:	f000 fede 	bl	800988c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ad0:	4b10      	ldr	r3, [pc, #64]	@ (8008b14 <prvCheckTasksWaitingTermination+0x50>)
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	3304      	adds	r3, #4
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7fe f961 	bl	8006da4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8008b18 <prvCheckTasksWaitingTermination+0x54>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	4a0b      	ldr	r2, [pc, #44]	@ (8008b18 <prvCheckTasksWaitingTermination+0x54>)
 8008aea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008aec:	4b0b      	ldr	r3, [pc, #44]	@ (8008b1c <prvCheckTasksWaitingTermination+0x58>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	4a0a      	ldr	r2, [pc, #40]	@ (8008b1c <prvCheckTasksWaitingTermination+0x58>)
 8008af4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008af6:	f000 feff 	bl	80098f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f810 	bl	8008b20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b00:	4b06      	ldr	r3, [pc, #24]	@ (8008b1c <prvCheckTasksWaitingTermination+0x58>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1e1      	bne.n	8008acc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b08:	bf00      	nop
 8008b0a:	bf00      	nop
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	20001edc 	.word	0x20001edc
 8008b18:	20001f08 	.word	0x20001f08
 8008b1c:	20001ef0 	.word	0x20001ef0

08008b20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	3354      	adds	r3, #84	@ 0x54
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f002 f949 	bl	800adc4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d108      	bne.n	8008b4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b40:	4618      	mov	r0, r3
 8008b42:	f001 f89f 	bl	8009c84 <vPortFree>
				vPortFree( pxTCB );
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f001 f89c 	bl	8009c84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b4c:	e01b      	b.n	8008b86 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d103      	bne.n	8008b60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f001 f893 	bl	8009c84 <vPortFree>
	}
 8008b5e:	e012      	b.n	8008b86 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	d00d      	beq.n	8008b86 <prvDeleteTCB+0x66>
	__asm volatile
 8008b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b6e:	b672      	cpsid	i
 8008b70:	f383 8811 	msr	BASEPRI, r3
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	b662      	cpsie	i
 8008b7e:	60fb      	str	r3, [r7, #12]
}
 8008b80:	bf00      	nop
 8008b82:	bf00      	nop
 8008b84:	e7fd      	b.n	8008b82 <prvDeleteTCB+0x62>
	}
 8008b86:	bf00      	nop
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
	...

08008b90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b96:	4b0c      	ldr	r3, [pc, #48]	@ (8008bc8 <prvResetNextTaskUnblockTime+0x38>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d104      	bne.n	8008baa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8008bcc <prvResetNextTaskUnblockTime+0x3c>)
 8008ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ba6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ba8:	e008      	b.n	8008bbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008baa:	4b07      	ldr	r3, [pc, #28]	@ (8008bc8 <prvResetNextTaskUnblockTime+0x38>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	4a04      	ldr	r2, [pc, #16]	@ (8008bcc <prvResetNextTaskUnblockTime+0x3c>)
 8008bba:	6013      	str	r3, [r2, #0]
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr
 8008bc8:	20001ec0 	.word	0x20001ec0
 8008bcc:	20001f28 	.word	0x20001f28

08008bd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8008c04 <xTaskGetSchedulerState+0x34>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d102      	bne.n	8008be4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008bde:	2301      	movs	r3, #1
 8008be0:	607b      	str	r3, [r7, #4]
 8008be2:	e008      	b.n	8008bf6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008be4:	4b08      	ldr	r3, [pc, #32]	@ (8008c08 <xTaskGetSchedulerState+0x38>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d102      	bne.n	8008bf2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008bec:	2302      	movs	r3, #2
 8008bee:	607b      	str	r3, [r7, #4]
 8008bf0:	e001      	b.n	8008bf6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008bf6:	687b      	ldr	r3, [r7, #4]
	}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr
 8008c04:	20001f14 	.word	0x20001f14
 8008c08:	20001f30 	.word	0x20001f30

08008c0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d051      	beq.n	8008cc6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c26:	4b2a      	ldr	r3, [pc, #168]	@ (8008cd0 <xTaskPriorityInherit+0xc4>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d241      	bcs.n	8008cb4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	db06      	blt.n	8008c46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c38:	4b25      	ldr	r3, [pc, #148]	@ (8008cd0 <xTaskPriorityInherit+0xc4>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c3e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	6959      	ldr	r1, [r3, #20]
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c4e:	4613      	mov	r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4413      	add	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4a1f      	ldr	r2, [pc, #124]	@ (8008cd4 <xTaskPriorityInherit+0xc8>)
 8008c58:	4413      	add	r3, r2
 8008c5a:	4299      	cmp	r1, r3
 8008c5c:	d122      	bne.n	8008ca4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	3304      	adds	r3, #4
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fe f89e 	bl	8006da4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c68:	4b19      	ldr	r3, [pc, #100]	@ (8008cd0 <xTaskPriorityInherit+0xc4>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c76:	4b18      	ldr	r3, [pc, #96]	@ (8008cd8 <xTaskPriorityInherit+0xcc>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d903      	bls.n	8008c86 <xTaskPriorityInherit+0x7a>
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c82:	4a15      	ldr	r2, [pc, #84]	@ (8008cd8 <xTaskPriorityInherit+0xcc>)
 8008c84:	6013      	str	r3, [r2, #0]
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4413      	add	r3, r2
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	4a10      	ldr	r2, [pc, #64]	@ (8008cd4 <xTaskPriorityInherit+0xc8>)
 8008c94:	441a      	add	r2, r3
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	3304      	adds	r3, #4
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	4610      	mov	r0, r2
 8008c9e:	f7fe f824 	bl	8006cea <vListInsertEnd>
 8008ca2:	e004      	b.n	8008cae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8008cd0 <xTaskPriorityInherit+0xc4>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	60fb      	str	r3, [r7, #12]
 8008cb2:	e008      	b.n	8008cc6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008cb8:	4b05      	ldr	r3, [pc, #20]	@ (8008cd0 <xTaskPriorityInherit+0xc4>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d201      	bcs.n	8008cc6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
	}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	20001a34 	.word	0x20001a34
 8008cd4:	20001a38 	.word	0x20001a38
 8008cd8:	20001f10 	.word	0x20001f10

08008cdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b086      	sub	sp, #24
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d05c      	beq.n	8008dac <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008cf2:	4b31      	ldr	r3, [pc, #196]	@ (8008db8 <xTaskPriorityDisinherit+0xdc>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	693a      	ldr	r2, [r7, #16]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d00d      	beq.n	8008d18 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8008cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d00:	b672      	cpsid	i
 8008d02:	f383 8811 	msr	BASEPRI, r3
 8008d06:	f3bf 8f6f 	isb	sy
 8008d0a:	f3bf 8f4f 	dsb	sy
 8008d0e:	b662      	cpsie	i
 8008d10:	60fb      	str	r3, [r7, #12]
}
 8008d12:	bf00      	nop
 8008d14:	bf00      	nop
 8008d16:	e7fd      	b.n	8008d14 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10d      	bne.n	8008d3c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8008d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d24:	b672      	cpsid	i
 8008d26:	f383 8811 	msr	BASEPRI, r3
 8008d2a:	f3bf 8f6f 	isb	sy
 8008d2e:	f3bf 8f4f 	dsb	sy
 8008d32:	b662      	cpsie	i
 8008d34:	60bb      	str	r3, [r7, #8]
}
 8008d36:	bf00      	nop
 8008d38:	bf00      	nop
 8008d3a:	e7fd      	b.n	8008d38 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d40:	1e5a      	subs	r2, r3, #1
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d02c      	beq.n	8008dac <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d128      	bne.n	8008dac <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fe f820 	bl	8006da4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d70:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8008dbc <xTaskPriorityDisinherit+0xe0>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d903      	bls.n	8008d8c <xTaskPriorityDisinherit+0xb0>
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d88:	4a0c      	ldr	r2, [pc, #48]	@ (8008dbc <xTaskPriorityDisinherit+0xe0>)
 8008d8a:	6013      	str	r3, [r2, #0]
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d90:	4613      	mov	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	4a09      	ldr	r2, [pc, #36]	@ (8008dc0 <xTaskPriorityDisinherit+0xe4>)
 8008d9a:	441a      	add	r2, r3
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	3304      	adds	r3, #4
 8008da0:	4619      	mov	r1, r3
 8008da2:	4610      	mov	r0, r2
 8008da4:	f7fd ffa1 	bl	8006cea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008da8:	2301      	movs	r3, #1
 8008daa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008dac:	697b      	ldr	r3, [r7, #20]
	}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3718      	adds	r7, #24
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	20001a34 	.word	0x20001a34
 8008dbc:	20001f10 	.word	0x20001f10
 8008dc0:	20001a38 	.word	0x20001a38

08008dc4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b088      	sub	sp, #32
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d070      	beq.n	8008ebe <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10d      	bne.n	8008e00 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8008de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de8:	b672      	cpsid	i
 8008dea:	f383 8811 	msr	BASEPRI, r3
 8008dee:	f3bf 8f6f 	isb	sy
 8008df2:	f3bf 8f4f 	dsb	sy
 8008df6:	b662      	cpsie	i
 8008df8:	60fb      	str	r3, [r7, #12]
}
 8008dfa:	bf00      	nop
 8008dfc:	bf00      	nop
 8008dfe:	e7fd      	b.n	8008dfc <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e04:	683a      	ldr	r2, [r7, #0]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d902      	bls.n	8008e10 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	61fb      	str	r3, [r7, #28]
 8008e0e:	e002      	b.n	8008e16 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e14:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e1a:	69fa      	ldr	r2, [r7, #28]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d04e      	beq.n	8008ebe <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e24:	697a      	ldr	r2, [r7, #20]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d149      	bne.n	8008ebe <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008e2a:	4b27      	ldr	r3, [pc, #156]	@ (8008ec8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	69ba      	ldr	r2, [r7, #24]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d10d      	bne.n	8008e50 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8008e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e38:	b672      	cpsid	i
 8008e3a:	f383 8811 	msr	BASEPRI, r3
 8008e3e:	f3bf 8f6f 	isb	sy
 8008e42:	f3bf 8f4f 	dsb	sy
 8008e46:	b662      	cpsie	i
 8008e48:	60bb      	str	r3, [r7, #8]
}
 8008e4a:	bf00      	nop
 8008e4c:	bf00      	nop
 8008e4e:	e7fd      	b.n	8008e4c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e54:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	69fa      	ldr	r2, [r7, #28]
 8008e5a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	db04      	blt.n	8008e6e <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	6959      	ldr	r1, [r3, #20]
 8008e72:	693a      	ldr	r2, [r7, #16]
 8008e74:	4613      	mov	r3, r2
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	4413      	add	r3, r2
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	4a13      	ldr	r2, [pc, #76]	@ (8008ecc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008e7e:	4413      	add	r3, r2
 8008e80:	4299      	cmp	r1, r3
 8008e82:	d11c      	bne.n	8008ebe <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	3304      	adds	r3, #4
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7fd ff8b 	bl	8006da4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e92:	4b0f      	ldr	r3, [pc, #60]	@ (8008ed0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d903      	bls.n	8008ea2 <vTaskPriorityDisinheritAfterTimeout+0xde>
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e9e:	4a0c      	ldr	r2, [pc, #48]	@ (8008ed0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8008ea0:	6013      	str	r3, [r2, #0]
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	4413      	add	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	4a07      	ldr	r2, [pc, #28]	@ (8008ecc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008eb0:	441a      	add	r2, r3
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	3304      	adds	r3, #4
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	4610      	mov	r0, r2
 8008eba:	f7fd ff16 	bl	8006cea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ebe:	bf00      	nop
 8008ec0:	3720      	adds	r7, #32
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	20001a34 	.word	0x20001a34
 8008ecc:	20001a38 	.word	0x20001a38
 8008ed0:	20001f10 	.word	0x20001f10

08008ed4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008ed4:	b480      	push	{r7}
 8008ed6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008ed8:	4b07      	ldr	r3, [pc, #28]	@ (8008ef8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d004      	beq.n	8008eea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008ee0:	4b05      	ldr	r3, [pc, #20]	@ (8008ef8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ee6:	3201      	adds	r2, #1
 8008ee8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008eea:	4b03      	ldr	r3, [pc, #12]	@ (8008ef8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008eec:	681b      	ldr	r3, [r3, #0]
	}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr
 8008ef8:	20001a34 	.word	0x20001a34

08008efc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008f06:	4b21      	ldr	r3, [pc, #132]	@ (8008f8c <prvAddCurrentTaskToDelayedList+0x90>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f0c:	4b20      	ldr	r3, [pc, #128]	@ (8008f90 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	3304      	adds	r3, #4
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7fd ff46 	bl	8006da4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f1e:	d10a      	bne.n	8008f36 <prvAddCurrentTaskToDelayedList+0x3a>
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d007      	beq.n	8008f36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f26:	4b1a      	ldr	r3, [pc, #104]	@ (8008f90 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3304      	adds	r3, #4
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	4819      	ldr	r0, [pc, #100]	@ (8008f94 <prvAddCurrentTaskToDelayedList+0x98>)
 8008f30:	f7fd fedb 	bl	8006cea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008f34:	e026      	b.n	8008f84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f3e:	4b14      	ldr	r3, [pc, #80]	@ (8008f90 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d209      	bcs.n	8008f62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f4e:	4b12      	ldr	r3, [pc, #72]	@ (8008f98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	4b0f      	ldr	r3, [pc, #60]	@ (8008f90 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	3304      	adds	r3, #4
 8008f58:	4619      	mov	r1, r3
 8008f5a:	4610      	mov	r0, r2
 8008f5c:	f7fd fee9 	bl	8006d32 <vListInsert>
}
 8008f60:	e010      	b.n	8008f84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f62:	4b0e      	ldr	r3, [pc, #56]	@ (8008f9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	4b0a      	ldr	r3, [pc, #40]	@ (8008f90 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	3304      	adds	r3, #4
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	4610      	mov	r0, r2
 8008f70:	f7fd fedf 	bl	8006d32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f74:	4b0a      	ldr	r3, [pc, #40]	@ (8008fa0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d202      	bcs.n	8008f84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008f7e:	4a08      	ldr	r2, [pc, #32]	@ (8008fa0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	6013      	str	r3, [r2, #0]
}
 8008f84:	bf00      	nop
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	20001f0c 	.word	0x20001f0c
 8008f90:	20001a34 	.word	0x20001a34
 8008f94:	20001ef4 	.word	0x20001ef4
 8008f98:	20001ec4 	.word	0x20001ec4
 8008f9c:	20001ec0 	.word	0x20001ec0
 8008fa0:	20001f28 	.word	0x20001f28

08008fa4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b08a      	sub	sp, #40	@ 0x28
 8008fa8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008faa:	2300      	movs	r3, #0
 8008fac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008fae:	f000 fb21 	bl	80095f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800902c <xTimerCreateTimerTask+0x88>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d021      	beq.n	8008ffe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008fc2:	1d3a      	adds	r2, r7, #4
 8008fc4:	f107 0108 	add.w	r1, r7, #8
 8008fc8:	f107 030c 	add.w	r3, r7, #12
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7fd fe45 	bl	8006c5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008fd2:	6879      	ldr	r1, [r7, #4]
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	9202      	str	r2, [sp, #8]
 8008fda:	9301      	str	r3, [sp, #4]
 8008fdc:	2302      	movs	r3, #2
 8008fde:	9300      	str	r3, [sp, #0]
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	460a      	mov	r2, r1
 8008fe4:	4912      	ldr	r1, [pc, #72]	@ (8009030 <xTimerCreateTimerTask+0x8c>)
 8008fe6:	4813      	ldr	r0, [pc, #76]	@ (8009034 <xTimerCreateTimerTask+0x90>)
 8008fe8:	f7fe ff7a 	bl	8007ee0 <xTaskCreateStatic>
 8008fec:	4603      	mov	r3, r0
 8008fee:	4a12      	ldr	r2, [pc, #72]	@ (8009038 <xTimerCreateTimerTask+0x94>)
 8008ff0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008ff2:	4b11      	ldr	r3, [pc, #68]	@ (8009038 <xTimerCreateTimerTask+0x94>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10d      	bne.n	8009020 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8009004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009008:	b672      	cpsid	i
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	b662      	cpsie	i
 8009018:	613b      	str	r3, [r7, #16]
}
 800901a:	bf00      	nop
 800901c:	bf00      	nop
 800901e:	e7fd      	b.n	800901c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009020:	697b      	ldr	r3, [r7, #20]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3718      	adds	r7, #24
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	20001f64 	.word	0x20001f64
 8009030:	0800e520 	.word	0x0800e520
 8009034:	0800917d 	.word	0x0800917d
 8009038:	20001f68 	.word	0x20001f68

0800903c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b08a      	sub	sp, #40	@ 0x28
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
 8009048:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800904a:	2300      	movs	r3, #0
 800904c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10d      	bne.n	8009070 <xTimerGenericCommand+0x34>
	__asm volatile
 8009054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009058:	b672      	cpsid	i
 800905a:	f383 8811 	msr	BASEPRI, r3
 800905e:	f3bf 8f6f 	isb	sy
 8009062:	f3bf 8f4f 	dsb	sy
 8009066:	b662      	cpsie	i
 8009068:	623b      	str	r3, [r7, #32]
}
 800906a:	bf00      	nop
 800906c:	bf00      	nop
 800906e:	e7fd      	b.n	800906c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009070:	4b19      	ldr	r3, [pc, #100]	@ (80090d8 <xTimerGenericCommand+0x9c>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d02a      	beq.n	80090ce <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	2b05      	cmp	r3, #5
 8009088:	dc18      	bgt.n	80090bc <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800908a:	f7ff fda1 	bl	8008bd0 <xTaskGetSchedulerState>
 800908e:	4603      	mov	r3, r0
 8009090:	2b02      	cmp	r3, #2
 8009092:	d109      	bne.n	80090a8 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009094:	4b10      	ldr	r3, [pc, #64]	@ (80090d8 <xTimerGenericCommand+0x9c>)
 8009096:	6818      	ldr	r0, [r3, #0]
 8009098:	f107 0110 	add.w	r1, r7, #16
 800909c:	2300      	movs	r3, #0
 800909e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090a0:	f7fe f87a 	bl	8007198 <xQueueGenericSend>
 80090a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80090a6:	e012      	b.n	80090ce <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80090a8:	4b0b      	ldr	r3, [pc, #44]	@ (80090d8 <xTimerGenericCommand+0x9c>)
 80090aa:	6818      	ldr	r0, [r3, #0]
 80090ac:	f107 0110 	add.w	r1, r7, #16
 80090b0:	2300      	movs	r3, #0
 80090b2:	2200      	movs	r2, #0
 80090b4:	f7fe f870 	bl	8007198 <xQueueGenericSend>
 80090b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80090ba:	e008      	b.n	80090ce <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80090bc:	4b06      	ldr	r3, [pc, #24]	@ (80090d8 <xTimerGenericCommand+0x9c>)
 80090be:	6818      	ldr	r0, [r3, #0]
 80090c0:	f107 0110 	add.w	r1, r7, #16
 80090c4:	2300      	movs	r3, #0
 80090c6:	683a      	ldr	r2, [r7, #0]
 80090c8:	f7fe f970 	bl	80073ac <xQueueGenericSendFromISR>
 80090cc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80090ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3728      	adds	r7, #40	@ 0x28
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	20001f64 	.word	0x20001f64

080090dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b088      	sub	sp, #32
 80090e0:	af02      	add	r7, sp, #8
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090e6:	4b24      	ldr	r3, [pc, #144]	@ (8009178 <prvProcessExpiredTimer+0x9c>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	3304      	adds	r3, #4
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fd fe55 	bl	8006da4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009100:	f003 0304 	and.w	r3, r3, #4
 8009104:	2b00      	cmp	r3, #0
 8009106:	d025      	beq.n	8009154 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	699a      	ldr	r2, [r3, #24]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	18d1      	adds	r1, r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	683a      	ldr	r2, [r7, #0]
 8009114:	6978      	ldr	r0, [r7, #20]
 8009116:	f000 f8d7 	bl	80092c8 <prvInsertTimerInActiveList>
 800911a:	4603      	mov	r3, r0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d022      	beq.n	8009166 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009120:	2300      	movs	r3, #0
 8009122:	9300      	str	r3, [sp, #0]
 8009124:	2300      	movs	r3, #0
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	2100      	movs	r1, #0
 800912a:	6978      	ldr	r0, [r7, #20]
 800912c:	f7ff ff86 	bl	800903c <xTimerGenericCommand>
 8009130:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d116      	bne.n	8009166 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8009138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800913c:	b672      	cpsid	i
 800913e:	f383 8811 	msr	BASEPRI, r3
 8009142:	f3bf 8f6f 	isb	sy
 8009146:	f3bf 8f4f 	dsb	sy
 800914a:	b662      	cpsie	i
 800914c:	60fb      	str	r3, [r7, #12]
}
 800914e:	bf00      	nop
 8009150:	bf00      	nop
 8009152:	e7fd      	b.n	8009150 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800915a:	f023 0301 	bic.w	r3, r3, #1
 800915e:	b2da      	uxtb	r2, r3
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	6a1b      	ldr	r3, [r3, #32]
 800916a:	6978      	ldr	r0, [r7, #20]
 800916c:	4798      	blx	r3
}
 800916e:	bf00      	nop
 8009170:	3718      	adds	r7, #24
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	20001f5c 	.word	0x20001f5c

0800917c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009184:	f107 0308 	add.w	r3, r7, #8
 8009188:	4618      	mov	r0, r3
 800918a:	f000 f859 	bl	8009240 <prvGetNextExpireTime>
 800918e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	4619      	mov	r1, r3
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f000 f805 	bl	80091a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800919a:	f000 f8d7 	bl	800934c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800919e:	bf00      	nop
 80091a0:	e7f0      	b.n	8009184 <prvTimerTask+0x8>
	...

080091a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80091ae:	f7ff f909 	bl	80083c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80091b2:	f107 0308 	add.w	r3, r7, #8
 80091b6:	4618      	mov	r0, r3
 80091b8:	f000 f866 	bl	8009288 <prvSampleTimeNow>
 80091bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d130      	bne.n	8009226 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d10a      	bne.n	80091e0 <prvProcessTimerOrBlockTask+0x3c>
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d806      	bhi.n	80091e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80091d2:	f7ff f905 	bl	80083e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80091d6:	68f9      	ldr	r1, [r7, #12]
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f7ff ff7f 	bl	80090dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80091de:	e024      	b.n	800922a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d008      	beq.n	80091f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80091e6:	4b13      	ldr	r3, [pc, #76]	@ (8009234 <prvProcessTimerOrBlockTask+0x90>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d101      	bne.n	80091f4 <prvProcessTimerOrBlockTask+0x50>
 80091f0:	2301      	movs	r3, #1
 80091f2:	e000      	b.n	80091f6 <prvProcessTimerOrBlockTask+0x52>
 80091f4:	2300      	movs	r3, #0
 80091f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80091f8:	4b0f      	ldr	r3, [pc, #60]	@ (8009238 <prvProcessTimerOrBlockTask+0x94>)
 80091fa:	6818      	ldr	r0, [r3, #0]
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	683a      	ldr	r2, [r7, #0]
 8009204:	4619      	mov	r1, r3
 8009206:	f7fe fe37 	bl	8007e78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800920a:	f7ff f8e9 	bl	80083e0 <xTaskResumeAll>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d10a      	bne.n	800922a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009214:	4b09      	ldr	r3, [pc, #36]	@ (800923c <prvProcessTimerOrBlockTask+0x98>)
 8009216:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800921a:	601a      	str	r2, [r3, #0]
 800921c:	f3bf 8f4f 	dsb	sy
 8009220:	f3bf 8f6f 	isb	sy
}
 8009224:	e001      	b.n	800922a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009226:	f7ff f8db 	bl	80083e0 <xTaskResumeAll>
}
 800922a:	bf00      	nop
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	20001f60 	.word	0x20001f60
 8009238:	20001f64 	.word	0x20001f64
 800923c:	e000ed04 	.word	0xe000ed04

08009240 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009248:	4b0e      	ldr	r3, [pc, #56]	@ (8009284 <prvGetNextExpireTime+0x44>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d101      	bne.n	8009256 <prvGetNextExpireTime+0x16>
 8009252:	2201      	movs	r2, #1
 8009254:	e000      	b.n	8009258 <prvGetNextExpireTime+0x18>
 8009256:	2200      	movs	r2, #0
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d105      	bne.n	8009270 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009264:	4b07      	ldr	r3, [pc, #28]	@ (8009284 <prvGetNextExpireTime+0x44>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	60fb      	str	r3, [r7, #12]
 800926e:	e001      	b.n	8009274 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009270:	2300      	movs	r3, #0
 8009272:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009274:	68fb      	ldr	r3, [r7, #12]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3714      	adds	r7, #20
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	20001f5c 	.word	0x20001f5c

08009288 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009290:	f7ff f946 	bl	8008520 <xTaskGetTickCount>
 8009294:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009296:	4b0b      	ldr	r3, [pc, #44]	@ (80092c4 <prvSampleTimeNow+0x3c>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	429a      	cmp	r2, r3
 800929e:	d205      	bcs.n	80092ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80092a0:	f000 f940 	bl	8009524 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	601a      	str	r2, [r3, #0]
 80092aa:	e002      	b.n	80092b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80092b2:	4a04      	ldr	r2, [pc, #16]	@ (80092c4 <prvSampleTimeNow+0x3c>)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80092b8:	68fb      	ldr	r3, [r7, #12]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	20001f6c 	.word	0x20001f6c

080092c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	607a      	str	r2, [r7, #4]
 80092d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80092d6:	2300      	movs	r3, #0
 80092d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80092e6:	68ba      	ldr	r2, [r7, #8]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d812      	bhi.n	8009314 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	1ad2      	subs	r2, r2, r3
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d302      	bcc.n	8009302 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80092fc:	2301      	movs	r3, #1
 80092fe:	617b      	str	r3, [r7, #20]
 8009300:	e01b      	b.n	800933a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009302:	4b10      	ldr	r3, [pc, #64]	@ (8009344 <prvInsertTimerInActiveList+0x7c>)
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	3304      	adds	r3, #4
 800930a:	4619      	mov	r1, r3
 800930c:	4610      	mov	r0, r2
 800930e:	f7fd fd10 	bl	8006d32 <vListInsert>
 8009312:	e012      	b.n	800933a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	429a      	cmp	r2, r3
 800931a:	d206      	bcs.n	800932a <prvInsertTimerInActiveList+0x62>
 800931c:	68ba      	ldr	r2, [r7, #8]
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	429a      	cmp	r2, r3
 8009322:	d302      	bcc.n	800932a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009324:	2301      	movs	r3, #1
 8009326:	617b      	str	r3, [r7, #20]
 8009328:	e007      	b.n	800933a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800932a:	4b07      	ldr	r3, [pc, #28]	@ (8009348 <prvInsertTimerInActiveList+0x80>)
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	3304      	adds	r3, #4
 8009332:	4619      	mov	r1, r3
 8009334:	4610      	mov	r0, r2
 8009336:	f7fd fcfc 	bl	8006d32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800933a:	697b      	ldr	r3, [r7, #20]
}
 800933c:	4618      	mov	r0, r3
 800933e:	3718      	adds	r7, #24
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	20001f60 	.word	0x20001f60
 8009348:	20001f5c 	.word	0x20001f5c

0800934c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b08e      	sub	sp, #56	@ 0x38
 8009350:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009352:	e0d4      	b.n	80094fe <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2b00      	cmp	r3, #0
 8009358:	da1b      	bge.n	8009392 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800935a:	1d3b      	adds	r3, r7, #4
 800935c:	3304      	adds	r3, #4
 800935e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009362:	2b00      	cmp	r3, #0
 8009364:	d10d      	bne.n	8009382 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8009366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800936a:	b672      	cpsid	i
 800936c:	f383 8811 	msr	BASEPRI, r3
 8009370:	f3bf 8f6f 	isb	sy
 8009374:	f3bf 8f4f 	dsb	sy
 8009378:	b662      	cpsie	i
 800937a:	61fb      	str	r3, [r7, #28]
}
 800937c:	bf00      	nop
 800937e:	bf00      	nop
 8009380:	e7fd      	b.n	800937e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009388:	6850      	ldr	r0, [r2, #4]
 800938a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800938c:	6892      	ldr	r2, [r2, #8]
 800938e:	4611      	mov	r1, r2
 8009390:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2b00      	cmp	r3, #0
 8009396:	f2c0 80b2 	blt.w	80094fe <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800939e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a0:	695b      	ldr	r3, [r3, #20]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d004      	beq.n	80093b0 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a8:	3304      	adds	r3, #4
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fd fcfa 	bl	8006da4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093b0:	463b      	mov	r3, r7
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7ff ff68 	bl	8009288 <prvSampleTimeNow>
 80093b8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2b09      	cmp	r3, #9
 80093be:	f200 809b 	bhi.w	80094f8 <prvProcessReceivedCommands+0x1ac>
 80093c2:	a201      	add	r2, pc, #4	@ (adr r2, 80093c8 <prvProcessReceivedCommands+0x7c>)
 80093c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c8:	080093f1 	.word	0x080093f1
 80093cc:	080093f1 	.word	0x080093f1
 80093d0:	080093f1 	.word	0x080093f1
 80093d4:	0800946b 	.word	0x0800946b
 80093d8:	0800947f 	.word	0x0800947f
 80093dc:	080094cf 	.word	0x080094cf
 80093e0:	080093f1 	.word	0x080093f1
 80093e4:	080093f1 	.word	0x080093f1
 80093e8:	0800946b 	.word	0x0800946b
 80093ec:	0800947f 	.word	0x0800947f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80093f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093f6:	f043 0301 	orr.w	r3, r3, #1
 80093fa:	b2da      	uxtb	r2, r3
 80093fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009402:	68ba      	ldr	r2, [r7, #8]
 8009404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009406:	699b      	ldr	r3, [r3, #24]
 8009408:	18d1      	adds	r1, r2, r3
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800940e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009410:	f7ff ff5a 	bl	80092c8 <prvInsertTimerInActiveList>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d070      	beq.n	80094fc <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800941a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800941c:	6a1b      	ldr	r3, [r3, #32]
 800941e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009420:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009424:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009428:	f003 0304 	and.w	r3, r3, #4
 800942c:	2b00      	cmp	r3, #0
 800942e:	d065      	beq.n	80094fc <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009434:	699b      	ldr	r3, [r3, #24]
 8009436:	441a      	add	r2, r3
 8009438:	2300      	movs	r3, #0
 800943a:	9300      	str	r3, [sp, #0]
 800943c:	2300      	movs	r3, #0
 800943e:	2100      	movs	r1, #0
 8009440:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009442:	f7ff fdfb 	bl	800903c <xTimerGenericCommand>
 8009446:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009448:	6a3b      	ldr	r3, [r7, #32]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d156      	bne.n	80094fc <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800944e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009452:	b672      	cpsid	i
 8009454:	f383 8811 	msr	BASEPRI, r3
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	b662      	cpsie	i
 8009462:	61bb      	str	r3, [r7, #24]
}
 8009464:	bf00      	nop
 8009466:	bf00      	nop
 8009468:	e7fd      	b.n	8009466 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800946a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009470:	f023 0301 	bic.w	r3, r3, #1
 8009474:	b2da      	uxtb	r2, r3
 8009476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009478:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800947c:	e03f      	b.n	80094fe <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800947e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009480:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009484:	f043 0301 	orr.w	r3, r3, #1
 8009488:	b2da      	uxtb	r2, r3
 800948a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800948c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009490:	68ba      	ldr	r2, [r7, #8]
 8009492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009494:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009498:	699b      	ldr	r3, [r3, #24]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10d      	bne.n	80094ba <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800949e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094a2:	b672      	cpsid	i
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	b662      	cpsie	i
 80094b2:	617b      	str	r3, [r7, #20]
}
 80094b4:	bf00      	nop
 80094b6:	bf00      	nop
 80094b8:	e7fd      	b.n	80094b6 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80094ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094bc:	699a      	ldr	r2, [r3, #24]
 80094be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c0:	18d1      	adds	r1, r2, r3
 80094c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094c8:	f7ff fefe 	bl	80092c8 <prvInsertTimerInActiveList>
					break;
 80094cc:	e017      	b.n	80094fe <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80094ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094d4:	f003 0302 	and.w	r3, r3, #2
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d103      	bne.n	80094e4 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80094dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094de:	f000 fbd1 	bl	8009c84 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80094e2:	e00c      	b.n	80094fe <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094ea:	f023 0301 	bic.w	r3, r3, #1
 80094ee:	b2da      	uxtb	r2, r3
 80094f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80094f6:	e002      	b.n	80094fe <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80094f8:	bf00      	nop
 80094fa:	e000      	b.n	80094fe <prvProcessReceivedCommands+0x1b2>
					break;
 80094fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80094fe:	4b08      	ldr	r3, [pc, #32]	@ (8009520 <prvProcessReceivedCommands+0x1d4>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	1d39      	adds	r1, r7, #4
 8009504:	2200      	movs	r2, #0
 8009506:	4618      	mov	r0, r3
 8009508:	f7fe f88c 	bl	8007624 <xQueueReceive>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	f47f af20 	bne.w	8009354 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009514:	bf00      	nop
 8009516:	bf00      	nop
 8009518:	3730      	adds	r7, #48	@ 0x30
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	20001f64 	.word	0x20001f64

08009524 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b088      	sub	sp, #32
 8009528:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800952a:	e04b      	b.n	80095c4 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800952c:	4b2f      	ldr	r3, [pc, #188]	@ (80095ec <prvSwitchTimerLists+0xc8>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009536:	4b2d      	ldr	r3, [pc, #180]	@ (80095ec <prvSwitchTimerLists+0xc8>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	3304      	adds	r3, #4
 8009544:	4618      	mov	r0, r3
 8009546:	f7fd fc2d 	bl	8006da4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6a1b      	ldr	r3, [r3, #32]
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009558:	f003 0304 	and.w	r3, r3, #4
 800955c:	2b00      	cmp	r3, #0
 800955e:	d031      	beq.n	80095c4 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	699b      	ldr	r3, [r3, #24]
 8009564:	693a      	ldr	r2, [r7, #16]
 8009566:	4413      	add	r3, r2
 8009568:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	429a      	cmp	r2, r3
 8009570:	d90e      	bls.n	8009590 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	68fa      	ldr	r2, [r7, #12]
 800957c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800957e:	4b1b      	ldr	r3, [pc, #108]	@ (80095ec <prvSwitchTimerLists+0xc8>)
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	3304      	adds	r3, #4
 8009586:	4619      	mov	r1, r3
 8009588:	4610      	mov	r0, r2
 800958a:	f7fd fbd2 	bl	8006d32 <vListInsert>
 800958e:	e019      	b.n	80095c4 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009590:	2300      	movs	r3, #0
 8009592:	9300      	str	r3, [sp, #0]
 8009594:	2300      	movs	r3, #0
 8009596:	693a      	ldr	r2, [r7, #16]
 8009598:	2100      	movs	r1, #0
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f7ff fd4e 	bl	800903c <xTimerGenericCommand>
 80095a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d10d      	bne.n	80095c4 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80095a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ac:	b672      	cpsid	i
 80095ae:	f383 8811 	msr	BASEPRI, r3
 80095b2:	f3bf 8f6f 	isb	sy
 80095b6:	f3bf 8f4f 	dsb	sy
 80095ba:	b662      	cpsie	i
 80095bc:	603b      	str	r3, [r7, #0]
}
 80095be:	bf00      	nop
 80095c0:	bf00      	nop
 80095c2:	e7fd      	b.n	80095c0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095c4:	4b09      	ldr	r3, [pc, #36]	@ (80095ec <prvSwitchTimerLists+0xc8>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1ae      	bne.n	800952c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80095ce:	4b07      	ldr	r3, [pc, #28]	@ (80095ec <prvSwitchTimerLists+0xc8>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80095d4:	4b06      	ldr	r3, [pc, #24]	@ (80095f0 <prvSwitchTimerLists+0xcc>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a04      	ldr	r2, [pc, #16]	@ (80095ec <prvSwitchTimerLists+0xc8>)
 80095da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80095dc:	4a04      	ldr	r2, [pc, #16]	@ (80095f0 <prvSwitchTimerLists+0xcc>)
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	6013      	str	r3, [r2, #0]
}
 80095e2:	bf00      	nop
 80095e4:	3718      	adds	r7, #24
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	20001f5c 	.word	0x20001f5c
 80095f0:	20001f60 	.word	0x20001f60

080095f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80095fa:	f000 f947 	bl	800988c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80095fe:	4b15      	ldr	r3, [pc, #84]	@ (8009654 <prvCheckForValidListAndQueue+0x60>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d120      	bne.n	8009648 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009606:	4814      	ldr	r0, [pc, #80]	@ (8009658 <prvCheckForValidListAndQueue+0x64>)
 8009608:	f7fd fb42 	bl	8006c90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800960c:	4813      	ldr	r0, [pc, #76]	@ (800965c <prvCheckForValidListAndQueue+0x68>)
 800960e:	f7fd fb3f 	bl	8006c90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009612:	4b13      	ldr	r3, [pc, #76]	@ (8009660 <prvCheckForValidListAndQueue+0x6c>)
 8009614:	4a10      	ldr	r2, [pc, #64]	@ (8009658 <prvCheckForValidListAndQueue+0x64>)
 8009616:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009618:	4b12      	ldr	r3, [pc, #72]	@ (8009664 <prvCheckForValidListAndQueue+0x70>)
 800961a:	4a10      	ldr	r2, [pc, #64]	@ (800965c <prvCheckForValidListAndQueue+0x68>)
 800961c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800961e:	2300      	movs	r3, #0
 8009620:	9300      	str	r3, [sp, #0]
 8009622:	4b11      	ldr	r3, [pc, #68]	@ (8009668 <prvCheckForValidListAndQueue+0x74>)
 8009624:	4a11      	ldr	r2, [pc, #68]	@ (800966c <prvCheckForValidListAndQueue+0x78>)
 8009626:	2110      	movs	r1, #16
 8009628:	200a      	movs	r0, #10
 800962a:	f7fd fc51 	bl	8006ed0 <xQueueGenericCreateStatic>
 800962e:	4603      	mov	r3, r0
 8009630:	4a08      	ldr	r2, [pc, #32]	@ (8009654 <prvCheckForValidListAndQueue+0x60>)
 8009632:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009634:	4b07      	ldr	r3, [pc, #28]	@ (8009654 <prvCheckForValidListAndQueue+0x60>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d005      	beq.n	8009648 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800963c:	4b05      	ldr	r3, [pc, #20]	@ (8009654 <prvCheckForValidListAndQueue+0x60>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	490b      	ldr	r1, [pc, #44]	@ (8009670 <prvCheckForValidListAndQueue+0x7c>)
 8009642:	4618      	mov	r0, r3
 8009644:	f7fe fbc4 	bl	8007dd0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009648:	f000 f956 	bl	80098f8 <vPortExitCritical>
}
 800964c:	bf00      	nop
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	20001f64 	.word	0x20001f64
 8009658:	20001f34 	.word	0x20001f34
 800965c:	20001f48 	.word	0x20001f48
 8009660:	20001f5c 	.word	0x20001f5c
 8009664:	20001f60 	.word	0x20001f60
 8009668:	20002010 	.word	0x20002010
 800966c:	20001f70 	.word	0x20001f70
 8009670:	0800e528 	.word	0x0800e528

08009674 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009674:	b480      	push	{r7}
 8009676:	b085      	sub	sp, #20
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	3b04      	subs	r3, #4
 8009684:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800968c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	3b04      	subs	r3, #4
 8009692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	f023 0201 	bic.w	r2, r3, #1
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	3b04      	subs	r3, #4
 80096a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096a4:	4a0c      	ldr	r2, [pc, #48]	@ (80096d8 <pxPortInitialiseStack+0x64>)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	3b14      	subs	r3, #20
 80096ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	3b04      	subs	r3, #4
 80096ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f06f 0202 	mvn.w	r2, #2
 80096c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	3b20      	subs	r3, #32
 80096c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096ca:	68fb      	ldr	r3, [r7, #12]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3714      	adds	r7, #20
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr
 80096d8:	080096dd 	.word	0x080096dd

080096dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80096e2:	2300      	movs	r3, #0
 80096e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80096e6:	4b15      	ldr	r3, [pc, #84]	@ (800973c <prvTaskExitError+0x60>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ee:	d00d      	beq.n	800970c <prvTaskExitError+0x30>
	__asm volatile
 80096f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f4:	b672      	cpsid	i
 80096f6:	f383 8811 	msr	BASEPRI, r3
 80096fa:	f3bf 8f6f 	isb	sy
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	b662      	cpsie	i
 8009704:	60fb      	str	r3, [r7, #12]
}
 8009706:	bf00      	nop
 8009708:	bf00      	nop
 800970a:	e7fd      	b.n	8009708 <prvTaskExitError+0x2c>
	__asm volatile
 800970c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009710:	b672      	cpsid	i
 8009712:	f383 8811 	msr	BASEPRI, r3
 8009716:	f3bf 8f6f 	isb	sy
 800971a:	f3bf 8f4f 	dsb	sy
 800971e:	b662      	cpsie	i
 8009720:	60bb      	str	r3, [r7, #8]
}
 8009722:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009724:	bf00      	nop
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d0fc      	beq.n	8009726 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800972c:	bf00      	nop
 800972e:	bf00      	nop
 8009730:	3714      	adds	r7, #20
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	2000000c 	.word	0x2000000c

08009740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009740:	4b07      	ldr	r3, [pc, #28]	@ (8009760 <pxCurrentTCBConst2>)
 8009742:	6819      	ldr	r1, [r3, #0]
 8009744:	6808      	ldr	r0, [r1, #0]
 8009746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974a:	f380 8809 	msr	PSP, r0
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f04f 0000 	mov.w	r0, #0
 8009756:	f380 8811 	msr	BASEPRI, r0
 800975a:	4770      	bx	lr
 800975c:	f3af 8000 	nop.w

08009760 <pxCurrentTCBConst2>:
 8009760:	20001a34 	.word	0x20001a34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009764:	bf00      	nop
 8009766:	bf00      	nop

08009768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009768:	4808      	ldr	r0, [pc, #32]	@ (800978c <prvPortStartFirstTask+0x24>)
 800976a:	6800      	ldr	r0, [r0, #0]
 800976c:	6800      	ldr	r0, [r0, #0]
 800976e:	f380 8808 	msr	MSP, r0
 8009772:	f04f 0000 	mov.w	r0, #0
 8009776:	f380 8814 	msr	CONTROL, r0
 800977a:	b662      	cpsie	i
 800977c:	b661      	cpsie	f
 800977e:	f3bf 8f4f 	dsb	sy
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	df00      	svc	0
 8009788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800978a:	bf00      	nop
 800978c:	e000ed08 	.word	0xe000ed08

08009790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009796:	4b37      	ldr	r3, [pc, #220]	@ (8009874 <xPortStartScheduler+0xe4>)
 8009798:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	22ff      	movs	r2, #255	@ 0xff
 80097a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80097b0:	78fb      	ldrb	r3, [r7, #3]
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80097b8:	b2da      	uxtb	r2, r3
 80097ba:	4b2f      	ldr	r3, [pc, #188]	@ (8009878 <xPortStartScheduler+0xe8>)
 80097bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097be:	4b2f      	ldr	r3, [pc, #188]	@ (800987c <xPortStartScheduler+0xec>)
 80097c0:	2207      	movs	r2, #7
 80097c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097c4:	e009      	b.n	80097da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80097c6:	4b2d      	ldr	r3, [pc, #180]	@ (800987c <xPortStartScheduler+0xec>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	3b01      	subs	r3, #1
 80097cc:	4a2b      	ldr	r2, [pc, #172]	@ (800987c <xPortStartScheduler+0xec>)
 80097ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097d0:	78fb      	ldrb	r3, [r7, #3]
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	005b      	lsls	r3, r3, #1
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097da:	78fb      	ldrb	r3, [r7, #3]
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097e2:	2b80      	cmp	r3, #128	@ 0x80
 80097e4:	d0ef      	beq.n	80097c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097e6:	4b25      	ldr	r3, [pc, #148]	@ (800987c <xPortStartScheduler+0xec>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f1c3 0307 	rsb	r3, r3, #7
 80097ee:	2b04      	cmp	r3, #4
 80097f0:	d00d      	beq.n	800980e <xPortStartScheduler+0x7e>
	__asm volatile
 80097f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f6:	b672      	cpsid	i
 80097f8:	f383 8811 	msr	BASEPRI, r3
 80097fc:	f3bf 8f6f 	isb	sy
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	b662      	cpsie	i
 8009806:	60bb      	str	r3, [r7, #8]
}
 8009808:	bf00      	nop
 800980a:	bf00      	nop
 800980c:	e7fd      	b.n	800980a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800980e:	4b1b      	ldr	r3, [pc, #108]	@ (800987c <xPortStartScheduler+0xec>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	021b      	lsls	r3, r3, #8
 8009814:	4a19      	ldr	r2, [pc, #100]	@ (800987c <xPortStartScheduler+0xec>)
 8009816:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009818:	4b18      	ldr	r3, [pc, #96]	@ (800987c <xPortStartScheduler+0xec>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009820:	4a16      	ldr	r2, [pc, #88]	@ (800987c <xPortStartScheduler+0xec>)
 8009822:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	b2da      	uxtb	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800982c:	4b14      	ldr	r3, [pc, #80]	@ (8009880 <xPortStartScheduler+0xf0>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a13      	ldr	r2, [pc, #76]	@ (8009880 <xPortStartScheduler+0xf0>)
 8009832:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009836:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009838:	4b11      	ldr	r3, [pc, #68]	@ (8009880 <xPortStartScheduler+0xf0>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a10      	ldr	r2, [pc, #64]	@ (8009880 <xPortStartScheduler+0xf0>)
 800983e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009842:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009844:	f000 f8dc 	bl	8009a00 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009848:	4b0e      	ldr	r3, [pc, #56]	@ (8009884 <xPortStartScheduler+0xf4>)
 800984a:	2200      	movs	r2, #0
 800984c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800984e:	f000 f8fb 	bl	8009a48 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009852:	4b0d      	ldr	r3, [pc, #52]	@ (8009888 <xPortStartScheduler+0xf8>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a0c      	ldr	r2, [pc, #48]	@ (8009888 <xPortStartScheduler+0xf8>)
 8009858:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800985c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800985e:	f7ff ff83 	bl	8009768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009862:	f7fe ff29 	bl	80086b8 <vTaskSwitchContext>
	prvTaskExitError();
 8009866:	f7ff ff39 	bl	80096dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800986a:	2300      	movs	r3, #0
}
 800986c:	4618      	mov	r0, r3
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	e000e400 	.word	0xe000e400
 8009878:	20002060 	.word	0x20002060
 800987c:	20002064 	.word	0x20002064
 8009880:	e000ed20 	.word	0xe000ed20
 8009884:	2000000c 	.word	0x2000000c
 8009888:	e000ef34 	.word	0xe000ef34

0800988c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
	__asm volatile
 8009892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009896:	b672      	cpsid	i
 8009898:	f383 8811 	msr	BASEPRI, r3
 800989c:	f3bf 8f6f 	isb	sy
 80098a0:	f3bf 8f4f 	dsb	sy
 80098a4:	b662      	cpsie	i
 80098a6:	607b      	str	r3, [r7, #4]
}
 80098a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80098aa:	4b11      	ldr	r3, [pc, #68]	@ (80098f0 <vPortEnterCritical+0x64>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	3301      	adds	r3, #1
 80098b0:	4a0f      	ldr	r2, [pc, #60]	@ (80098f0 <vPortEnterCritical+0x64>)
 80098b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80098b4:	4b0e      	ldr	r3, [pc, #56]	@ (80098f0 <vPortEnterCritical+0x64>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d112      	bne.n	80098e2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80098bc:	4b0d      	ldr	r3, [pc, #52]	@ (80098f4 <vPortEnterCritical+0x68>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00d      	beq.n	80098e2 <vPortEnterCritical+0x56>
	__asm volatile
 80098c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ca:	b672      	cpsid	i
 80098cc:	f383 8811 	msr	BASEPRI, r3
 80098d0:	f3bf 8f6f 	isb	sy
 80098d4:	f3bf 8f4f 	dsb	sy
 80098d8:	b662      	cpsie	i
 80098da:	603b      	str	r3, [r7, #0]
}
 80098dc:	bf00      	nop
 80098de:	bf00      	nop
 80098e0:	e7fd      	b.n	80098de <vPortEnterCritical+0x52>
	}
}
 80098e2:	bf00      	nop
 80098e4:	370c      	adds	r7, #12
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	2000000c 	.word	0x2000000c
 80098f4:	e000ed04 	.word	0xe000ed04

080098f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098fe:	4b13      	ldr	r3, [pc, #76]	@ (800994c <vPortExitCritical+0x54>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d10d      	bne.n	8009922 <vPortExitCritical+0x2a>
	__asm volatile
 8009906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800990a:	b672      	cpsid	i
 800990c:	f383 8811 	msr	BASEPRI, r3
 8009910:	f3bf 8f6f 	isb	sy
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	b662      	cpsie	i
 800991a:	607b      	str	r3, [r7, #4]
}
 800991c:	bf00      	nop
 800991e:	bf00      	nop
 8009920:	e7fd      	b.n	800991e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009922:	4b0a      	ldr	r3, [pc, #40]	@ (800994c <vPortExitCritical+0x54>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	3b01      	subs	r3, #1
 8009928:	4a08      	ldr	r2, [pc, #32]	@ (800994c <vPortExitCritical+0x54>)
 800992a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800992c:	4b07      	ldr	r3, [pc, #28]	@ (800994c <vPortExitCritical+0x54>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d105      	bne.n	8009940 <vPortExitCritical+0x48>
 8009934:	2300      	movs	r3, #0
 8009936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	f383 8811 	msr	BASEPRI, r3
}
 800993e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009940:	bf00      	nop
 8009942:	370c      	adds	r7, #12
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr
 800994c:	2000000c 	.word	0x2000000c

08009950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009950:	f3ef 8009 	mrs	r0, PSP
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	4b15      	ldr	r3, [pc, #84]	@ (80099b0 <pxCurrentTCBConst>)
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	f01e 0f10 	tst.w	lr, #16
 8009960:	bf08      	it	eq
 8009962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996a:	6010      	str	r0, [r2, #0]
 800996c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009970:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009974:	b672      	cpsid	i
 8009976:	f380 8811 	msr	BASEPRI, r0
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	b662      	cpsie	i
 8009984:	f7fe fe98 	bl	80086b8 <vTaskSwitchContext>
 8009988:	f04f 0000 	mov.w	r0, #0
 800998c:	f380 8811 	msr	BASEPRI, r0
 8009990:	bc09      	pop	{r0, r3}
 8009992:	6819      	ldr	r1, [r3, #0]
 8009994:	6808      	ldr	r0, [r1, #0]
 8009996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800999a:	f01e 0f10 	tst.w	lr, #16
 800999e:	bf08      	it	eq
 80099a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80099a4:	f380 8809 	msr	PSP, r0
 80099a8:	f3bf 8f6f 	isb	sy
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop

080099b0 <pxCurrentTCBConst>:
 80099b0:	20001a34 	.word	0x20001a34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80099b4:	bf00      	nop
 80099b6:	bf00      	nop

080099b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
	__asm volatile
 80099be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c2:	b672      	cpsid	i
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	b662      	cpsie	i
 80099d2:	607b      	str	r3, [r7, #4]
}
 80099d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099d6:	f7fe fdb3 	bl	8008540 <xTaskIncrementTick>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d003      	beq.n	80099e8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80099e0:	4b06      	ldr	r3, [pc, #24]	@ (80099fc <SysTick_Handler+0x44>)
 80099e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099e6:	601a      	str	r2, [r3, #0]
 80099e8:	2300      	movs	r3, #0
 80099ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	f383 8811 	msr	BASEPRI, r3
}
 80099f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80099f4:	bf00      	nop
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	e000ed04 	.word	0xe000ed04

08009a00 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a00:	b480      	push	{r7}
 8009a02:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a04:	4b0b      	ldr	r3, [pc, #44]	@ (8009a34 <vPortSetupTimerInterrupt+0x34>)
 8009a06:	2200      	movs	r2, #0
 8009a08:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8009a38 <vPortSetupTimerInterrupt+0x38>)
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a10:	4b0a      	ldr	r3, [pc, #40]	@ (8009a3c <vPortSetupTimerInterrupt+0x3c>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a0a      	ldr	r2, [pc, #40]	@ (8009a40 <vPortSetupTimerInterrupt+0x40>)
 8009a16:	fba2 2303 	umull	r2, r3, r2, r3
 8009a1a:	099b      	lsrs	r3, r3, #6
 8009a1c:	4a09      	ldr	r2, [pc, #36]	@ (8009a44 <vPortSetupTimerInterrupt+0x44>)
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a22:	4b04      	ldr	r3, [pc, #16]	@ (8009a34 <vPortSetupTimerInterrupt+0x34>)
 8009a24:	2207      	movs	r2, #7
 8009a26:	601a      	str	r2, [r3, #0]
}
 8009a28:	bf00      	nop
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	e000e010 	.word	0xe000e010
 8009a38:	e000e018 	.word	0xe000e018
 8009a3c:	20000000 	.word	0x20000000
 8009a40:	10624dd3 	.word	0x10624dd3
 8009a44:	e000e014 	.word	0xe000e014

08009a48 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a48:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009a58 <vPortEnableVFP+0x10>
 8009a4c:	6801      	ldr	r1, [r0, #0]
 8009a4e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009a52:	6001      	str	r1, [r0, #0]
 8009a54:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a56:	bf00      	nop
 8009a58:	e000ed88 	.word	0xe000ed88

08009a5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a62:	f3ef 8305 	mrs	r3, IPSR
 8009a66:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2b0f      	cmp	r3, #15
 8009a6c:	d917      	bls.n	8009a9e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8009ad8 <vPortValidateInterruptPriority+0x7c>)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	4413      	add	r3, r2
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a78:	4b18      	ldr	r3, [pc, #96]	@ (8009adc <vPortValidateInterruptPriority+0x80>)
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	7afa      	ldrb	r2, [r7, #11]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d20d      	bcs.n	8009a9e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a86:	b672      	cpsid	i
 8009a88:	f383 8811 	msr	BASEPRI, r3
 8009a8c:	f3bf 8f6f 	isb	sy
 8009a90:	f3bf 8f4f 	dsb	sy
 8009a94:	b662      	cpsie	i
 8009a96:	607b      	str	r3, [r7, #4]
}
 8009a98:	bf00      	nop
 8009a9a:	bf00      	nop
 8009a9c:	e7fd      	b.n	8009a9a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a9e:	4b10      	ldr	r3, [pc, #64]	@ (8009ae0 <vPortValidateInterruptPriority+0x84>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8009ae4 <vPortValidateInterruptPriority+0x88>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d90d      	bls.n	8009aca <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8009aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab2:	b672      	cpsid	i
 8009ab4:	f383 8811 	msr	BASEPRI, r3
 8009ab8:	f3bf 8f6f 	isb	sy
 8009abc:	f3bf 8f4f 	dsb	sy
 8009ac0:	b662      	cpsie	i
 8009ac2:	603b      	str	r3, [r7, #0]
}
 8009ac4:	bf00      	nop
 8009ac6:	bf00      	nop
 8009ac8:	e7fd      	b.n	8009ac6 <vPortValidateInterruptPriority+0x6a>
	}
 8009aca:	bf00      	nop
 8009acc:	3714      	adds	r7, #20
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr
 8009ad6:	bf00      	nop
 8009ad8:	e000e3f0 	.word	0xe000e3f0
 8009adc:	20002060 	.word	0x20002060
 8009ae0:	e000ed0c 	.word	0xe000ed0c
 8009ae4:	20002064 	.word	0x20002064

08009ae8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b08a      	sub	sp, #40	@ 0x28
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009af0:	2300      	movs	r3, #0
 8009af2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009af4:	f7fe fc66 	bl	80083c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009af8:	4b5d      	ldr	r3, [pc, #372]	@ (8009c70 <pvPortMalloc+0x188>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d101      	bne.n	8009b04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009b00:	f000 f920 	bl	8009d44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b04:	4b5b      	ldr	r3, [pc, #364]	@ (8009c74 <pvPortMalloc+0x18c>)
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f040 8094 	bne.w	8009c3a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d020      	beq.n	8009b5a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8009b18:	2208      	movs	r2, #8
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f003 0307 	and.w	r3, r3, #7
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d017      	beq.n	8009b5a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f023 0307 	bic.w	r3, r3, #7
 8009b30:	3308      	adds	r3, #8
 8009b32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f003 0307 	and.w	r3, r3, #7
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00d      	beq.n	8009b5a <pvPortMalloc+0x72>
	__asm volatile
 8009b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b42:	b672      	cpsid	i
 8009b44:	f383 8811 	msr	BASEPRI, r3
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	b662      	cpsie	i
 8009b52:	617b      	str	r3, [r7, #20]
}
 8009b54:	bf00      	nop
 8009b56:	bf00      	nop
 8009b58:	e7fd      	b.n	8009b56 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d06c      	beq.n	8009c3a <pvPortMalloc+0x152>
 8009b60:	4b45      	ldr	r3, [pc, #276]	@ (8009c78 <pvPortMalloc+0x190>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d867      	bhi.n	8009c3a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b6a:	4b44      	ldr	r3, [pc, #272]	@ (8009c7c <pvPortMalloc+0x194>)
 8009b6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b6e:	4b43      	ldr	r3, [pc, #268]	@ (8009c7c <pvPortMalloc+0x194>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b74:	e004      	b.n	8009b80 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8009b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d903      	bls.n	8009b92 <pvPortMalloc+0xaa>
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d1f1      	bne.n	8009b76 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b92:	4b37      	ldr	r3, [pc, #220]	@ (8009c70 <pvPortMalloc+0x188>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d04e      	beq.n	8009c3a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b9c:	6a3b      	ldr	r3, [r7, #32]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2208      	movs	r2, #8
 8009ba2:	4413      	add	r3, r2
 8009ba4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	6a3b      	ldr	r3, [r7, #32]
 8009bac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb0:	685a      	ldr	r2, [r3, #4]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	1ad2      	subs	r2, r2, r3
 8009bb6:	2308      	movs	r3, #8
 8009bb8:	005b      	lsls	r3, r3, #1
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d922      	bls.n	8009c04 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	f003 0307 	and.w	r3, r3, #7
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d00d      	beq.n	8009bec <pvPortMalloc+0x104>
	__asm volatile
 8009bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd4:	b672      	cpsid	i
 8009bd6:	f383 8811 	msr	BASEPRI, r3
 8009bda:	f3bf 8f6f 	isb	sy
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	b662      	cpsie	i
 8009be4:	613b      	str	r3, [r7, #16]
}
 8009be6:	bf00      	nop
 8009be8:	bf00      	nop
 8009bea:	e7fd      	b.n	8009be8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bee:	685a      	ldr	r2, [r3, #4]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	1ad2      	subs	r2, r2, r3
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009bfe:	69b8      	ldr	r0, [r7, #24]
 8009c00:	f000 f902 	bl	8009e08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c04:	4b1c      	ldr	r3, [pc, #112]	@ (8009c78 <pvPortMalloc+0x190>)
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	1ad3      	subs	r3, r2, r3
 8009c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8009c78 <pvPortMalloc+0x190>)
 8009c10:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c12:	4b19      	ldr	r3, [pc, #100]	@ (8009c78 <pvPortMalloc+0x190>)
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	4b1a      	ldr	r3, [pc, #104]	@ (8009c80 <pvPortMalloc+0x198>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d203      	bcs.n	8009c26 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c1e:	4b16      	ldr	r3, [pc, #88]	@ (8009c78 <pvPortMalloc+0x190>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a17      	ldr	r2, [pc, #92]	@ (8009c80 <pvPortMalloc+0x198>)
 8009c24:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c28:	685a      	ldr	r2, [r3, #4]
 8009c2a:	4b12      	ldr	r3, [pc, #72]	@ (8009c74 <pvPortMalloc+0x18c>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	431a      	orrs	r2, r3
 8009c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c32:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c36:	2200      	movs	r2, #0
 8009c38:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c3a:	f7fe fbd1 	bl	80083e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	f003 0307 	and.w	r3, r3, #7
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00d      	beq.n	8009c64 <pvPortMalloc+0x17c>
	__asm volatile
 8009c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c4c:	b672      	cpsid	i
 8009c4e:	f383 8811 	msr	BASEPRI, r3
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	f3bf 8f4f 	dsb	sy
 8009c5a:	b662      	cpsie	i
 8009c5c:	60fb      	str	r3, [r7, #12]
}
 8009c5e:	bf00      	nop
 8009c60:	bf00      	nop
 8009c62:	e7fd      	b.n	8009c60 <pvPortMalloc+0x178>
	return pvReturn;
 8009c64:	69fb      	ldr	r3, [r7, #28]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3728      	adds	r7, #40	@ 0x28
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	20005c70 	.word	0x20005c70
 8009c74:	20005c7c 	.word	0x20005c7c
 8009c78:	20005c74 	.word	0x20005c74
 8009c7c:	20005c68 	.word	0x20005c68
 8009c80:	20005c78 	.word	0x20005c78

08009c84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b086      	sub	sp, #24
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d04e      	beq.n	8009d34 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c96:	2308      	movs	r3, #8
 8009c98:	425b      	negs	r3, r3
 8009c9a:	697a      	ldr	r2, [r7, #20]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	685a      	ldr	r2, [r3, #4]
 8009ca8:	4b24      	ldr	r3, [pc, #144]	@ (8009d3c <vPortFree+0xb8>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4013      	ands	r3, r2
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10d      	bne.n	8009cce <vPortFree+0x4a>
	__asm volatile
 8009cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb6:	b672      	cpsid	i
 8009cb8:	f383 8811 	msr	BASEPRI, r3
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	b662      	cpsie	i
 8009cc6:	60fb      	str	r3, [r7, #12]
}
 8009cc8:	bf00      	nop
 8009cca:	bf00      	nop
 8009ccc:	e7fd      	b.n	8009cca <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00d      	beq.n	8009cf2 <vPortFree+0x6e>
	__asm volatile
 8009cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cda:	b672      	cpsid	i
 8009cdc:	f383 8811 	msr	BASEPRI, r3
 8009ce0:	f3bf 8f6f 	isb	sy
 8009ce4:	f3bf 8f4f 	dsb	sy
 8009ce8:	b662      	cpsie	i
 8009cea:	60bb      	str	r3, [r7, #8]
}
 8009cec:	bf00      	nop
 8009cee:	bf00      	nop
 8009cf0:	e7fd      	b.n	8009cee <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	685a      	ldr	r2, [r3, #4]
 8009cf6:	4b11      	ldr	r3, [pc, #68]	@ (8009d3c <vPortFree+0xb8>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d019      	beq.n	8009d34 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d115      	bne.n	8009d34 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	685a      	ldr	r2, [r3, #4]
 8009d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8009d3c <vPortFree+0xb8>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	43db      	mvns	r3, r3
 8009d12:	401a      	ands	r2, r3
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009d18:	f7fe fb54 	bl	80083c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	685a      	ldr	r2, [r3, #4]
 8009d20:	4b07      	ldr	r3, [pc, #28]	@ (8009d40 <vPortFree+0xbc>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4413      	add	r3, r2
 8009d26:	4a06      	ldr	r2, [pc, #24]	@ (8009d40 <vPortFree+0xbc>)
 8009d28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009d2a:	6938      	ldr	r0, [r7, #16]
 8009d2c:	f000 f86c 	bl	8009e08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009d30:	f7fe fb56 	bl	80083e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d34:	bf00      	nop
 8009d36:	3718      	adds	r7, #24
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	20005c7c 	.word	0x20005c7c
 8009d40:	20005c74 	.word	0x20005c74

08009d44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d4a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009d4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d50:	4b27      	ldr	r3, [pc, #156]	@ (8009df0 <prvHeapInit+0xac>)
 8009d52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f003 0307 	and.w	r3, r3, #7
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00c      	beq.n	8009d78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	3307      	adds	r3, #7
 8009d62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f023 0307 	bic.w	r3, r3, #7
 8009d6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d6c:	68ba      	ldr	r2, [r7, #8]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	1ad3      	subs	r3, r2, r3
 8009d72:	4a1f      	ldr	r2, [pc, #124]	@ (8009df0 <prvHeapInit+0xac>)
 8009d74:	4413      	add	r3, r2
 8009d76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8009df4 <prvHeapInit+0xb0>)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d82:	4b1c      	ldr	r3, [pc, #112]	@ (8009df4 <prvHeapInit+0xb0>)
 8009d84:	2200      	movs	r2, #0
 8009d86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d90:	2208      	movs	r2, #8
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	1a9b      	subs	r3, r3, r2
 8009d96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f023 0307 	bic.w	r3, r3, #7
 8009d9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	4a15      	ldr	r2, [pc, #84]	@ (8009df8 <prvHeapInit+0xb4>)
 8009da4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009da6:	4b14      	ldr	r3, [pc, #80]	@ (8009df8 <prvHeapInit+0xb4>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2200      	movs	r2, #0
 8009dac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009dae:	4b12      	ldr	r3, [pc, #72]	@ (8009df8 <prvHeapInit+0xb4>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2200      	movs	r2, #0
 8009db4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	1ad2      	subs	r2, r2, r3
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8009df8 <prvHeapInit+0xb4>)
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8009dfc <prvHeapInit+0xb8>)
 8009dd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	4a09      	ldr	r2, [pc, #36]	@ (8009e00 <prvHeapInit+0xbc>)
 8009dda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009ddc:	4b09      	ldr	r3, [pc, #36]	@ (8009e04 <prvHeapInit+0xc0>)
 8009dde:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009de2:	601a      	str	r2, [r3, #0]
}
 8009de4:	bf00      	nop
 8009de6:	3714      	adds	r7, #20
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	20002068 	.word	0x20002068
 8009df4:	20005c68 	.word	0x20005c68
 8009df8:	20005c70 	.word	0x20005c70
 8009dfc:	20005c78 	.word	0x20005c78
 8009e00:	20005c74 	.word	0x20005c74
 8009e04:	20005c7c 	.word	0x20005c7c

08009e08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009e10:	4b28      	ldr	r3, [pc, #160]	@ (8009eb4 <prvInsertBlockIntoFreeList+0xac>)
 8009e12:	60fb      	str	r3, [r7, #12]
 8009e14:	e002      	b.n	8009e1c <prvInsertBlockIntoFreeList+0x14>
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	60fb      	str	r3, [r7, #12]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d8f7      	bhi.n	8009e16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	68ba      	ldr	r2, [r7, #8]
 8009e30:	4413      	add	r3, r2
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d108      	bne.n	8009e4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	441a      	add	r2, r3
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	68ba      	ldr	r2, [r7, #8]
 8009e54:	441a      	add	r2, r3
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d118      	bne.n	8009e90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	4b15      	ldr	r3, [pc, #84]	@ (8009eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d00d      	beq.n	8009e86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	685a      	ldr	r2, [r3, #4]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	441a      	add	r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	601a      	str	r2, [r3, #0]
 8009e84:	e008      	b.n	8009e98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e86:	4b0c      	ldr	r3, [pc, #48]	@ (8009eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	601a      	str	r2, [r3, #0]
 8009e8e:	e003      	b.n	8009e98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d002      	beq.n	8009ea6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ea6:	bf00      	nop
 8009ea8:	3714      	adds	r7, #20
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop
 8009eb4:	20005c68 	.word	0x20005c68
 8009eb8:	20005c70 	.word	0x20005c70

08009ebc <__cvt>:
 8009ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ebe:	ed2d 8b02 	vpush	{d8}
 8009ec2:	eeb0 8b40 	vmov.f64	d8, d0
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	4617      	mov	r7, r2
 8009eca:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009ecc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009ece:	ee18 2a90 	vmov	r2, s17
 8009ed2:	f025 0520 	bic.w	r5, r5, #32
 8009ed6:	2a00      	cmp	r2, #0
 8009ed8:	bfb6      	itet	lt
 8009eda:	222d      	movlt	r2, #45	@ 0x2d
 8009edc:	2200      	movge	r2, #0
 8009ede:	eeb1 8b40 	vneglt.f64	d8, d0
 8009ee2:	2d46      	cmp	r5, #70	@ 0x46
 8009ee4:	460c      	mov	r4, r1
 8009ee6:	701a      	strb	r2, [r3, #0]
 8009ee8:	d004      	beq.n	8009ef4 <__cvt+0x38>
 8009eea:	2d45      	cmp	r5, #69	@ 0x45
 8009eec:	d100      	bne.n	8009ef0 <__cvt+0x34>
 8009eee:	3401      	adds	r4, #1
 8009ef0:	2102      	movs	r1, #2
 8009ef2:	e000      	b.n	8009ef6 <__cvt+0x3a>
 8009ef4:	2103      	movs	r1, #3
 8009ef6:	ab03      	add	r3, sp, #12
 8009ef8:	9301      	str	r3, [sp, #4]
 8009efa:	ab02      	add	r3, sp, #8
 8009efc:	9300      	str	r3, [sp, #0]
 8009efe:	4622      	mov	r2, r4
 8009f00:	4633      	mov	r3, r6
 8009f02:	eeb0 0b48 	vmov.f64	d0, d8
 8009f06:	f001 f8b3 	bl	800b070 <_dtoa_r>
 8009f0a:	2d47      	cmp	r5, #71	@ 0x47
 8009f0c:	d114      	bne.n	8009f38 <__cvt+0x7c>
 8009f0e:	07fb      	lsls	r3, r7, #31
 8009f10:	d50a      	bpl.n	8009f28 <__cvt+0x6c>
 8009f12:	1902      	adds	r2, r0, r4
 8009f14:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f1c:	bf08      	it	eq
 8009f1e:	9203      	streq	r2, [sp, #12]
 8009f20:	2130      	movs	r1, #48	@ 0x30
 8009f22:	9b03      	ldr	r3, [sp, #12]
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d319      	bcc.n	8009f5c <__cvt+0xa0>
 8009f28:	9b03      	ldr	r3, [sp, #12]
 8009f2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f2c:	1a1b      	subs	r3, r3, r0
 8009f2e:	6013      	str	r3, [r2, #0]
 8009f30:	b005      	add	sp, #20
 8009f32:	ecbd 8b02 	vpop	{d8}
 8009f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f38:	2d46      	cmp	r5, #70	@ 0x46
 8009f3a:	eb00 0204 	add.w	r2, r0, r4
 8009f3e:	d1e9      	bne.n	8009f14 <__cvt+0x58>
 8009f40:	7803      	ldrb	r3, [r0, #0]
 8009f42:	2b30      	cmp	r3, #48	@ 0x30
 8009f44:	d107      	bne.n	8009f56 <__cvt+0x9a>
 8009f46:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f4e:	bf1c      	itt	ne
 8009f50:	f1c4 0401 	rsbne	r4, r4, #1
 8009f54:	6034      	strne	r4, [r6, #0]
 8009f56:	6833      	ldr	r3, [r6, #0]
 8009f58:	441a      	add	r2, r3
 8009f5a:	e7db      	b.n	8009f14 <__cvt+0x58>
 8009f5c:	1c5c      	adds	r4, r3, #1
 8009f5e:	9403      	str	r4, [sp, #12]
 8009f60:	7019      	strb	r1, [r3, #0]
 8009f62:	e7de      	b.n	8009f22 <__cvt+0x66>

08009f64 <__exponent>:
 8009f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f66:	2900      	cmp	r1, #0
 8009f68:	bfba      	itte	lt
 8009f6a:	4249      	neglt	r1, r1
 8009f6c:	232d      	movlt	r3, #45	@ 0x2d
 8009f6e:	232b      	movge	r3, #43	@ 0x2b
 8009f70:	2909      	cmp	r1, #9
 8009f72:	7002      	strb	r2, [r0, #0]
 8009f74:	7043      	strb	r3, [r0, #1]
 8009f76:	dd29      	ble.n	8009fcc <__exponent+0x68>
 8009f78:	f10d 0307 	add.w	r3, sp, #7
 8009f7c:	461d      	mov	r5, r3
 8009f7e:	270a      	movs	r7, #10
 8009f80:	461a      	mov	r2, r3
 8009f82:	fbb1 f6f7 	udiv	r6, r1, r7
 8009f86:	fb07 1416 	mls	r4, r7, r6, r1
 8009f8a:	3430      	adds	r4, #48	@ 0x30
 8009f8c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009f90:	460c      	mov	r4, r1
 8009f92:	2c63      	cmp	r4, #99	@ 0x63
 8009f94:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f98:	4631      	mov	r1, r6
 8009f9a:	dcf1      	bgt.n	8009f80 <__exponent+0x1c>
 8009f9c:	3130      	adds	r1, #48	@ 0x30
 8009f9e:	1e94      	subs	r4, r2, #2
 8009fa0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009fa4:	1c41      	adds	r1, r0, #1
 8009fa6:	4623      	mov	r3, r4
 8009fa8:	42ab      	cmp	r3, r5
 8009faa:	d30a      	bcc.n	8009fc2 <__exponent+0x5e>
 8009fac:	f10d 0309 	add.w	r3, sp, #9
 8009fb0:	1a9b      	subs	r3, r3, r2
 8009fb2:	42ac      	cmp	r4, r5
 8009fb4:	bf88      	it	hi
 8009fb6:	2300      	movhi	r3, #0
 8009fb8:	3302      	adds	r3, #2
 8009fba:	4403      	add	r3, r0
 8009fbc:	1a18      	subs	r0, r3, r0
 8009fbe:	b003      	add	sp, #12
 8009fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fc2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009fc6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009fca:	e7ed      	b.n	8009fa8 <__exponent+0x44>
 8009fcc:	2330      	movs	r3, #48	@ 0x30
 8009fce:	3130      	adds	r1, #48	@ 0x30
 8009fd0:	7083      	strb	r3, [r0, #2]
 8009fd2:	70c1      	strb	r1, [r0, #3]
 8009fd4:	1d03      	adds	r3, r0, #4
 8009fd6:	e7f1      	b.n	8009fbc <__exponent+0x58>

08009fd8 <_printf_float>:
 8009fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fdc:	b08d      	sub	sp, #52	@ 0x34
 8009fde:	460c      	mov	r4, r1
 8009fe0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009fe4:	4616      	mov	r6, r2
 8009fe6:	461f      	mov	r7, r3
 8009fe8:	4605      	mov	r5, r0
 8009fea:	f000 fed7 	bl	800ad9c <_localeconv_r>
 8009fee:	f8d0 b000 	ldr.w	fp, [r0]
 8009ff2:	4658      	mov	r0, fp
 8009ff4:	f7f6 f974 	bl	80002e0 <strlen>
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ffc:	f8d8 3000 	ldr.w	r3, [r8]
 800a000:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a004:	6822      	ldr	r2, [r4, #0]
 800a006:	9005      	str	r0, [sp, #20]
 800a008:	3307      	adds	r3, #7
 800a00a:	f023 0307 	bic.w	r3, r3, #7
 800a00e:	f103 0108 	add.w	r1, r3, #8
 800a012:	f8c8 1000 	str.w	r1, [r8]
 800a016:	ed93 0b00 	vldr	d0, [r3]
 800a01a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800a278 <_printf_float+0x2a0>
 800a01e:	eeb0 7bc0 	vabs.f64	d7, d0
 800a022:	eeb4 7b46 	vcmp.f64	d7, d6
 800a026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a02a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800a02e:	dd24      	ble.n	800a07a <_printf_float+0xa2>
 800a030:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a038:	d502      	bpl.n	800a040 <_printf_float+0x68>
 800a03a:	232d      	movs	r3, #45	@ 0x2d
 800a03c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a040:	498f      	ldr	r1, [pc, #572]	@ (800a280 <_printf_float+0x2a8>)
 800a042:	4b90      	ldr	r3, [pc, #576]	@ (800a284 <_printf_float+0x2ac>)
 800a044:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800a048:	bf94      	ite	ls
 800a04a:	4688      	movls	r8, r1
 800a04c:	4698      	movhi	r8, r3
 800a04e:	f022 0204 	bic.w	r2, r2, #4
 800a052:	2303      	movs	r3, #3
 800a054:	6123      	str	r3, [r4, #16]
 800a056:	6022      	str	r2, [r4, #0]
 800a058:	f04f 0a00 	mov.w	sl, #0
 800a05c:	9700      	str	r7, [sp, #0]
 800a05e:	4633      	mov	r3, r6
 800a060:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a062:	4621      	mov	r1, r4
 800a064:	4628      	mov	r0, r5
 800a066:	f000 f9d1 	bl	800a40c <_printf_common>
 800a06a:	3001      	adds	r0, #1
 800a06c:	f040 8089 	bne.w	800a182 <_printf_float+0x1aa>
 800a070:	f04f 30ff 	mov.w	r0, #4294967295
 800a074:	b00d      	add	sp, #52	@ 0x34
 800a076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a07a:	eeb4 0b40 	vcmp.f64	d0, d0
 800a07e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a082:	d709      	bvc.n	800a098 <_printf_float+0xc0>
 800a084:	ee10 3a90 	vmov	r3, s1
 800a088:	2b00      	cmp	r3, #0
 800a08a:	bfbc      	itt	lt
 800a08c:	232d      	movlt	r3, #45	@ 0x2d
 800a08e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a092:	497d      	ldr	r1, [pc, #500]	@ (800a288 <_printf_float+0x2b0>)
 800a094:	4b7d      	ldr	r3, [pc, #500]	@ (800a28c <_printf_float+0x2b4>)
 800a096:	e7d5      	b.n	800a044 <_printf_float+0x6c>
 800a098:	6863      	ldr	r3, [r4, #4]
 800a09a:	1c59      	adds	r1, r3, #1
 800a09c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800a0a0:	d139      	bne.n	800a116 <_printf_float+0x13e>
 800a0a2:	2306      	movs	r3, #6
 800a0a4:	6063      	str	r3, [r4, #4]
 800a0a6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	6022      	str	r2, [r4, #0]
 800a0ae:	9303      	str	r3, [sp, #12]
 800a0b0:	ab0a      	add	r3, sp, #40	@ 0x28
 800a0b2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a0b6:	ab09      	add	r3, sp, #36	@ 0x24
 800a0b8:	9300      	str	r3, [sp, #0]
 800a0ba:	6861      	ldr	r1, [r4, #4]
 800a0bc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	f7ff fefb 	bl	8009ebc <__cvt>
 800a0c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a0ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a0cc:	4680      	mov	r8, r0
 800a0ce:	d129      	bne.n	800a124 <_printf_float+0x14c>
 800a0d0:	1cc8      	adds	r0, r1, #3
 800a0d2:	db02      	blt.n	800a0da <_printf_float+0x102>
 800a0d4:	6863      	ldr	r3, [r4, #4]
 800a0d6:	4299      	cmp	r1, r3
 800a0d8:	dd41      	ble.n	800a15e <_printf_float+0x186>
 800a0da:	f1a9 0902 	sub.w	r9, r9, #2
 800a0de:	fa5f f989 	uxtb.w	r9, r9
 800a0e2:	3901      	subs	r1, #1
 800a0e4:	464a      	mov	r2, r9
 800a0e6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a0ea:	9109      	str	r1, [sp, #36]	@ 0x24
 800a0ec:	f7ff ff3a 	bl	8009f64 <__exponent>
 800a0f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a0f2:	1813      	adds	r3, r2, r0
 800a0f4:	2a01      	cmp	r2, #1
 800a0f6:	4682      	mov	sl, r0
 800a0f8:	6123      	str	r3, [r4, #16]
 800a0fa:	dc02      	bgt.n	800a102 <_printf_float+0x12a>
 800a0fc:	6822      	ldr	r2, [r4, #0]
 800a0fe:	07d2      	lsls	r2, r2, #31
 800a100:	d501      	bpl.n	800a106 <_printf_float+0x12e>
 800a102:	3301      	adds	r3, #1
 800a104:	6123      	str	r3, [r4, #16]
 800a106:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d0a6      	beq.n	800a05c <_printf_float+0x84>
 800a10e:	232d      	movs	r3, #45	@ 0x2d
 800a110:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a114:	e7a2      	b.n	800a05c <_printf_float+0x84>
 800a116:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a11a:	d1c4      	bne.n	800a0a6 <_printf_float+0xce>
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d1c2      	bne.n	800a0a6 <_printf_float+0xce>
 800a120:	2301      	movs	r3, #1
 800a122:	e7bf      	b.n	800a0a4 <_printf_float+0xcc>
 800a124:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a128:	d9db      	bls.n	800a0e2 <_printf_float+0x10a>
 800a12a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800a12e:	d118      	bne.n	800a162 <_printf_float+0x18a>
 800a130:	2900      	cmp	r1, #0
 800a132:	6863      	ldr	r3, [r4, #4]
 800a134:	dd0b      	ble.n	800a14e <_printf_float+0x176>
 800a136:	6121      	str	r1, [r4, #16]
 800a138:	b913      	cbnz	r3, 800a140 <_printf_float+0x168>
 800a13a:	6822      	ldr	r2, [r4, #0]
 800a13c:	07d0      	lsls	r0, r2, #31
 800a13e:	d502      	bpl.n	800a146 <_printf_float+0x16e>
 800a140:	3301      	adds	r3, #1
 800a142:	440b      	add	r3, r1
 800a144:	6123      	str	r3, [r4, #16]
 800a146:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a148:	f04f 0a00 	mov.w	sl, #0
 800a14c:	e7db      	b.n	800a106 <_printf_float+0x12e>
 800a14e:	b913      	cbnz	r3, 800a156 <_printf_float+0x17e>
 800a150:	6822      	ldr	r2, [r4, #0]
 800a152:	07d2      	lsls	r2, r2, #31
 800a154:	d501      	bpl.n	800a15a <_printf_float+0x182>
 800a156:	3302      	adds	r3, #2
 800a158:	e7f4      	b.n	800a144 <_printf_float+0x16c>
 800a15a:	2301      	movs	r3, #1
 800a15c:	e7f2      	b.n	800a144 <_printf_float+0x16c>
 800a15e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800a162:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a164:	4299      	cmp	r1, r3
 800a166:	db05      	blt.n	800a174 <_printf_float+0x19c>
 800a168:	6823      	ldr	r3, [r4, #0]
 800a16a:	6121      	str	r1, [r4, #16]
 800a16c:	07d8      	lsls	r0, r3, #31
 800a16e:	d5ea      	bpl.n	800a146 <_printf_float+0x16e>
 800a170:	1c4b      	adds	r3, r1, #1
 800a172:	e7e7      	b.n	800a144 <_printf_float+0x16c>
 800a174:	2900      	cmp	r1, #0
 800a176:	bfd4      	ite	le
 800a178:	f1c1 0202 	rsble	r2, r1, #2
 800a17c:	2201      	movgt	r2, #1
 800a17e:	4413      	add	r3, r2
 800a180:	e7e0      	b.n	800a144 <_printf_float+0x16c>
 800a182:	6823      	ldr	r3, [r4, #0]
 800a184:	055a      	lsls	r2, r3, #21
 800a186:	d407      	bmi.n	800a198 <_printf_float+0x1c0>
 800a188:	6923      	ldr	r3, [r4, #16]
 800a18a:	4642      	mov	r2, r8
 800a18c:	4631      	mov	r1, r6
 800a18e:	4628      	mov	r0, r5
 800a190:	47b8      	blx	r7
 800a192:	3001      	adds	r0, #1
 800a194:	d12a      	bne.n	800a1ec <_printf_float+0x214>
 800a196:	e76b      	b.n	800a070 <_printf_float+0x98>
 800a198:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a19c:	f240 80e0 	bls.w	800a360 <_printf_float+0x388>
 800a1a0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a1a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a1a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1ac:	d133      	bne.n	800a216 <_printf_float+0x23e>
 800a1ae:	4a38      	ldr	r2, [pc, #224]	@ (800a290 <_printf_float+0x2b8>)
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	4631      	mov	r1, r6
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	47b8      	blx	r7
 800a1b8:	3001      	adds	r0, #1
 800a1ba:	f43f af59 	beq.w	800a070 <_printf_float+0x98>
 800a1be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a1c2:	4543      	cmp	r3, r8
 800a1c4:	db02      	blt.n	800a1cc <_printf_float+0x1f4>
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	07d8      	lsls	r0, r3, #31
 800a1ca:	d50f      	bpl.n	800a1ec <_printf_float+0x214>
 800a1cc:	9b05      	ldr	r3, [sp, #20]
 800a1ce:	465a      	mov	r2, fp
 800a1d0:	4631      	mov	r1, r6
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	47b8      	blx	r7
 800a1d6:	3001      	adds	r0, #1
 800a1d8:	f43f af4a 	beq.w	800a070 <_printf_float+0x98>
 800a1dc:	f04f 0900 	mov.w	r9, #0
 800a1e0:	f108 38ff 	add.w	r8, r8, #4294967295
 800a1e4:	f104 0a1a 	add.w	sl, r4, #26
 800a1e8:	45c8      	cmp	r8, r9
 800a1ea:	dc09      	bgt.n	800a200 <_printf_float+0x228>
 800a1ec:	6823      	ldr	r3, [r4, #0]
 800a1ee:	079b      	lsls	r3, r3, #30
 800a1f0:	f100 8107 	bmi.w	800a402 <_printf_float+0x42a>
 800a1f4:	68e0      	ldr	r0, [r4, #12]
 800a1f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1f8:	4298      	cmp	r0, r3
 800a1fa:	bfb8      	it	lt
 800a1fc:	4618      	movlt	r0, r3
 800a1fe:	e739      	b.n	800a074 <_printf_float+0x9c>
 800a200:	2301      	movs	r3, #1
 800a202:	4652      	mov	r2, sl
 800a204:	4631      	mov	r1, r6
 800a206:	4628      	mov	r0, r5
 800a208:	47b8      	blx	r7
 800a20a:	3001      	adds	r0, #1
 800a20c:	f43f af30 	beq.w	800a070 <_printf_float+0x98>
 800a210:	f109 0901 	add.w	r9, r9, #1
 800a214:	e7e8      	b.n	800a1e8 <_printf_float+0x210>
 800a216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a218:	2b00      	cmp	r3, #0
 800a21a:	dc3b      	bgt.n	800a294 <_printf_float+0x2bc>
 800a21c:	4a1c      	ldr	r2, [pc, #112]	@ (800a290 <_printf_float+0x2b8>)
 800a21e:	2301      	movs	r3, #1
 800a220:	4631      	mov	r1, r6
 800a222:	4628      	mov	r0, r5
 800a224:	47b8      	blx	r7
 800a226:	3001      	adds	r0, #1
 800a228:	f43f af22 	beq.w	800a070 <_printf_float+0x98>
 800a22c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a230:	ea59 0303 	orrs.w	r3, r9, r3
 800a234:	d102      	bne.n	800a23c <_printf_float+0x264>
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	07d9      	lsls	r1, r3, #31
 800a23a:	d5d7      	bpl.n	800a1ec <_printf_float+0x214>
 800a23c:	9b05      	ldr	r3, [sp, #20]
 800a23e:	465a      	mov	r2, fp
 800a240:	4631      	mov	r1, r6
 800a242:	4628      	mov	r0, r5
 800a244:	47b8      	blx	r7
 800a246:	3001      	adds	r0, #1
 800a248:	f43f af12 	beq.w	800a070 <_printf_float+0x98>
 800a24c:	f04f 0a00 	mov.w	sl, #0
 800a250:	f104 0b1a 	add.w	fp, r4, #26
 800a254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a256:	425b      	negs	r3, r3
 800a258:	4553      	cmp	r3, sl
 800a25a:	dc01      	bgt.n	800a260 <_printf_float+0x288>
 800a25c:	464b      	mov	r3, r9
 800a25e:	e794      	b.n	800a18a <_printf_float+0x1b2>
 800a260:	2301      	movs	r3, #1
 800a262:	465a      	mov	r2, fp
 800a264:	4631      	mov	r1, r6
 800a266:	4628      	mov	r0, r5
 800a268:	47b8      	blx	r7
 800a26a:	3001      	adds	r0, #1
 800a26c:	f43f af00 	beq.w	800a070 <_printf_float+0x98>
 800a270:	f10a 0a01 	add.w	sl, sl, #1
 800a274:	e7ee      	b.n	800a254 <_printf_float+0x27c>
 800a276:	bf00      	nop
 800a278:	ffffffff 	.word	0xffffffff
 800a27c:	7fefffff 	.word	0x7fefffff
 800a280:	0800e5e0 	.word	0x0800e5e0
 800a284:	0800e5e4 	.word	0x0800e5e4
 800a288:	0800e5e8 	.word	0x0800e5e8
 800a28c:	0800e5ec 	.word	0x0800e5ec
 800a290:	0800e5f0 	.word	0x0800e5f0
 800a294:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a296:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a29a:	4553      	cmp	r3, sl
 800a29c:	bfa8      	it	ge
 800a29e:	4653      	movge	r3, sl
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	4699      	mov	r9, r3
 800a2a4:	dc37      	bgt.n	800a316 <_printf_float+0x33e>
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	9307      	str	r3, [sp, #28]
 800a2aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2ae:	f104 021a 	add.w	r2, r4, #26
 800a2b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a2b4:	9907      	ldr	r1, [sp, #28]
 800a2b6:	9306      	str	r3, [sp, #24]
 800a2b8:	eba3 0309 	sub.w	r3, r3, r9
 800a2bc:	428b      	cmp	r3, r1
 800a2be:	dc31      	bgt.n	800a324 <_printf_float+0x34c>
 800a2c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2c2:	459a      	cmp	sl, r3
 800a2c4:	dc3b      	bgt.n	800a33e <_printf_float+0x366>
 800a2c6:	6823      	ldr	r3, [r4, #0]
 800a2c8:	07da      	lsls	r2, r3, #31
 800a2ca:	d438      	bmi.n	800a33e <_printf_float+0x366>
 800a2cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2ce:	ebaa 0903 	sub.w	r9, sl, r3
 800a2d2:	9b06      	ldr	r3, [sp, #24]
 800a2d4:	ebaa 0303 	sub.w	r3, sl, r3
 800a2d8:	4599      	cmp	r9, r3
 800a2da:	bfa8      	it	ge
 800a2dc:	4699      	movge	r9, r3
 800a2de:	f1b9 0f00 	cmp.w	r9, #0
 800a2e2:	dc34      	bgt.n	800a34e <_printf_float+0x376>
 800a2e4:	f04f 0800 	mov.w	r8, #0
 800a2e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2ec:	f104 0b1a 	add.w	fp, r4, #26
 800a2f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2f2:	ebaa 0303 	sub.w	r3, sl, r3
 800a2f6:	eba3 0309 	sub.w	r3, r3, r9
 800a2fa:	4543      	cmp	r3, r8
 800a2fc:	f77f af76 	ble.w	800a1ec <_printf_float+0x214>
 800a300:	2301      	movs	r3, #1
 800a302:	465a      	mov	r2, fp
 800a304:	4631      	mov	r1, r6
 800a306:	4628      	mov	r0, r5
 800a308:	47b8      	blx	r7
 800a30a:	3001      	adds	r0, #1
 800a30c:	f43f aeb0 	beq.w	800a070 <_printf_float+0x98>
 800a310:	f108 0801 	add.w	r8, r8, #1
 800a314:	e7ec      	b.n	800a2f0 <_printf_float+0x318>
 800a316:	4642      	mov	r2, r8
 800a318:	4631      	mov	r1, r6
 800a31a:	4628      	mov	r0, r5
 800a31c:	47b8      	blx	r7
 800a31e:	3001      	adds	r0, #1
 800a320:	d1c1      	bne.n	800a2a6 <_printf_float+0x2ce>
 800a322:	e6a5      	b.n	800a070 <_printf_float+0x98>
 800a324:	2301      	movs	r3, #1
 800a326:	4631      	mov	r1, r6
 800a328:	4628      	mov	r0, r5
 800a32a:	9206      	str	r2, [sp, #24]
 800a32c:	47b8      	blx	r7
 800a32e:	3001      	adds	r0, #1
 800a330:	f43f ae9e 	beq.w	800a070 <_printf_float+0x98>
 800a334:	9b07      	ldr	r3, [sp, #28]
 800a336:	9a06      	ldr	r2, [sp, #24]
 800a338:	3301      	adds	r3, #1
 800a33a:	9307      	str	r3, [sp, #28]
 800a33c:	e7b9      	b.n	800a2b2 <_printf_float+0x2da>
 800a33e:	9b05      	ldr	r3, [sp, #20]
 800a340:	465a      	mov	r2, fp
 800a342:	4631      	mov	r1, r6
 800a344:	4628      	mov	r0, r5
 800a346:	47b8      	blx	r7
 800a348:	3001      	adds	r0, #1
 800a34a:	d1bf      	bne.n	800a2cc <_printf_float+0x2f4>
 800a34c:	e690      	b.n	800a070 <_printf_float+0x98>
 800a34e:	9a06      	ldr	r2, [sp, #24]
 800a350:	464b      	mov	r3, r9
 800a352:	4442      	add	r2, r8
 800a354:	4631      	mov	r1, r6
 800a356:	4628      	mov	r0, r5
 800a358:	47b8      	blx	r7
 800a35a:	3001      	adds	r0, #1
 800a35c:	d1c2      	bne.n	800a2e4 <_printf_float+0x30c>
 800a35e:	e687      	b.n	800a070 <_printf_float+0x98>
 800a360:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800a364:	f1b9 0f01 	cmp.w	r9, #1
 800a368:	dc01      	bgt.n	800a36e <_printf_float+0x396>
 800a36a:	07db      	lsls	r3, r3, #31
 800a36c:	d536      	bpl.n	800a3dc <_printf_float+0x404>
 800a36e:	2301      	movs	r3, #1
 800a370:	4642      	mov	r2, r8
 800a372:	4631      	mov	r1, r6
 800a374:	4628      	mov	r0, r5
 800a376:	47b8      	blx	r7
 800a378:	3001      	adds	r0, #1
 800a37a:	f43f ae79 	beq.w	800a070 <_printf_float+0x98>
 800a37e:	9b05      	ldr	r3, [sp, #20]
 800a380:	465a      	mov	r2, fp
 800a382:	4631      	mov	r1, r6
 800a384:	4628      	mov	r0, r5
 800a386:	47b8      	blx	r7
 800a388:	3001      	adds	r0, #1
 800a38a:	f43f ae71 	beq.w	800a070 <_printf_float+0x98>
 800a38e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a392:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a39a:	f109 39ff 	add.w	r9, r9, #4294967295
 800a39e:	d018      	beq.n	800a3d2 <_printf_float+0x3fa>
 800a3a0:	464b      	mov	r3, r9
 800a3a2:	f108 0201 	add.w	r2, r8, #1
 800a3a6:	4631      	mov	r1, r6
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	47b8      	blx	r7
 800a3ac:	3001      	adds	r0, #1
 800a3ae:	d10c      	bne.n	800a3ca <_printf_float+0x3f2>
 800a3b0:	e65e      	b.n	800a070 <_printf_float+0x98>
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	465a      	mov	r2, fp
 800a3b6:	4631      	mov	r1, r6
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	47b8      	blx	r7
 800a3bc:	3001      	adds	r0, #1
 800a3be:	f43f ae57 	beq.w	800a070 <_printf_float+0x98>
 800a3c2:	f108 0801 	add.w	r8, r8, #1
 800a3c6:	45c8      	cmp	r8, r9
 800a3c8:	dbf3      	blt.n	800a3b2 <_printf_float+0x3da>
 800a3ca:	4653      	mov	r3, sl
 800a3cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a3d0:	e6dc      	b.n	800a18c <_printf_float+0x1b4>
 800a3d2:	f04f 0800 	mov.w	r8, #0
 800a3d6:	f104 0b1a 	add.w	fp, r4, #26
 800a3da:	e7f4      	b.n	800a3c6 <_printf_float+0x3ee>
 800a3dc:	2301      	movs	r3, #1
 800a3de:	4642      	mov	r2, r8
 800a3e0:	e7e1      	b.n	800a3a6 <_printf_float+0x3ce>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	464a      	mov	r2, r9
 800a3e6:	4631      	mov	r1, r6
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	47b8      	blx	r7
 800a3ec:	3001      	adds	r0, #1
 800a3ee:	f43f ae3f 	beq.w	800a070 <_printf_float+0x98>
 800a3f2:	f108 0801 	add.w	r8, r8, #1
 800a3f6:	68e3      	ldr	r3, [r4, #12]
 800a3f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3fa:	1a5b      	subs	r3, r3, r1
 800a3fc:	4543      	cmp	r3, r8
 800a3fe:	dcf0      	bgt.n	800a3e2 <_printf_float+0x40a>
 800a400:	e6f8      	b.n	800a1f4 <_printf_float+0x21c>
 800a402:	f04f 0800 	mov.w	r8, #0
 800a406:	f104 0919 	add.w	r9, r4, #25
 800a40a:	e7f4      	b.n	800a3f6 <_printf_float+0x41e>

0800a40c <_printf_common>:
 800a40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a410:	4616      	mov	r6, r2
 800a412:	4698      	mov	r8, r3
 800a414:	688a      	ldr	r2, [r1, #8]
 800a416:	690b      	ldr	r3, [r1, #16]
 800a418:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a41c:	4293      	cmp	r3, r2
 800a41e:	bfb8      	it	lt
 800a420:	4613      	movlt	r3, r2
 800a422:	6033      	str	r3, [r6, #0]
 800a424:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a428:	4607      	mov	r7, r0
 800a42a:	460c      	mov	r4, r1
 800a42c:	b10a      	cbz	r2, 800a432 <_printf_common+0x26>
 800a42e:	3301      	adds	r3, #1
 800a430:	6033      	str	r3, [r6, #0]
 800a432:	6823      	ldr	r3, [r4, #0]
 800a434:	0699      	lsls	r1, r3, #26
 800a436:	bf42      	ittt	mi
 800a438:	6833      	ldrmi	r3, [r6, #0]
 800a43a:	3302      	addmi	r3, #2
 800a43c:	6033      	strmi	r3, [r6, #0]
 800a43e:	6825      	ldr	r5, [r4, #0]
 800a440:	f015 0506 	ands.w	r5, r5, #6
 800a444:	d106      	bne.n	800a454 <_printf_common+0x48>
 800a446:	f104 0a19 	add.w	sl, r4, #25
 800a44a:	68e3      	ldr	r3, [r4, #12]
 800a44c:	6832      	ldr	r2, [r6, #0]
 800a44e:	1a9b      	subs	r3, r3, r2
 800a450:	42ab      	cmp	r3, r5
 800a452:	dc26      	bgt.n	800a4a2 <_printf_common+0x96>
 800a454:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a458:	6822      	ldr	r2, [r4, #0]
 800a45a:	3b00      	subs	r3, #0
 800a45c:	bf18      	it	ne
 800a45e:	2301      	movne	r3, #1
 800a460:	0692      	lsls	r2, r2, #26
 800a462:	d42b      	bmi.n	800a4bc <_printf_common+0xb0>
 800a464:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a468:	4641      	mov	r1, r8
 800a46a:	4638      	mov	r0, r7
 800a46c:	47c8      	blx	r9
 800a46e:	3001      	adds	r0, #1
 800a470:	d01e      	beq.n	800a4b0 <_printf_common+0xa4>
 800a472:	6823      	ldr	r3, [r4, #0]
 800a474:	6922      	ldr	r2, [r4, #16]
 800a476:	f003 0306 	and.w	r3, r3, #6
 800a47a:	2b04      	cmp	r3, #4
 800a47c:	bf02      	ittt	eq
 800a47e:	68e5      	ldreq	r5, [r4, #12]
 800a480:	6833      	ldreq	r3, [r6, #0]
 800a482:	1aed      	subeq	r5, r5, r3
 800a484:	68a3      	ldr	r3, [r4, #8]
 800a486:	bf0c      	ite	eq
 800a488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a48c:	2500      	movne	r5, #0
 800a48e:	4293      	cmp	r3, r2
 800a490:	bfc4      	itt	gt
 800a492:	1a9b      	subgt	r3, r3, r2
 800a494:	18ed      	addgt	r5, r5, r3
 800a496:	2600      	movs	r6, #0
 800a498:	341a      	adds	r4, #26
 800a49a:	42b5      	cmp	r5, r6
 800a49c:	d11a      	bne.n	800a4d4 <_printf_common+0xc8>
 800a49e:	2000      	movs	r0, #0
 800a4a0:	e008      	b.n	800a4b4 <_printf_common+0xa8>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	4652      	mov	r2, sl
 800a4a6:	4641      	mov	r1, r8
 800a4a8:	4638      	mov	r0, r7
 800a4aa:	47c8      	blx	r9
 800a4ac:	3001      	adds	r0, #1
 800a4ae:	d103      	bne.n	800a4b8 <_printf_common+0xac>
 800a4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b8:	3501      	adds	r5, #1
 800a4ba:	e7c6      	b.n	800a44a <_printf_common+0x3e>
 800a4bc:	18e1      	adds	r1, r4, r3
 800a4be:	1c5a      	adds	r2, r3, #1
 800a4c0:	2030      	movs	r0, #48	@ 0x30
 800a4c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a4c6:	4422      	add	r2, r4
 800a4c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a4cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a4d0:	3302      	adds	r3, #2
 800a4d2:	e7c7      	b.n	800a464 <_printf_common+0x58>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	4622      	mov	r2, r4
 800a4d8:	4641      	mov	r1, r8
 800a4da:	4638      	mov	r0, r7
 800a4dc:	47c8      	blx	r9
 800a4de:	3001      	adds	r0, #1
 800a4e0:	d0e6      	beq.n	800a4b0 <_printf_common+0xa4>
 800a4e2:	3601      	adds	r6, #1
 800a4e4:	e7d9      	b.n	800a49a <_printf_common+0x8e>
	...

0800a4e8 <_printf_i>:
 800a4e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4ec:	7e0f      	ldrb	r7, [r1, #24]
 800a4ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a4f0:	2f78      	cmp	r7, #120	@ 0x78
 800a4f2:	4691      	mov	r9, r2
 800a4f4:	4680      	mov	r8, r0
 800a4f6:	460c      	mov	r4, r1
 800a4f8:	469a      	mov	sl, r3
 800a4fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a4fe:	d807      	bhi.n	800a510 <_printf_i+0x28>
 800a500:	2f62      	cmp	r7, #98	@ 0x62
 800a502:	d80a      	bhi.n	800a51a <_printf_i+0x32>
 800a504:	2f00      	cmp	r7, #0
 800a506:	f000 80d2 	beq.w	800a6ae <_printf_i+0x1c6>
 800a50a:	2f58      	cmp	r7, #88	@ 0x58
 800a50c:	f000 80b9 	beq.w	800a682 <_printf_i+0x19a>
 800a510:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a514:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a518:	e03a      	b.n	800a590 <_printf_i+0xa8>
 800a51a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a51e:	2b15      	cmp	r3, #21
 800a520:	d8f6      	bhi.n	800a510 <_printf_i+0x28>
 800a522:	a101      	add	r1, pc, #4	@ (adr r1, 800a528 <_printf_i+0x40>)
 800a524:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a528:	0800a581 	.word	0x0800a581
 800a52c:	0800a595 	.word	0x0800a595
 800a530:	0800a511 	.word	0x0800a511
 800a534:	0800a511 	.word	0x0800a511
 800a538:	0800a511 	.word	0x0800a511
 800a53c:	0800a511 	.word	0x0800a511
 800a540:	0800a595 	.word	0x0800a595
 800a544:	0800a511 	.word	0x0800a511
 800a548:	0800a511 	.word	0x0800a511
 800a54c:	0800a511 	.word	0x0800a511
 800a550:	0800a511 	.word	0x0800a511
 800a554:	0800a695 	.word	0x0800a695
 800a558:	0800a5bf 	.word	0x0800a5bf
 800a55c:	0800a64f 	.word	0x0800a64f
 800a560:	0800a511 	.word	0x0800a511
 800a564:	0800a511 	.word	0x0800a511
 800a568:	0800a6b7 	.word	0x0800a6b7
 800a56c:	0800a511 	.word	0x0800a511
 800a570:	0800a5bf 	.word	0x0800a5bf
 800a574:	0800a511 	.word	0x0800a511
 800a578:	0800a511 	.word	0x0800a511
 800a57c:	0800a657 	.word	0x0800a657
 800a580:	6833      	ldr	r3, [r6, #0]
 800a582:	1d1a      	adds	r2, r3, #4
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	6032      	str	r2, [r6, #0]
 800a588:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a58c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a590:	2301      	movs	r3, #1
 800a592:	e09d      	b.n	800a6d0 <_printf_i+0x1e8>
 800a594:	6833      	ldr	r3, [r6, #0]
 800a596:	6820      	ldr	r0, [r4, #0]
 800a598:	1d19      	adds	r1, r3, #4
 800a59a:	6031      	str	r1, [r6, #0]
 800a59c:	0606      	lsls	r6, r0, #24
 800a59e:	d501      	bpl.n	800a5a4 <_printf_i+0xbc>
 800a5a0:	681d      	ldr	r5, [r3, #0]
 800a5a2:	e003      	b.n	800a5ac <_printf_i+0xc4>
 800a5a4:	0645      	lsls	r5, r0, #25
 800a5a6:	d5fb      	bpl.n	800a5a0 <_printf_i+0xb8>
 800a5a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a5ac:	2d00      	cmp	r5, #0
 800a5ae:	da03      	bge.n	800a5b8 <_printf_i+0xd0>
 800a5b0:	232d      	movs	r3, #45	@ 0x2d
 800a5b2:	426d      	negs	r5, r5
 800a5b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5b8:	4859      	ldr	r0, [pc, #356]	@ (800a720 <_printf_i+0x238>)
 800a5ba:	230a      	movs	r3, #10
 800a5bc:	e011      	b.n	800a5e2 <_printf_i+0xfa>
 800a5be:	6821      	ldr	r1, [r4, #0]
 800a5c0:	6833      	ldr	r3, [r6, #0]
 800a5c2:	0608      	lsls	r0, r1, #24
 800a5c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a5c8:	d402      	bmi.n	800a5d0 <_printf_i+0xe8>
 800a5ca:	0649      	lsls	r1, r1, #25
 800a5cc:	bf48      	it	mi
 800a5ce:	b2ad      	uxthmi	r5, r5
 800a5d0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a5d2:	4853      	ldr	r0, [pc, #332]	@ (800a720 <_printf_i+0x238>)
 800a5d4:	6033      	str	r3, [r6, #0]
 800a5d6:	bf14      	ite	ne
 800a5d8:	230a      	movne	r3, #10
 800a5da:	2308      	moveq	r3, #8
 800a5dc:	2100      	movs	r1, #0
 800a5de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a5e2:	6866      	ldr	r6, [r4, #4]
 800a5e4:	60a6      	str	r6, [r4, #8]
 800a5e6:	2e00      	cmp	r6, #0
 800a5e8:	bfa2      	ittt	ge
 800a5ea:	6821      	ldrge	r1, [r4, #0]
 800a5ec:	f021 0104 	bicge.w	r1, r1, #4
 800a5f0:	6021      	strge	r1, [r4, #0]
 800a5f2:	b90d      	cbnz	r5, 800a5f8 <_printf_i+0x110>
 800a5f4:	2e00      	cmp	r6, #0
 800a5f6:	d04b      	beq.n	800a690 <_printf_i+0x1a8>
 800a5f8:	4616      	mov	r6, r2
 800a5fa:	fbb5 f1f3 	udiv	r1, r5, r3
 800a5fe:	fb03 5711 	mls	r7, r3, r1, r5
 800a602:	5dc7      	ldrb	r7, [r0, r7]
 800a604:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a608:	462f      	mov	r7, r5
 800a60a:	42bb      	cmp	r3, r7
 800a60c:	460d      	mov	r5, r1
 800a60e:	d9f4      	bls.n	800a5fa <_printf_i+0x112>
 800a610:	2b08      	cmp	r3, #8
 800a612:	d10b      	bne.n	800a62c <_printf_i+0x144>
 800a614:	6823      	ldr	r3, [r4, #0]
 800a616:	07df      	lsls	r7, r3, #31
 800a618:	d508      	bpl.n	800a62c <_printf_i+0x144>
 800a61a:	6923      	ldr	r3, [r4, #16]
 800a61c:	6861      	ldr	r1, [r4, #4]
 800a61e:	4299      	cmp	r1, r3
 800a620:	bfde      	ittt	le
 800a622:	2330      	movle	r3, #48	@ 0x30
 800a624:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a628:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a62c:	1b92      	subs	r2, r2, r6
 800a62e:	6122      	str	r2, [r4, #16]
 800a630:	f8cd a000 	str.w	sl, [sp]
 800a634:	464b      	mov	r3, r9
 800a636:	aa03      	add	r2, sp, #12
 800a638:	4621      	mov	r1, r4
 800a63a:	4640      	mov	r0, r8
 800a63c:	f7ff fee6 	bl	800a40c <_printf_common>
 800a640:	3001      	adds	r0, #1
 800a642:	d14a      	bne.n	800a6da <_printf_i+0x1f2>
 800a644:	f04f 30ff 	mov.w	r0, #4294967295
 800a648:	b004      	add	sp, #16
 800a64a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a64e:	6823      	ldr	r3, [r4, #0]
 800a650:	f043 0320 	orr.w	r3, r3, #32
 800a654:	6023      	str	r3, [r4, #0]
 800a656:	4833      	ldr	r0, [pc, #204]	@ (800a724 <_printf_i+0x23c>)
 800a658:	2778      	movs	r7, #120	@ 0x78
 800a65a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a65e:	6823      	ldr	r3, [r4, #0]
 800a660:	6831      	ldr	r1, [r6, #0]
 800a662:	061f      	lsls	r7, r3, #24
 800a664:	f851 5b04 	ldr.w	r5, [r1], #4
 800a668:	d402      	bmi.n	800a670 <_printf_i+0x188>
 800a66a:	065f      	lsls	r7, r3, #25
 800a66c:	bf48      	it	mi
 800a66e:	b2ad      	uxthmi	r5, r5
 800a670:	6031      	str	r1, [r6, #0]
 800a672:	07d9      	lsls	r1, r3, #31
 800a674:	bf44      	itt	mi
 800a676:	f043 0320 	orrmi.w	r3, r3, #32
 800a67a:	6023      	strmi	r3, [r4, #0]
 800a67c:	b11d      	cbz	r5, 800a686 <_printf_i+0x19e>
 800a67e:	2310      	movs	r3, #16
 800a680:	e7ac      	b.n	800a5dc <_printf_i+0xf4>
 800a682:	4827      	ldr	r0, [pc, #156]	@ (800a720 <_printf_i+0x238>)
 800a684:	e7e9      	b.n	800a65a <_printf_i+0x172>
 800a686:	6823      	ldr	r3, [r4, #0]
 800a688:	f023 0320 	bic.w	r3, r3, #32
 800a68c:	6023      	str	r3, [r4, #0]
 800a68e:	e7f6      	b.n	800a67e <_printf_i+0x196>
 800a690:	4616      	mov	r6, r2
 800a692:	e7bd      	b.n	800a610 <_printf_i+0x128>
 800a694:	6833      	ldr	r3, [r6, #0]
 800a696:	6825      	ldr	r5, [r4, #0]
 800a698:	6961      	ldr	r1, [r4, #20]
 800a69a:	1d18      	adds	r0, r3, #4
 800a69c:	6030      	str	r0, [r6, #0]
 800a69e:	062e      	lsls	r6, r5, #24
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	d501      	bpl.n	800a6a8 <_printf_i+0x1c0>
 800a6a4:	6019      	str	r1, [r3, #0]
 800a6a6:	e002      	b.n	800a6ae <_printf_i+0x1c6>
 800a6a8:	0668      	lsls	r0, r5, #25
 800a6aa:	d5fb      	bpl.n	800a6a4 <_printf_i+0x1bc>
 800a6ac:	8019      	strh	r1, [r3, #0]
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	6123      	str	r3, [r4, #16]
 800a6b2:	4616      	mov	r6, r2
 800a6b4:	e7bc      	b.n	800a630 <_printf_i+0x148>
 800a6b6:	6833      	ldr	r3, [r6, #0]
 800a6b8:	1d1a      	adds	r2, r3, #4
 800a6ba:	6032      	str	r2, [r6, #0]
 800a6bc:	681e      	ldr	r6, [r3, #0]
 800a6be:	6862      	ldr	r2, [r4, #4]
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	f7f5 fdbc 	bl	8000240 <memchr>
 800a6c8:	b108      	cbz	r0, 800a6ce <_printf_i+0x1e6>
 800a6ca:	1b80      	subs	r0, r0, r6
 800a6cc:	6060      	str	r0, [r4, #4]
 800a6ce:	6863      	ldr	r3, [r4, #4]
 800a6d0:	6123      	str	r3, [r4, #16]
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6d8:	e7aa      	b.n	800a630 <_printf_i+0x148>
 800a6da:	6923      	ldr	r3, [r4, #16]
 800a6dc:	4632      	mov	r2, r6
 800a6de:	4649      	mov	r1, r9
 800a6e0:	4640      	mov	r0, r8
 800a6e2:	47d0      	blx	sl
 800a6e4:	3001      	adds	r0, #1
 800a6e6:	d0ad      	beq.n	800a644 <_printf_i+0x15c>
 800a6e8:	6823      	ldr	r3, [r4, #0]
 800a6ea:	079b      	lsls	r3, r3, #30
 800a6ec:	d413      	bmi.n	800a716 <_printf_i+0x22e>
 800a6ee:	68e0      	ldr	r0, [r4, #12]
 800a6f0:	9b03      	ldr	r3, [sp, #12]
 800a6f2:	4298      	cmp	r0, r3
 800a6f4:	bfb8      	it	lt
 800a6f6:	4618      	movlt	r0, r3
 800a6f8:	e7a6      	b.n	800a648 <_printf_i+0x160>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	4632      	mov	r2, r6
 800a6fe:	4649      	mov	r1, r9
 800a700:	4640      	mov	r0, r8
 800a702:	47d0      	blx	sl
 800a704:	3001      	adds	r0, #1
 800a706:	d09d      	beq.n	800a644 <_printf_i+0x15c>
 800a708:	3501      	adds	r5, #1
 800a70a:	68e3      	ldr	r3, [r4, #12]
 800a70c:	9903      	ldr	r1, [sp, #12]
 800a70e:	1a5b      	subs	r3, r3, r1
 800a710:	42ab      	cmp	r3, r5
 800a712:	dcf2      	bgt.n	800a6fa <_printf_i+0x212>
 800a714:	e7eb      	b.n	800a6ee <_printf_i+0x206>
 800a716:	2500      	movs	r5, #0
 800a718:	f104 0619 	add.w	r6, r4, #25
 800a71c:	e7f5      	b.n	800a70a <_printf_i+0x222>
 800a71e:	bf00      	nop
 800a720:	0800e5f2 	.word	0x0800e5f2
 800a724:	0800e603 	.word	0x0800e603

0800a728 <_scanf_float>:
 800a728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a72c:	b087      	sub	sp, #28
 800a72e:	4617      	mov	r7, r2
 800a730:	9303      	str	r3, [sp, #12]
 800a732:	688b      	ldr	r3, [r1, #8]
 800a734:	1e5a      	subs	r2, r3, #1
 800a736:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a73a:	bf81      	itttt	hi
 800a73c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a740:	eb03 0b05 	addhi.w	fp, r3, r5
 800a744:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a748:	608b      	strhi	r3, [r1, #8]
 800a74a:	680b      	ldr	r3, [r1, #0]
 800a74c:	460a      	mov	r2, r1
 800a74e:	f04f 0500 	mov.w	r5, #0
 800a752:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a756:	f842 3b1c 	str.w	r3, [r2], #28
 800a75a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a75e:	4680      	mov	r8, r0
 800a760:	460c      	mov	r4, r1
 800a762:	bf98      	it	ls
 800a764:	f04f 0b00 	movls.w	fp, #0
 800a768:	9201      	str	r2, [sp, #4]
 800a76a:	4616      	mov	r6, r2
 800a76c:	46aa      	mov	sl, r5
 800a76e:	46a9      	mov	r9, r5
 800a770:	9502      	str	r5, [sp, #8]
 800a772:	68a2      	ldr	r2, [r4, #8]
 800a774:	b152      	cbz	r2, 800a78c <_scanf_float+0x64>
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	2b4e      	cmp	r3, #78	@ 0x4e
 800a77c:	d864      	bhi.n	800a848 <_scanf_float+0x120>
 800a77e:	2b40      	cmp	r3, #64	@ 0x40
 800a780:	d83c      	bhi.n	800a7fc <_scanf_float+0xd4>
 800a782:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a786:	b2c8      	uxtb	r0, r1
 800a788:	280e      	cmp	r0, #14
 800a78a:	d93a      	bls.n	800a802 <_scanf_float+0xda>
 800a78c:	f1b9 0f00 	cmp.w	r9, #0
 800a790:	d003      	beq.n	800a79a <_scanf_float+0x72>
 800a792:	6823      	ldr	r3, [r4, #0]
 800a794:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a798:	6023      	str	r3, [r4, #0]
 800a79a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a79e:	f1ba 0f01 	cmp.w	sl, #1
 800a7a2:	f200 8117 	bhi.w	800a9d4 <_scanf_float+0x2ac>
 800a7a6:	9b01      	ldr	r3, [sp, #4]
 800a7a8:	429e      	cmp	r6, r3
 800a7aa:	f200 8108 	bhi.w	800a9be <_scanf_float+0x296>
 800a7ae:	2001      	movs	r0, #1
 800a7b0:	b007      	add	sp, #28
 800a7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a7ba:	2a0d      	cmp	r2, #13
 800a7bc:	d8e6      	bhi.n	800a78c <_scanf_float+0x64>
 800a7be:	a101      	add	r1, pc, #4	@ (adr r1, 800a7c4 <_scanf_float+0x9c>)
 800a7c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a7c4:	0800a90b 	.word	0x0800a90b
 800a7c8:	0800a78d 	.word	0x0800a78d
 800a7cc:	0800a78d 	.word	0x0800a78d
 800a7d0:	0800a78d 	.word	0x0800a78d
 800a7d4:	0800a96b 	.word	0x0800a96b
 800a7d8:	0800a943 	.word	0x0800a943
 800a7dc:	0800a78d 	.word	0x0800a78d
 800a7e0:	0800a78d 	.word	0x0800a78d
 800a7e4:	0800a919 	.word	0x0800a919
 800a7e8:	0800a78d 	.word	0x0800a78d
 800a7ec:	0800a78d 	.word	0x0800a78d
 800a7f0:	0800a78d 	.word	0x0800a78d
 800a7f4:	0800a78d 	.word	0x0800a78d
 800a7f8:	0800a8d1 	.word	0x0800a8d1
 800a7fc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a800:	e7db      	b.n	800a7ba <_scanf_float+0x92>
 800a802:	290e      	cmp	r1, #14
 800a804:	d8c2      	bhi.n	800a78c <_scanf_float+0x64>
 800a806:	a001      	add	r0, pc, #4	@ (adr r0, 800a80c <_scanf_float+0xe4>)
 800a808:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a80c:	0800a8c1 	.word	0x0800a8c1
 800a810:	0800a78d 	.word	0x0800a78d
 800a814:	0800a8c1 	.word	0x0800a8c1
 800a818:	0800a957 	.word	0x0800a957
 800a81c:	0800a78d 	.word	0x0800a78d
 800a820:	0800a869 	.word	0x0800a869
 800a824:	0800a8a7 	.word	0x0800a8a7
 800a828:	0800a8a7 	.word	0x0800a8a7
 800a82c:	0800a8a7 	.word	0x0800a8a7
 800a830:	0800a8a7 	.word	0x0800a8a7
 800a834:	0800a8a7 	.word	0x0800a8a7
 800a838:	0800a8a7 	.word	0x0800a8a7
 800a83c:	0800a8a7 	.word	0x0800a8a7
 800a840:	0800a8a7 	.word	0x0800a8a7
 800a844:	0800a8a7 	.word	0x0800a8a7
 800a848:	2b6e      	cmp	r3, #110	@ 0x6e
 800a84a:	d809      	bhi.n	800a860 <_scanf_float+0x138>
 800a84c:	2b60      	cmp	r3, #96	@ 0x60
 800a84e:	d8b2      	bhi.n	800a7b6 <_scanf_float+0x8e>
 800a850:	2b54      	cmp	r3, #84	@ 0x54
 800a852:	d07b      	beq.n	800a94c <_scanf_float+0x224>
 800a854:	2b59      	cmp	r3, #89	@ 0x59
 800a856:	d199      	bne.n	800a78c <_scanf_float+0x64>
 800a858:	2d07      	cmp	r5, #7
 800a85a:	d197      	bne.n	800a78c <_scanf_float+0x64>
 800a85c:	2508      	movs	r5, #8
 800a85e:	e02c      	b.n	800a8ba <_scanf_float+0x192>
 800a860:	2b74      	cmp	r3, #116	@ 0x74
 800a862:	d073      	beq.n	800a94c <_scanf_float+0x224>
 800a864:	2b79      	cmp	r3, #121	@ 0x79
 800a866:	e7f6      	b.n	800a856 <_scanf_float+0x12e>
 800a868:	6821      	ldr	r1, [r4, #0]
 800a86a:	05c8      	lsls	r0, r1, #23
 800a86c:	d51b      	bpl.n	800a8a6 <_scanf_float+0x17e>
 800a86e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a872:	6021      	str	r1, [r4, #0]
 800a874:	f109 0901 	add.w	r9, r9, #1
 800a878:	f1bb 0f00 	cmp.w	fp, #0
 800a87c:	d003      	beq.n	800a886 <_scanf_float+0x15e>
 800a87e:	3201      	adds	r2, #1
 800a880:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a884:	60a2      	str	r2, [r4, #8]
 800a886:	68a3      	ldr	r3, [r4, #8]
 800a888:	3b01      	subs	r3, #1
 800a88a:	60a3      	str	r3, [r4, #8]
 800a88c:	6923      	ldr	r3, [r4, #16]
 800a88e:	3301      	adds	r3, #1
 800a890:	6123      	str	r3, [r4, #16]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	3b01      	subs	r3, #1
 800a896:	2b00      	cmp	r3, #0
 800a898:	607b      	str	r3, [r7, #4]
 800a89a:	f340 8087 	ble.w	800a9ac <_scanf_float+0x284>
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	603b      	str	r3, [r7, #0]
 800a8a4:	e765      	b.n	800a772 <_scanf_float+0x4a>
 800a8a6:	eb1a 0105 	adds.w	r1, sl, r5
 800a8aa:	f47f af6f 	bne.w	800a78c <_scanf_float+0x64>
 800a8ae:	6822      	ldr	r2, [r4, #0]
 800a8b0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a8b4:	6022      	str	r2, [r4, #0]
 800a8b6:	460d      	mov	r5, r1
 800a8b8:	468a      	mov	sl, r1
 800a8ba:	f806 3b01 	strb.w	r3, [r6], #1
 800a8be:	e7e2      	b.n	800a886 <_scanf_float+0x15e>
 800a8c0:	6822      	ldr	r2, [r4, #0]
 800a8c2:	0610      	lsls	r0, r2, #24
 800a8c4:	f57f af62 	bpl.w	800a78c <_scanf_float+0x64>
 800a8c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a8cc:	6022      	str	r2, [r4, #0]
 800a8ce:	e7f4      	b.n	800a8ba <_scanf_float+0x192>
 800a8d0:	f1ba 0f00 	cmp.w	sl, #0
 800a8d4:	d10e      	bne.n	800a8f4 <_scanf_float+0x1cc>
 800a8d6:	f1b9 0f00 	cmp.w	r9, #0
 800a8da:	d10e      	bne.n	800a8fa <_scanf_float+0x1d2>
 800a8dc:	6822      	ldr	r2, [r4, #0]
 800a8de:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a8e2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a8e6:	d108      	bne.n	800a8fa <_scanf_float+0x1d2>
 800a8e8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a8ec:	6022      	str	r2, [r4, #0]
 800a8ee:	f04f 0a01 	mov.w	sl, #1
 800a8f2:	e7e2      	b.n	800a8ba <_scanf_float+0x192>
 800a8f4:	f1ba 0f02 	cmp.w	sl, #2
 800a8f8:	d055      	beq.n	800a9a6 <_scanf_float+0x27e>
 800a8fa:	2d01      	cmp	r5, #1
 800a8fc:	d002      	beq.n	800a904 <_scanf_float+0x1dc>
 800a8fe:	2d04      	cmp	r5, #4
 800a900:	f47f af44 	bne.w	800a78c <_scanf_float+0x64>
 800a904:	3501      	adds	r5, #1
 800a906:	b2ed      	uxtb	r5, r5
 800a908:	e7d7      	b.n	800a8ba <_scanf_float+0x192>
 800a90a:	f1ba 0f01 	cmp.w	sl, #1
 800a90e:	f47f af3d 	bne.w	800a78c <_scanf_float+0x64>
 800a912:	f04f 0a02 	mov.w	sl, #2
 800a916:	e7d0      	b.n	800a8ba <_scanf_float+0x192>
 800a918:	b97d      	cbnz	r5, 800a93a <_scanf_float+0x212>
 800a91a:	f1b9 0f00 	cmp.w	r9, #0
 800a91e:	f47f af38 	bne.w	800a792 <_scanf_float+0x6a>
 800a922:	6822      	ldr	r2, [r4, #0]
 800a924:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a928:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a92c:	f040 8101 	bne.w	800ab32 <_scanf_float+0x40a>
 800a930:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a934:	6022      	str	r2, [r4, #0]
 800a936:	2501      	movs	r5, #1
 800a938:	e7bf      	b.n	800a8ba <_scanf_float+0x192>
 800a93a:	2d03      	cmp	r5, #3
 800a93c:	d0e2      	beq.n	800a904 <_scanf_float+0x1dc>
 800a93e:	2d05      	cmp	r5, #5
 800a940:	e7de      	b.n	800a900 <_scanf_float+0x1d8>
 800a942:	2d02      	cmp	r5, #2
 800a944:	f47f af22 	bne.w	800a78c <_scanf_float+0x64>
 800a948:	2503      	movs	r5, #3
 800a94a:	e7b6      	b.n	800a8ba <_scanf_float+0x192>
 800a94c:	2d06      	cmp	r5, #6
 800a94e:	f47f af1d 	bne.w	800a78c <_scanf_float+0x64>
 800a952:	2507      	movs	r5, #7
 800a954:	e7b1      	b.n	800a8ba <_scanf_float+0x192>
 800a956:	6822      	ldr	r2, [r4, #0]
 800a958:	0591      	lsls	r1, r2, #22
 800a95a:	f57f af17 	bpl.w	800a78c <_scanf_float+0x64>
 800a95e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a962:	6022      	str	r2, [r4, #0]
 800a964:	f8cd 9008 	str.w	r9, [sp, #8]
 800a968:	e7a7      	b.n	800a8ba <_scanf_float+0x192>
 800a96a:	6822      	ldr	r2, [r4, #0]
 800a96c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a970:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a974:	d006      	beq.n	800a984 <_scanf_float+0x25c>
 800a976:	0550      	lsls	r0, r2, #21
 800a978:	f57f af08 	bpl.w	800a78c <_scanf_float+0x64>
 800a97c:	f1b9 0f00 	cmp.w	r9, #0
 800a980:	f000 80d7 	beq.w	800ab32 <_scanf_float+0x40a>
 800a984:	0591      	lsls	r1, r2, #22
 800a986:	bf58      	it	pl
 800a988:	9902      	ldrpl	r1, [sp, #8]
 800a98a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a98e:	bf58      	it	pl
 800a990:	eba9 0101 	subpl.w	r1, r9, r1
 800a994:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a998:	bf58      	it	pl
 800a99a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a99e:	6022      	str	r2, [r4, #0]
 800a9a0:	f04f 0900 	mov.w	r9, #0
 800a9a4:	e789      	b.n	800a8ba <_scanf_float+0x192>
 800a9a6:	f04f 0a03 	mov.w	sl, #3
 800a9aa:	e786      	b.n	800a8ba <_scanf_float+0x192>
 800a9ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a9b0:	4639      	mov	r1, r7
 800a9b2:	4640      	mov	r0, r8
 800a9b4:	4798      	blx	r3
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	f43f aedb 	beq.w	800a772 <_scanf_float+0x4a>
 800a9bc:	e6e6      	b.n	800a78c <_scanf_float+0x64>
 800a9be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a9c6:	463a      	mov	r2, r7
 800a9c8:	4640      	mov	r0, r8
 800a9ca:	4798      	blx	r3
 800a9cc:	6923      	ldr	r3, [r4, #16]
 800a9ce:	3b01      	subs	r3, #1
 800a9d0:	6123      	str	r3, [r4, #16]
 800a9d2:	e6e8      	b.n	800a7a6 <_scanf_float+0x7e>
 800a9d4:	1e6b      	subs	r3, r5, #1
 800a9d6:	2b06      	cmp	r3, #6
 800a9d8:	d824      	bhi.n	800aa24 <_scanf_float+0x2fc>
 800a9da:	2d02      	cmp	r5, #2
 800a9dc:	d836      	bhi.n	800aa4c <_scanf_float+0x324>
 800a9de:	9b01      	ldr	r3, [sp, #4]
 800a9e0:	429e      	cmp	r6, r3
 800a9e2:	f67f aee4 	bls.w	800a7ae <_scanf_float+0x86>
 800a9e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a9ee:	463a      	mov	r2, r7
 800a9f0:	4640      	mov	r0, r8
 800a9f2:	4798      	blx	r3
 800a9f4:	6923      	ldr	r3, [r4, #16]
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	6123      	str	r3, [r4, #16]
 800a9fa:	e7f0      	b.n	800a9de <_scanf_float+0x2b6>
 800a9fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa00:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800aa04:	463a      	mov	r2, r7
 800aa06:	4640      	mov	r0, r8
 800aa08:	4798      	blx	r3
 800aa0a:	6923      	ldr	r3, [r4, #16]
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	6123      	str	r3, [r4, #16]
 800aa10:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa14:	fa5f fa8a 	uxtb.w	sl, sl
 800aa18:	f1ba 0f02 	cmp.w	sl, #2
 800aa1c:	d1ee      	bne.n	800a9fc <_scanf_float+0x2d4>
 800aa1e:	3d03      	subs	r5, #3
 800aa20:	b2ed      	uxtb	r5, r5
 800aa22:	1b76      	subs	r6, r6, r5
 800aa24:	6823      	ldr	r3, [r4, #0]
 800aa26:	05da      	lsls	r2, r3, #23
 800aa28:	d530      	bpl.n	800aa8c <_scanf_float+0x364>
 800aa2a:	055b      	lsls	r3, r3, #21
 800aa2c:	d511      	bpl.n	800aa52 <_scanf_float+0x32a>
 800aa2e:	9b01      	ldr	r3, [sp, #4]
 800aa30:	429e      	cmp	r6, r3
 800aa32:	f67f aebc 	bls.w	800a7ae <_scanf_float+0x86>
 800aa36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa3e:	463a      	mov	r2, r7
 800aa40:	4640      	mov	r0, r8
 800aa42:	4798      	blx	r3
 800aa44:	6923      	ldr	r3, [r4, #16]
 800aa46:	3b01      	subs	r3, #1
 800aa48:	6123      	str	r3, [r4, #16]
 800aa4a:	e7f0      	b.n	800aa2e <_scanf_float+0x306>
 800aa4c:	46aa      	mov	sl, r5
 800aa4e:	46b3      	mov	fp, r6
 800aa50:	e7de      	b.n	800aa10 <_scanf_float+0x2e8>
 800aa52:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800aa56:	6923      	ldr	r3, [r4, #16]
 800aa58:	2965      	cmp	r1, #101	@ 0x65
 800aa5a:	f103 33ff 	add.w	r3, r3, #4294967295
 800aa5e:	f106 35ff 	add.w	r5, r6, #4294967295
 800aa62:	6123      	str	r3, [r4, #16]
 800aa64:	d00c      	beq.n	800aa80 <_scanf_float+0x358>
 800aa66:	2945      	cmp	r1, #69	@ 0x45
 800aa68:	d00a      	beq.n	800aa80 <_scanf_float+0x358>
 800aa6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa6e:	463a      	mov	r2, r7
 800aa70:	4640      	mov	r0, r8
 800aa72:	4798      	blx	r3
 800aa74:	6923      	ldr	r3, [r4, #16]
 800aa76:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	1eb5      	subs	r5, r6, #2
 800aa7e:	6123      	str	r3, [r4, #16]
 800aa80:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa84:	463a      	mov	r2, r7
 800aa86:	4640      	mov	r0, r8
 800aa88:	4798      	blx	r3
 800aa8a:	462e      	mov	r6, r5
 800aa8c:	6822      	ldr	r2, [r4, #0]
 800aa8e:	f012 0210 	ands.w	r2, r2, #16
 800aa92:	d001      	beq.n	800aa98 <_scanf_float+0x370>
 800aa94:	2000      	movs	r0, #0
 800aa96:	e68b      	b.n	800a7b0 <_scanf_float+0x88>
 800aa98:	7032      	strb	r2, [r6, #0]
 800aa9a:	6823      	ldr	r3, [r4, #0]
 800aa9c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800aaa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aaa4:	d11a      	bne.n	800aadc <_scanf_float+0x3b4>
 800aaa6:	9b02      	ldr	r3, [sp, #8]
 800aaa8:	454b      	cmp	r3, r9
 800aaaa:	eba3 0209 	sub.w	r2, r3, r9
 800aaae:	d121      	bne.n	800aaf4 <_scanf_float+0x3cc>
 800aab0:	9901      	ldr	r1, [sp, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	4640      	mov	r0, r8
 800aab6:	f002 fb91 	bl	800d1dc <_strtod_r>
 800aaba:	9b03      	ldr	r3, [sp, #12]
 800aabc:	6821      	ldr	r1, [r4, #0]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f011 0f02 	tst.w	r1, #2
 800aac4:	f103 0204 	add.w	r2, r3, #4
 800aac8:	d01f      	beq.n	800ab0a <_scanf_float+0x3e2>
 800aaca:	9903      	ldr	r1, [sp, #12]
 800aacc:	600a      	str	r2, [r1, #0]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	ed83 0b00 	vstr	d0, [r3]
 800aad4:	68e3      	ldr	r3, [r4, #12]
 800aad6:	3301      	adds	r3, #1
 800aad8:	60e3      	str	r3, [r4, #12]
 800aada:	e7db      	b.n	800aa94 <_scanf_float+0x36c>
 800aadc:	9b04      	ldr	r3, [sp, #16]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d0e6      	beq.n	800aab0 <_scanf_float+0x388>
 800aae2:	9905      	ldr	r1, [sp, #20]
 800aae4:	230a      	movs	r3, #10
 800aae6:	3101      	adds	r1, #1
 800aae8:	4640      	mov	r0, r8
 800aaea:	f002 fbf7 	bl	800d2dc <_strtol_r>
 800aaee:	9b04      	ldr	r3, [sp, #16]
 800aaf0:	9e05      	ldr	r6, [sp, #20]
 800aaf2:	1ac2      	subs	r2, r0, r3
 800aaf4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800aaf8:	429e      	cmp	r6, r3
 800aafa:	bf28      	it	cs
 800aafc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ab00:	490d      	ldr	r1, [pc, #52]	@ (800ab38 <_scanf_float+0x410>)
 800ab02:	4630      	mov	r0, r6
 800ab04:	f000 f8de 	bl	800acc4 <siprintf>
 800ab08:	e7d2      	b.n	800aab0 <_scanf_float+0x388>
 800ab0a:	f011 0f04 	tst.w	r1, #4
 800ab0e:	9903      	ldr	r1, [sp, #12]
 800ab10:	600a      	str	r2, [r1, #0]
 800ab12:	d1dc      	bne.n	800aace <_scanf_float+0x3a6>
 800ab14:	eeb4 0b40 	vcmp.f64	d0, d0
 800ab18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab1c:	681d      	ldr	r5, [r3, #0]
 800ab1e:	d705      	bvc.n	800ab2c <_scanf_float+0x404>
 800ab20:	4806      	ldr	r0, [pc, #24]	@ (800ab3c <_scanf_float+0x414>)
 800ab22:	f000 fa17 	bl	800af54 <nanf>
 800ab26:	ed85 0a00 	vstr	s0, [r5]
 800ab2a:	e7d3      	b.n	800aad4 <_scanf_float+0x3ac>
 800ab2c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ab30:	e7f9      	b.n	800ab26 <_scanf_float+0x3fe>
 800ab32:	f04f 0900 	mov.w	r9, #0
 800ab36:	e630      	b.n	800a79a <_scanf_float+0x72>
 800ab38:	0800e614 	.word	0x0800e614
 800ab3c:	0800e9ad 	.word	0x0800e9ad

0800ab40 <std>:
 800ab40:	2300      	movs	r3, #0
 800ab42:	b510      	push	{r4, lr}
 800ab44:	4604      	mov	r4, r0
 800ab46:	e9c0 3300 	strd	r3, r3, [r0]
 800ab4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab4e:	6083      	str	r3, [r0, #8]
 800ab50:	8181      	strh	r1, [r0, #12]
 800ab52:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab54:	81c2      	strh	r2, [r0, #14]
 800ab56:	6183      	str	r3, [r0, #24]
 800ab58:	4619      	mov	r1, r3
 800ab5a:	2208      	movs	r2, #8
 800ab5c:	305c      	adds	r0, #92	@ 0x5c
 800ab5e:	f000 f914 	bl	800ad8a <memset>
 800ab62:	4b0d      	ldr	r3, [pc, #52]	@ (800ab98 <std+0x58>)
 800ab64:	6263      	str	r3, [r4, #36]	@ 0x24
 800ab66:	4b0d      	ldr	r3, [pc, #52]	@ (800ab9c <std+0x5c>)
 800ab68:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab6a:	4b0d      	ldr	r3, [pc, #52]	@ (800aba0 <std+0x60>)
 800ab6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ab6e:	4b0d      	ldr	r3, [pc, #52]	@ (800aba4 <std+0x64>)
 800ab70:	6323      	str	r3, [r4, #48]	@ 0x30
 800ab72:	4b0d      	ldr	r3, [pc, #52]	@ (800aba8 <std+0x68>)
 800ab74:	6224      	str	r4, [r4, #32]
 800ab76:	429c      	cmp	r4, r3
 800ab78:	d006      	beq.n	800ab88 <std+0x48>
 800ab7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ab7e:	4294      	cmp	r4, r2
 800ab80:	d002      	beq.n	800ab88 <std+0x48>
 800ab82:	33d0      	adds	r3, #208	@ 0xd0
 800ab84:	429c      	cmp	r4, r3
 800ab86:	d105      	bne.n	800ab94 <std+0x54>
 800ab88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ab8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab90:	f000 b9ce 	b.w	800af30 <__retarget_lock_init_recursive>
 800ab94:	bd10      	pop	{r4, pc}
 800ab96:	bf00      	nop
 800ab98:	0800ad05 	.word	0x0800ad05
 800ab9c:	0800ad27 	.word	0x0800ad27
 800aba0:	0800ad5f 	.word	0x0800ad5f
 800aba4:	0800ad83 	.word	0x0800ad83
 800aba8:	20005c80 	.word	0x20005c80

0800abac <stdio_exit_handler>:
 800abac:	4a02      	ldr	r2, [pc, #8]	@ (800abb8 <stdio_exit_handler+0xc>)
 800abae:	4903      	ldr	r1, [pc, #12]	@ (800abbc <stdio_exit_handler+0x10>)
 800abb0:	4803      	ldr	r0, [pc, #12]	@ (800abc0 <stdio_exit_handler+0x14>)
 800abb2:	f000 b869 	b.w	800ac88 <_fwalk_sglue>
 800abb6:	bf00      	nop
 800abb8:	20000010 	.word	0x20000010
 800abbc:	0800d699 	.word	0x0800d699
 800abc0:	20000020 	.word	0x20000020

0800abc4 <cleanup_stdio>:
 800abc4:	6841      	ldr	r1, [r0, #4]
 800abc6:	4b0c      	ldr	r3, [pc, #48]	@ (800abf8 <cleanup_stdio+0x34>)
 800abc8:	4299      	cmp	r1, r3
 800abca:	b510      	push	{r4, lr}
 800abcc:	4604      	mov	r4, r0
 800abce:	d001      	beq.n	800abd4 <cleanup_stdio+0x10>
 800abd0:	f002 fd62 	bl	800d698 <_fflush_r>
 800abd4:	68a1      	ldr	r1, [r4, #8]
 800abd6:	4b09      	ldr	r3, [pc, #36]	@ (800abfc <cleanup_stdio+0x38>)
 800abd8:	4299      	cmp	r1, r3
 800abda:	d002      	beq.n	800abe2 <cleanup_stdio+0x1e>
 800abdc:	4620      	mov	r0, r4
 800abde:	f002 fd5b 	bl	800d698 <_fflush_r>
 800abe2:	68e1      	ldr	r1, [r4, #12]
 800abe4:	4b06      	ldr	r3, [pc, #24]	@ (800ac00 <cleanup_stdio+0x3c>)
 800abe6:	4299      	cmp	r1, r3
 800abe8:	d004      	beq.n	800abf4 <cleanup_stdio+0x30>
 800abea:	4620      	mov	r0, r4
 800abec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abf0:	f002 bd52 	b.w	800d698 <_fflush_r>
 800abf4:	bd10      	pop	{r4, pc}
 800abf6:	bf00      	nop
 800abf8:	20005c80 	.word	0x20005c80
 800abfc:	20005ce8 	.word	0x20005ce8
 800ac00:	20005d50 	.word	0x20005d50

0800ac04 <global_stdio_init.part.0>:
 800ac04:	b510      	push	{r4, lr}
 800ac06:	4b0b      	ldr	r3, [pc, #44]	@ (800ac34 <global_stdio_init.part.0+0x30>)
 800ac08:	4c0b      	ldr	r4, [pc, #44]	@ (800ac38 <global_stdio_init.part.0+0x34>)
 800ac0a:	4a0c      	ldr	r2, [pc, #48]	@ (800ac3c <global_stdio_init.part.0+0x38>)
 800ac0c:	601a      	str	r2, [r3, #0]
 800ac0e:	4620      	mov	r0, r4
 800ac10:	2200      	movs	r2, #0
 800ac12:	2104      	movs	r1, #4
 800ac14:	f7ff ff94 	bl	800ab40 <std>
 800ac18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	2109      	movs	r1, #9
 800ac20:	f7ff ff8e 	bl	800ab40 <std>
 800ac24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ac28:	2202      	movs	r2, #2
 800ac2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac2e:	2112      	movs	r1, #18
 800ac30:	f7ff bf86 	b.w	800ab40 <std>
 800ac34:	20005db8 	.word	0x20005db8
 800ac38:	20005c80 	.word	0x20005c80
 800ac3c:	0800abad 	.word	0x0800abad

0800ac40 <__sfp_lock_acquire>:
 800ac40:	4801      	ldr	r0, [pc, #4]	@ (800ac48 <__sfp_lock_acquire+0x8>)
 800ac42:	f000 b976 	b.w	800af32 <__retarget_lock_acquire_recursive>
 800ac46:	bf00      	nop
 800ac48:	20005dc1 	.word	0x20005dc1

0800ac4c <__sfp_lock_release>:
 800ac4c:	4801      	ldr	r0, [pc, #4]	@ (800ac54 <__sfp_lock_release+0x8>)
 800ac4e:	f000 b971 	b.w	800af34 <__retarget_lock_release_recursive>
 800ac52:	bf00      	nop
 800ac54:	20005dc1 	.word	0x20005dc1

0800ac58 <__sinit>:
 800ac58:	b510      	push	{r4, lr}
 800ac5a:	4604      	mov	r4, r0
 800ac5c:	f7ff fff0 	bl	800ac40 <__sfp_lock_acquire>
 800ac60:	6a23      	ldr	r3, [r4, #32]
 800ac62:	b11b      	cbz	r3, 800ac6c <__sinit+0x14>
 800ac64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac68:	f7ff bff0 	b.w	800ac4c <__sfp_lock_release>
 800ac6c:	4b04      	ldr	r3, [pc, #16]	@ (800ac80 <__sinit+0x28>)
 800ac6e:	6223      	str	r3, [r4, #32]
 800ac70:	4b04      	ldr	r3, [pc, #16]	@ (800ac84 <__sinit+0x2c>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d1f5      	bne.n	800ac64 <__sinit+0xc>
 800ac78:	f7ff ffc4 	bl	800ac04 <global_stdio_init.part.0>
 800ac7c:	e7f2      	b.n	800ac64 <__sinit+0xc>
 800ac7e:	bf00      	nop
 800ac80:	0800abc5 	.word	0x0800abc5
 800ac84:	20005db8 	.word	0x20005db8

0800ac88 <_fwalk_sglue>:
 800ac88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac8c:	4607      	mov	r7, r0
 800ac8e:	4688      	mov	r8, r1
 800ac90:	4614      	mov	r4, r2
 800ac92:	2600      	movs	r6, #0
 800ac94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac98:	f1b9 0901 	subs.w	r9, r9, #1
 800ac9c:	d505      	bpl.n	800acaa <_fwalk_sglue+0x22>
 800ac9e:	6824      	ldr	r4, [r4, #0]
 800aca0:	2c00      	cmp	r4, #0
 800aca2:	d1f7      	bne.n	800ac94 <_fwalk_sglue+0xc>
 800aca4:	4630      	mov	r0, r6
 800aca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acaa:	89ab      	ldrh	r3, [r5, #12]
 800acac:	2b01      	cmp	r3, #1
 800acae:	d907      	bls.n	800acc0 <_fwalk_sglue+0x38>
 800acb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800acb4:	3301      	adds	r3, #1
 800acb6:	d003      	beq.n	800acc0 <_fwalk_sglue+0x38>
 800acb8:	4629      	mov	r1, r5
 800acba:	4638      	mov	r0, r7
 800acbc:	47c0      	blx	r8
 800acbe:	4306      	orrs	r6, r0
 800acc0:	3568      	adds	r5, #104	@ 0x68
 800acc2:	e7e9      	b.n	800ac98 <_fwalk_sglue+0x10>

0800acc4 <siprintf>:
 800acc4:	b40e      	push	{r1, r2, r3}
 800acc6:	b500      	push	{lr}
 800acc8:	b09c      	sub	sp, #112	@ 0x70
 800acca:	ab1d      	add	r3, sp, #116	@ 0x74
 800accc:	9002      	str	r0, [sp, #8]
 800acce:	9006      	str	r0, [sp, #24]
 800acd0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800acd4:	4809      	ldr	r0, [pc, #36]	@ (800acfc <siprintf+0x38>)
 800acd6:	9107      	str	r1, [sp, #28]
 800acd8:	9104      	str	r1, [sp, #16]
 800acda:	4909      	ldr	r1, [pc, #36]	@ (800ad00 <siprintf+0x3c>)
 800acdc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ace0:	9105      	str	r1, [sp, #20]
 800ace2:	6800      	ldr	r0, [r0, #0]
 800ace4:	9301      	str	r3, [sp, #4]
 800ace6:	a902      	add	r1, sp, #8
 800ace8:	f002 fb56 	bl	800d398 <_svfiprintf_r>
 800acec:	9b02      	ldr	r3, [sp, #8]
 800acee:	2200      	movs	r2, #0
 800acf0:	701a      	strb	r2, [r3, #0]
 800acf2:	b01c      	add	sp, #112	@ 0x70
 800acf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800acf8:	b003      	add	sp, #12
 800acfa:	4770      	bx	lr
 800acfc:	2000001c 	.word	0x2000001c
 800ad00:	ffff0208 	.word	0xffff0208

0800ad04 <__sread>:
 800ad04:	b510      	push	{r4, lr}
 800ad06:	460c      	mov	r4, r1
 800ad08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad0c:	f000 f8c2 	bl	800ae94 <_read_r>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	bfab      	itete	ge
 800ad14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ad16:	89a3      	ldrhlt	r3, [r4, #12]
 800ad18:	181b      	addge	r3, r3, r0
 800ad1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ad1e:	bfac      	ite	ge
 800ad20:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ad22:	81a3      	strhlt	r3, [r4, #12]
 800ad24:	bd10      	pop	{r4, pc}

0800ad26 <__swrite>:
 800ad26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad2a:	461f      	mov	r7, r3
 800ad2c:	898b      	ldrh	r3, [r1, #12]
 800ad2e:	05db      	lsls	r3, r3, #23
 800ad30:	4605      	mov	r5, r0
 800ad32:	460c      	mov	r4, r1
 800ad34:	4616      	mov	r6, r2
 800ad36:	d505      	bpl.n	800ad44 <__swrite+0x1e>
 800ad38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad3c:	2302      	movs	r3, #2
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f000 f896 	bl	800ae70 <_lseek_r>
 800ad44:	89a3      	ldrh	r3, [r4, #12]
 800ad46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad4e:	81a3      	strh	r3, [r4, #12]
 800ad50:	4632      	mov	r2, r6
 800ad52:	463b      	mov	r3, r7
 800ad54:	4628      	mov	r0, r5
 800ad56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad5a:	f000 b8ad 	b.w	800aeb8 <_write_r>

0800ad5e <__sseek>:
 800ad5e:	b510      	push	{r4, lr}
 800ad60:	460c      	mov	r4, r1
 800ad62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad66:	f000 f883 	bl	800ae70 <_lseek_r>
 800ad6a:	1c43      	adds	r3, r0, #1
 800ad6c:	89a3      	ldrh	r3, [r4, #12]
 800ad6e:	bf15      	itete	ne
 800ad70:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ad72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ad76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ad7a:	81a3      	strheq	r3, [r4, #12]
 800ad7c:	bf18      	it	ne
 800ad7e:	81a3      	strhne	r3, [r4, #12]
 800ad80:	bd10      	pop	{r4, pc}

0800ad82 <__sclose>:
 800ad82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad86:	f000 b80d 	b.w	800ada4 <_close_r>

0800ad8a <memset>:
 800ad8a:	4402      	add	r2, r0
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d100      	bne.n	800ad94 <memset+0xa>
 800ad92:	4770      	bx	lr
 800ad94:	f803 1b01 	strb.w	r1, [r3], #1
 800ad98:	e7f9      	b.n	800ad8e <memset+0x4>
	...

0800ad9c <_localeconv_r>:
 800ad9c:	4800      	ldr	r0, [pc, #0]	@ (800ada0 <_localeconv_r+0x4>)
 800ad9e:	4770      	bx	lr
 800ada0:	2000015c 	.word	0x2000015c

0800ada4 <_close_r>:
 800ada4:	b538      	push	{r3, r4, r5, lr}
 800ada6:	4d06      	ldr	r5, [pc, #24]	@ (800adc0 <_close_r+0x1c>)
 800ada8:	2300      	movs	r3, #0
 800adaa:	4604      	mov	r4, r0
 800adac:	4608      	mov	r0, r1
 800adae:	602b      	str	r3, [r5, #0]
 800adb0:	f7f6 fd38 	bl	8001824 <_close>
 800adb4:	1c43      	adds	r3, r0, #1
 800adb6:	d102      	bne.n	800adbe <_close_r+0x1a>
 800adb8:	682b      	ldr	r3, [r5, #0]
 800adba:	b103      	cbz	r3, 800adbe <_close_r+0x1a>
 800adbc:	6023      	str	r3, [r4, #0]
 800adbe:	bd38      	pop	{r3, r4, r5, pc}
 800adc0:	20005dbc 	.word	0x20005dbc

0800adc4 <_reclaim_reent>:
 800adc4:	4b29      	ldr	r3, [pc, #164]	@ (800ae6c <_reclaim_reent+0xa8>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4283      	cmp	r3, r0
 800adca:	b570      	push	{r4, r5, r6, lr}
 800adcc:	4604      	mov	r4, r0
 800adce:	d04b      	beq.n	800ae68 <_reclaim_reent+0xa4>
 800add0:	69c3      	ldr	r3, [r0, #28]
 800add2:	b1ab      	cbz	r3, 800ae00 <_reclaim_reent+0x3c>
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	b16b      	cbz	r3, 800adf4 <_reclaim_reent+0x30>
 800add8:	2500      	movs	r5, #0
 800adda:	69e3      	ldr	r3, [r4, #28]
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	5959      	ldr	r1, [r3, r5]
 800ade0:	2900      	cmp	r1, #0
 800ade2:	d13b      	bne.n	800ae5c <_reclaim_reent+0x98>
 800ade4:	3504      	adds	r5, #4
 800ade6:	2d80      	cmp	r5, #128	@ 0x80
 800ade8:	d1f7      	bne.n	800adda <_reclaim_reent+0x16>
 800adea:	69e3      	ldr	r3, [r4, #28]
 800adec:	4620      	mov	r0, r4
 800adee:	68d9      	ldr	r1, [r3, #12]
 800adf0:	f000 fe94 	bl	800bb1c <_free_r>
 800adf4:	69e3      	ldr	r3, [r4, #28]
 800adf6:	6819      	ldr	r1, [r3, #0]
 800adf8:	b111      	cbz	r1, 800ae00 <_reclaim_reent+0x3c>
 800adfa:	4620      	mov	r0, r4
 800adfc:	f000 fe8e 	bl	800bb1c <_free_r>
 800ae00:	6961      	ldr	r1, [r4, #20]
 800ae02:	b111      	cbz	r1, 800ae0a <_reclaim_reent+0x46>
 800ae04:	4620      	mov	r0, r4
 800ae06:	f000 fe89 	bl	800bb1c <_free_r>
 800ae0a:	69e1      	ldr	r1, [r4, #28]
 800ae0c:	b111      	cbz	r1, 800ae14 <_reclaim_reent+0x50>
 800ae0e:	4620      	mov	r0, r4
 800ae10:	f000 fe84 	bl	800bb1c <_free_r>
 800ae14:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ae16:	b111      	cbz	r1, 800ae1e <_reclaim_reent+0x5a>
 800ae18:	4620      	mov	r0, r4
 800ae1a:	f000 fe7f 	bl	800bb1c <_free_r>
 800ae1e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae20:	b111      	cbz	r1, 800ae28 <_reclaim_reent+0x64>
 800ae22:	4620      	mov	r0, r4
 800ae24:	f000 fe7a 	bl	800bb1c <_free_r>
 800ae28:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ae2a:	b111      	cbz	r1, 800ae32 <_reclaim_reent+0x6e>
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	f000 fe75 	bl	800bb1c <_free_r>
 800ae32:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ae34:	b111      	cbz	r1, 800ae3c <_reclaim_reent+0x78>
 800ae36:	4620      	mov	r0, r4
 800ae38:	f000 fe70 	bl	800bb1c <_free_r>
 800ae3c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ae3e:	b111      	cbz	r1, 800ae46 <_reclaim_reent+0x82>
 800ae40:	4620      	mov	r0, r4
 800ae42:	f000 fe6b 	bl	800bb1c <_free_r>
 800ae46:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ae48:	b111      	cbz	r1, 800ae50 <_reclaim_reent+0x8c>
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	f000 fe66 	bl	800bb1c <_free_r>
 800ae50:	6a23      	ldr	r3, [r4, #32]
 800ae52:	b14b      	cbz	r3, 800ae68 <_reclaim_reent+0xa4>
 800ae54:	4620      	mov	r0, r4
 800ae56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae5a:	4718      	bx	r3
 800ae5c:	680e      	ldr	r6, [r1, #0]
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f000 fe5c 	bl	800bb1c <_free_r>
 800ae64:	4631      	mov	r1, r6
 800ae66:	e7bb      	b.n	800ade0 <_reclaim_reent+0x1c>
 800ae68:	bd70      	pop	{r4, r5, r6, pc}
 800ae6a:	bf00      	nop
 800ae6c:	2000001c 	.word	0x2000001c

0800ae70 <_lseek_r>:
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	4d07      	ldr	r5, [pc, #28]	@ (800ae90 <_lseek_r+0x20>)
 800ae74:	4604      	mov	r4, r0
 800ae76:	4608      	mov	r0, r1
 800ae78:	4611      	mov	r1, r2
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	602a      	str	r2, [r5, #0]
 800ae7e:	461a      	mov	r2, r3
 800ae80:	f7f6 fcf7 	bl	8001872 <_lseek>
 800ae84:	1c43      	adds	r3, r0, #1
 800ae86:	d102      	bne.n	800ae8e <_lseek_r+0x1e>
 800ae88:	682b      	ldr	r3, [r5, #0]
 800ae8a:	b103      	cbz	r3, 800ae8e <_lseek_r+0x1e>
 800ae8c:	6023      	str	r3, [r4, #0]
 800ae8e:	bd38      	pop	{r3, r4, r5, pc}
 800ae90:	20005dbc 	.word	0x20005dbc

0800ae94 <_read_r>:
 800ae94:	b538      	push	{r3, r4, r5, lr}
 800ae96:	4d07      	ldr	r5, [pc, #28]	@ (800aeb4 <_read_r+0x20>)
 800ae98:	4604      	mov	r4, r0
 800ae9a:	4608      	mov	r0, r1
 800ae9c:	4611      	mov	r1, r2
 800ae9e:	2200      	movs	r2, #0
 800aea0:	602a      	str	r2, [r5, #0]
 800aea2:	461a      	mov	r2, r3
 800aea4:	f7f6 fc85 	bl	80017b2 <_read>
 800aea8:	1c43      	adds	r3, r0, #1
 800aeaa:	d102      	bne.n	800aeb2 <_read_r+0x1e>
 800aeac:	682b      	ldr	r3, [r5, #0]
 800aeae:	b103      	cbz	r3, 800aeb2 <_read_r+0x1e>
 800aeb0:	6023      	str	r3, [r4, #0]
 800aeb2:	bd38      	pop	{r3, r4, r5, pc}
 800aeb4:	20005dbc 	.word	0x20005dbc

0800aeb8 <_write_r>:
 800aeb8:	b538      	push	{r3, r4, r5, lr}
 800aeba:	4d07      	ldr	r5, [pc, #28]	@ (800aed8 <_write_r+0x20>)
 800aebc:	4604      	mov	r4, r0
 800aebe:	4608      	mov	r0, r1
 800aec0:	4611      	mov	r1, r2
 800aec2:	2200      	movs	r2, #0
 800aec4:	602a      	str	r2, [r5, #0]
 800aec6:	461a      	mov	r2, r3
 800aec8:	f7f6 fc90 	bl	80017ec <_write>
 800aecc:	1c43      	adds	r3, r0, #1
 800aece:	d102      	bne.n	800aed6 <_write_r+0x1e>
 800aed0:	682b      	ldr	r3, [r5, #0]
 800aed2:	b103      	cbz	r3, 800aed6 <_write_r+0x1e>
 800aed4:	6023      	str	r3, [r4, #0]
 800aed6:	bd38      	pop	{r3, r4, r5, pc}
 800aed8:	20005dbc 	.word	0x20005dbc

0800aedc <__errno>:
 800aedc:	4b01      	ldr	r3, [pc, #4]	@ (800aee4 <__errno+0x8>)
 800aede:	6818      	ldr	r0, [r3, #0]
 800aee0:	4770      	bx	lr
 800aee2:	bf00      	nop
 800aee4:	2000001c 	.word	0x2000001c

0800aee8 <__libc_init_array>:
 800aee8:	b570      	push	{r4, r5, r6, lr}
 800aeea:	4d0d      	ldr	r5, [pc, #52]	@ (800af20 <__libc_init_array+0x38>)
 800aeec:	4c0d      	ldr	r4, [pc, #52]	@ (800af24 <__libc_init_array+0x3c>)
 800aeee:	1b64      	subs	r4, r4, r5
 800aef0:	10a4      	asrs	r4, r4, #2
 800aef2:	2600      	movs	r6, #0
 800aef4:	42a6      	cmp	r6, r4
 800aef6:	d109      	bne.n	800af0c <__libc_init_array+0x24>
 800aef8:	4d0b      	ldr	r5, [pc, #44]	@ (800af28 <__libc_init_array+0x40>)
 800aefa:	4c0c      	ldr	r4, [pc, #48]	@ (800af2c <__libc_init_array+0x44>)
 800aefc:	f003 faae 	bl	800e45c <_init>
 800af00:	1b64      	subs	r4, r4, r5
 800af02:	10a4      	asrs	r4, r4, #2
 800af04:	2600      	movs	r6, #0
 800af06:	42a6      	cmp	r6, r4
 800af08:	d105      	bne.n	800af16 <__libc_init_array+0x2e>
 800af0a:	bd70      	pop	{r4, r5, r6, pc}
 800af0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800af10:	4798      	blx	r3
 800af12:	3601      	adds	r6, #1
 800af14:	e7ee      	b.n	800aef4 <__libc_init_array+0xc>
 800af16:	f855 3b04 	ldr.w	r3, [r5], #4
 800af1a:	4798      	blx	r3
 800af1c:	3601      	adds	r6, #1
 800af1e:	e7f2      	b.n	800af06 <__libc_init_array+0x1e>
 800af20:	0800ea18 	.word	0x0800ea18
 800af24:	0800ea18 	.word	0x0800ea18
 800af28:	0800ea18 	.word	0x0800ea18
 800af2c:	0800ea1c 	.word	0x0800ea1c

0800af30 <__retarget_lock_init_recursive>:
 800af30:	4770      	bx	lr

0800af32 <__retarget_lock_acquire_recursive>:
 800af32:	4770      	bx	lr

0800af34 <__retarget_lock_release_recursive>:
 800af34:	4770      	bx	lr

0800af36 <memcpy>:
 800af36:	440a      	add	r2, r1
 800af38:	4291      	cmp	r1, r2
 800af3a:	f100 33ff 	add.w	r3, r0, #4294967295
 800af3e:	d100      	bne.n	800af42 <memcpy+0xc>
 800af40:	4770      	bx	lr
 800af42:	b510      	push	{r4, lr}
 800af44:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af48:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af4c:	4291      	cmp	r1, r2
 800af4e:	d1f9      	bne.n	800af44 <memcpy+0xe>
 800af50:	bd10      	pop	{r4, pc}
	...

0800af54 <nanf>:
 800af54:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800af5c <nanf+0x8>
 800af58:	4770      	bx	lr
 800af5a:	bf00      	nop
 800af5c:	7fc00000 	.word	0x7fc00000

0800af60 <quorem>:
 800af60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af64:	6903      	ldr	r3, [r0, #16]
 800af66:	690c      	ldr	r4, [r1, #16]
 800af68:	42a3      	cmp	r3, r4
 800af6a:	4607      	mov	r7, r0
 800af6c:	db7e      	blt.n	800b06c <quorem+0x10c>
 800af6e:	3c01      	subs	r4, #1
 800af70:	f101 0814 	add.w	r8, r1, #20
 800af74:	00a3      	lsls	r3, r4, #2
 800af76:	f100 0514 	add.w	r5, r0, #20
 800af7a:	9300      	str	r3, [sp, #0]
 800af7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af80:	9301      	str	r3, [sp, #4]
 800af82:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af8a:	3301      	adds	r3, #1
 800af8c:	429a      	cmp	r2, r3
 800af8e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af92:	fbb2 f6f3 	udiv	r6, r2, r3
 800af96:	d32e      	bcc.n	800aff6 <quorem+0x96>
 800af98:	f04f 0a00 	mov.w	sl, #0
 800af9c:	46c4      	mov	ip, r8
 800af9e:	46ae      	mov	lr, r5
 800afa0:	46d3      	mov	fp, sl
 800afa2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800afa6:	b298      	uxth	r0, r3
 800afa8:	fb06 a000 	mla	r0, r6, r0, sl
 800afac:	0c02      	lsrs	r2, r0, #16
 800afae:	0c1b      	lsrs	r3, r3, #16
 800afb0:	fb06 2303 	mla	r3, r6, r3, r2
 800afb4:	f8de 2000 	ldr.w	r2, [lr]
 800afb8:	b280      	uxth	r0, r0
 800afba:	b292      	uxth	r2, r2
 800afbc:	1a12      	subs	r2, r2, r0
 800afbe:	445a      	add	r2, fp
 800afc0:	f8de 0000 	ldr.w	r0, [lr]
 800afc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800afc8:	b29b      	uxth	r3, r3
 800afca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800afce:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800afd2:	b292      	uxth	r2, r2
 800afd4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800afd8:	45e1      	cmp	r9, ip
 800afda:	f84e 2b04 	str.w	r2, [lr], #4
 800afde:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800afe2:	d2de      	bcs.n	800afa2 <quorem+0x42>
 800afe4:	9b00      	ldr	r3, [sp, #0]
 800afe6:	58eb      	ldr	r3, [r5, r3]
 800afe8:	b92b      	cbnz	r3, 800aff6 <quorem+0x96>
 800afea:	9b01      	ldr	r3, [sp, #4]
 800afec:	3b04      	subs	r3, #4
 800afee:	429d      	cmp	r5, r3
 800aff0:	461a      	mov	r2, r3
 800aff2:	d32f      	bcc.n	800b054 <quorem+0xf4>
 800aff4:	613c      	str	r4, [r7, #16]
 800aff6:	4638      	mov	r0, r7
 800aff8:	f001 f954 	bl	800c2a4 <__mcmp>
 800affc:	2800      	cmp	r0, #0
 800affe:	db25      	blt.n	800b04c <quorem+0xec>
 800b000:	4629      	mov	r1, r5
 800b002:	2000      	movs	r0, #0
 800b004:	f858 2b04 	ldr.w	r2, [r8], #4
 800b008:	f8d1 c000 	ldr.w	ip, [r1]
 800b00c:	fa1f fe82 	uxth.w	lr, r2
 800b010:	fa1f f38c 	uxth.w	r3, ip
 800b014:	eba3 030e 	sub.w	r3, r3, lr
 800b018:	4403      	add	r3, r0
 800b01a:	0c12      	lsrs	r2, r2, #16
 800b01c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b020:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b024:	b29b      	uxth	r3, r3
 800b026:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b02a:	45c1      	cmp	r9, r8
 800b02c:	f841 3b04 	str.w	r3, [r1], #4
 800b030:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b034:	d2e6      	bcs.n	800b004 <quorem+0xa4>
 800b036:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b03a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b03e:	b922      	cbnz	r2, 800b04a <quorem+0xea>
 800b040:	3b04      	subs	r3, #4
 800b042:	429d      	cmp	r5, r3
 800b044:	461a      	mov	r2, r3
 800b046:	d30b      	bcc.n	800b060 <quorem+0x100>
 800b048:	613c      	str	r4, [r7, #16]
 800b04a:	3601      	adds	r6, #1
 800b04c:	4630      	mov	r0, r6
 800b04e:	b003      	add	sp, #12
 800b050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b054:	6812      	ldr	r2, [r2, #0]
 800b056:	3b04      	subs	r3, #4
 800b058:	2a00      	cmp	r2, #0
 800b05a:	d1cb      	bne.n	800aff4 <quorem+0x94>
 800b05c:	3c01      	subs	r4, #1
 800b05e:	e7c6      	b.n	800afee <quorem+0x8e>
 800b060:	6812      	ldr	r2, [r2, #0]
 800b062:	3b04      	subs	r3, #4
 800b064:	2a00      	cmp	r2, #0
 800b066:	d1ef      	bne.n	800b048 <quorem+0xe8>
 800b068:	3c01      	subs	r4, #1
 800b06a:	e7ea      	b.n	800b042 <quorem+0xe2>
 800b06c:	2000      	movs	r0, #0
 800b06e:	e7ee      	b.n	800b04e <quorem+0xee>

0800b070 <_dtoa_r>:
 800b070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b074:	ed2d 8b02 	vpush	{d8}
 800b078:	69c7      	ldr	r7, [r0, #28]
 800b07a:	b091      	sub	sp, #68	@ 0x44
 800b07c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b080:	ec55 4b10 	vmov	r4, r5, d0
 800b084:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800b086:	9107      	str	r1, [sp, #28]
 800b088:	4681      	mov	r9, r0
 800b08a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b08c:	930d      	str	r3, [sp, #52]	@ 0x34
 800b08e:	b97f      	cbnz	r7, 800b0b0 <_dtoa_r+0x40>
 800b090:	2010      	movs	r0, #16
 800b092:	f000 fd8d 	bl	800bbb0 <malloc>
 800b096:	4602      	mov	r2, r0
 800b098:	f8c9 001c 	str.w	r0, [r9, #28]
 800b09c:	b920      	cbnz	r0, 800b0a8 <_dtoa_r+0x38>
 800b09e:	4ba0      	ldr	r3, [pc, #640]	@ (800b320 <_dtoa_r+0x2b0>)
 800b0a0:	21ef      	movs	r1, #239	@ 0xef
 800b0a2:	48a0      	ldr	r0, [pc, #640]	@ (800b324 <_dtoa_r+0x2b4>)
 800b0a4:	f002 fb64 	bl	800d770 <__assert_func>
 800b0a8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b0ac:	6007      	str	r7, [r0, #0]
 800b0ae:	60c7      	str	r7, [r0, #12]
 800b0b0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b0b4:	6819      	ldr	r1, [r3, #0]
 800b0b6:	b159      	cbz	r1, 800b0d0 <_dtoa_r+0x60>
 800b0b8:	685a      	ldr	r2, [r3, #4]
 800b0ba:	604a      	str	r2, [r1, #4]
 800b0bc:	2301      	movs	r3, #1
 800b0be:	4093      	lsls	r3, r2
 800b0c0:	608b      	str	r3, [r1, #8]
 800b0c2:	4648      	mov	r0, r9
 800b0c4:	f000 fe6a 	bl	800bd9c <_Bfree>
 800b0c8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	601a      	str	r2, [r3, #0]
 800b0d0:	1e2b      	subs	r3, r5, #0
 800b0d2:	bfbb      	ittet	lt
 800b0d4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b0d8:	9303      	strlt	r3, [sp, #12]
 800b0da:	2300      	movge	r3, #0
 800b0dc:	2201      	movlt	r2, #1
 800b0de:	bfac      	ite	ge
 800b0e0:	6033      	strge	r3, [r6, #0]
 800b0e2:	6032      	strlt	r2, [r6, #0]
 800b0e4:	4b90      	ldr	r3, [pc, #576]	@ (800b328 <_dtoa_r+0x2b8>)
 800b0e6:	9e03      	ldr	r6, [sp, #12]
 800b0e8:	43b3      	bics	r3, r6
 800b0ea:	d110      	bne.n	800b10e <_dtoa_r+0x9e>
 800b0ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b0ee:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b0f2:	6013      	str	r3, [r2, #0]
 800b0f4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800b0f8:	4323      	orrs	r3, r4
 800b0fa:	f000 84de 	beq.w	800baba <_dtoa_r+0xa4a>
 800b0fe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b100:	4f8a      	ldr	r7, [pc, #552]	@ (800b32c <_dtoa_r+0x2bc>)
 800b102:	2b00      	cmp	r3, #0
 800b104:	f000 84e0 	beq.w	800bac8 <_dtoa_r+0xa58>
 800b108:	1cfb      	adds	r3, r7, #3
 800b10a:	f000 bcdb 	b.w	800bac4 <_dtoa_r+0xa54>
 800b10e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b112:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b11a:	d10a      	bne.n	800b132 <_dtoa_r+0xc2>
 800b11c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b11e:	2301      	movs	r3, #1
 800b120:	6013      	str	r3, [r2, #0]
 800b122:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b124:	b113      	cbz	r3, 800b12c <_dtoa_r+0xbc>
 800b126:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b128:	4b81      	ldr	r3, [pc, #516]	@ (800b330 <_dtoa_r+0x2c0>)
 800b12a:	6013      	str	r3, [r2, #0]
 800b12c:	4f81      	ldr	r7, [pc, #516]	@ (800b334 <_dtoa_r+0x2c4>)
 800b12e:	f000 bccb 	b.w	800bac8 <_dtoa_r+0xa58>
 800b132:	aa0e      	add	r2, sp, #56	@ 0x38
 800b134:	a90f      	add	r1, sp, #60	@ 0x3c
 800b136:	4648      	mov	r0, r9
 800b138:	eeb0 0b48 	vmov.f64	d0, d8
 800b13c:	f001 f9d2 	bl	800c4e4 <__d2b>
 800b140:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800b144:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b146:	9001      	str	r0, [sp, #4]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d045      	beq.n	800b1d8 <_dtoa_r+0x168>
 800b14c:	eeb0 7b48 	vmov.f64	d7, d8
 800b150:	ee18 1a90 	vmov	r1, s17
 800b154:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b158:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800b15c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b160:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b164:	2500      	movs	r5, #0
 800b166:	ee07 1a90 	vmov	s15, r1
 800b16a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800b16e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b308 <_dtoa_r+0x298>
 800b172:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b176:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800b310 <_dtoa_r+0x2a0>
 800b17a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b17e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b318 <_dtoa_r+0x2a8>
 800b182:	ee07 3a90 	vmov	s15, r3
 800b186:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b18a:	eeb0 7b46 	vmov.f64	d7, d6
 800b18e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b192:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b196:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b19a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b19e:	ee16 8a90 	vmov	r8, s13
 800b1a2:	d508      	bpl.n	800b1b6 <_dtoa_r+0x146>
 800b1a4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b1a8:	eeb4 6b47 	vcmp.f64	d6, d7
 800b1ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1b0:	bf18      	it	ne
 800b1b2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800b1b6:	f1b8 0f16 	cmp.w	r8, #22
 800b1ba:	d82b      	bhi.n	800b214 <_dtoa_r+0x1a4>
 800b1bc:	495e      	ldr	r1, [pc, #376]	@ (800b338 <_dtoa_r+0x2c8>)
 800b1be:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800b1c2:	ed91 7b00 	vldr	d7, [r1]
 800b1c6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b1ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ce:	d501      	bpl.n	800b1d4 <_dtoa_r+0x164>
 800b1d0:	f108 38ff 	add.w	r8, r8, #4294967295
 800b1d4:	2100      	movs	r1, #0
 800b1d6:	e01e      	b.n	800b216 <_dtoa_r+0x1a6>
 800b1d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1da:	4413      	add	r3, r2
 800b1dc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800b1e0:	2920      	cmp	r1, #32
 800b1e2:	bfc1      	itttt	gt
 800b1e4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800b1e8:	408e      	lslgt	r6, r1
 800b1ea:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800b1ee:	fa24 f101 	lsrgt.w	r1, r4, r1
 800b1f2:	bfd6      	itet	le
 800b1f4:	f1c1 0120 	rsble	r1, r1, #32
 800b1f8:	4331      	orrgt	r1, r6
 800b1fa:	fa04 f101 	lslle.w	r1, r4, r1
 800b1fe:	ee07 1a90 	vmov	s15, r1
 800b202:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b206:	3b01      	subs	r3, #1
 800b208:	ee17 1a90 	vmov	r1, s15
 800b20c:	2501      	movs	r5, #1
 800b20e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800b212:	e7a8      	b.n	800b166 <_dtoa_r+0xf6>
 800b214:	2101      	movs	r1, #1
 800b216:	1ad2      	subs	r2, r2, r3
 800b218:	1e53      	subs	r3, r2, #1
 800b21a:	9306      	str	r3, [sp, #24]
 800b21c:	bf45      	ittet	mi
 800b21e:	f1c2 0301 	rsbmi	r3, r2, #1
 800b222:	9305      	strmi	r3, [sp, #20]
 800b224:	2300      	movpl	r3, #0
 800b226:	2300      	movmi	r3, #0
 800b228:	bf4c      	ite	mi
 800b22a:	9306      	strmi	r3, [sp, #24]
 800b22c:	9305      	strpl	r3, [sp, #20]
 800b22e:	f1b8 0f00 	cmp.w	r8, #0
 800b232:	910c      	str	r1, [sp, #48]	@ 0x30
 800b234:	db18      	blt.n	800b268 <_dtoa_r+0x1f8>
 800b236:	9b06      	ldr	r3, [sp, #24]
 800b238:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b23c:	4443      	add	r3, r8
 800b23e:	9306      	str	r3, [sp, #24]
 800b240:	2300      	movs	r3, #0
 800b242:	9a07      	ldr	r2, [sp, #28]
 800b244:	2a09      	cmp	r2, #9
 800b246:	d849      	bhi.n	800b2dc <_dtoa_r+0x26c>
 800b248:	2a05      	cmp	r2, #5
 800b24a:	bfc4      	itt	gt
 800b24c:	3a04      	subgt	r2, #4
 800b24e:	9207      	strgt	r2, [sp, #28]
 800b250:	9a07      	ldr	r2, [sp, #28]
 800b252:	f1a2 0202 	sub.w	r2, r2, #2
 800b256:	bfcc      	ite	gt
 800b258:	2400      	movgt	r4, #0
 800b25a:	2401      	movle	r4, #1
 800b25c:	2a03      	cmp	r2, #3
 800b25e:	d848      	bhi.n	800b2f2 <_dtoa_r+0x282>
 800b260:	e8df f002 	tbb	[pc, r2]
 800b264:	3a2c2e0b 	.word	0x3a2c2e0b
 800b268:	9b05      	ldr	r3, [sp, #20]
 800b26a:	2200      	movs	r2, #0
 800b26c:	eba3 0308 	sub.w	r3, r3, r8
 800b270:	9305      	str	r3, [sp, #20]
 800b272:	920a      	str	r2, [sp, #40]	@ 0x28
 800b274:	f1c8 0300 	rsb	r3, r8, #0
 800b278:	e7e3      	b.n	800b242 <_dtoa_r+0x1d2>
 800b27a:	2200      	movs	r2, #0
 800b27c:	9208      	str	r2, [sp, #32]
 800b27e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b280:	2a00      	cmp	r2, #0
 800b282:	dc39      	bgt.n	800b2f8 <_dtoa_r+0x288>
 800b284:	f04f 0b01 	mov.w	fp, #1
 800b288:	46da      	mov	sl, fp
 800b28a:	465a      	mov	r2, fp
 800b28c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b290:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800b294:	2100      	movs	r1, #0
 800b296:	2004      	movs	r0, #4
 800b298:	f100 0614 	add.w	r6, r0, #20
 800b29c:	4296      	cmp	r6, r2
 800b29e:	d930      	bls.n	800b302 <_dtoa_r+0x292>
 800b2a0:	6079      	str	r1, [r7, #4]
 800b2a2:	4648      	mov	r0, r9
 800b2a4:	9304      	str	r3, [sp, #16]
 800b2a6:	f000 fd39 	bl	800bd1c <_Balloc>
 800b2aa:	9b04      	ldr	r3, [sp, #16]
 800b2ac:	4607      	mov	r7, r0
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	d146      	bne.n	800b340 <_dtoa_r+0x2d0>
 800b2b2:	4b22      	ldr	r3, [pc, #136]	@ (800b33c <_dtoa_r+0x2cc>)
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	f240 11af 	movw	r1, #431	@ 0x1af
 800b2ba:	e6f2      	b.n	800b0a2 <_dtoa_r+0x32>
 800b2bc:	2201      	movs	r2, #1
 800b2be:	e7dd      	b.n	800b27c <_dtoa_r+0x20c>
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	9208      	str	r2, [sp, #32]
 800b2c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2c6:	eb08 0b02 	add.w	fp, r8, r2
 800b2ca:	f10b 0a01 	add.w	sl, fp, #1
 800b2ce:	4652      	mov	r2, sl
 800b2d0:	2a01      	cmp	r2, #1
 800b2d2:	bfb8      	it	lt
 800b2d4:	2201      	movlt	r2, #1
 800b2d6:	e7db      	b.n	800b290 <_dtoa_r+0x220>
 800b2d8:	2201      	movs	r2, #1
 800b2da:	e7f2      	b.n	800b2c2 <_dtoa_r+0x252>
 800b2dc:	2401      	movs	r4, #1
 800b2de:	2200      	movs	r2, #0
 800b2e0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800b2e4:	f04f 3bff 	mov.w	fp, #4294967295
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	46da      	mov	sl, fp
 800b2ec:	2212      	movs	r2, #18
 800b2ee:	9109      	str	r1, [sp, #36]	@ 0x24
 800b2f0:	e7ce      	b.n	800b290 <_dtoa_r+0x220>
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	9208      	str	r2, [sp, #32]
 800b2f6:	e7f5      	b.n	800b2e4 <_dtoa_r+0x274>
 800b2f8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800b2fc:	46da      	mov	sl, fp
 800b2fe:	465a      	mov	r2, fp
 800b300:	e7c6      	b.n	800b290 <_dtoa_r+0x220>
 800b302:	3101      	adds	r1, #1
 800b304:	0040      	lsls	r0, r0, #1
 800b306:	e7c7      	b.n	800b298 <_dtoa_r+0x228>
 800b308:	636f4361 	.word	0x636f4361
 800b30c:	3fd287a7 	.word	0x3fd287a7
 800b310:	8b60c8b3 	.word	0x8b60c8b3
 800b314:	3fc68a28 	.word	0x3fc68a28
 800b318:	509f79fb 	.word	0x509f79fb
 800b31c:	3fd34413 	.word	0x3fd34413
 800b320:	0800e626 	.word	0x0800e626
 800b324:	0800e63d 	.word	0x0800e63d
 800b328:	7ff00000 	.word	0x7ff00000
 800b32c:	0800e622 	.word	0x0800e622
 800b330:	0800e5f1 	.word	0x0800e5f1
 800b334:	0800e5f0 	.word	0x0800e5f0
 800b338:	0800e738 	.word	0x0800e738
 800b33c:	0800e695 	.word	0x0800e695
 800b340:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800b344:	f1ba 0f0e 	cmp.w	sl, #14
 800b348:	6010      	str	r0, [r2, #0]
 800b34a:	d86f      	bhi.n	800b42c <_dtoa_r+0x3bc>
 800b34c:	2c00      	cmp	r4, #0
 800b34e:	d06d      	beq.n	800b42c <_dtoa_r+0x3bc>
 800b350:	f1b8 0f00 	cmp.w	r8, #0
 800b354:	f340 80c2 	ble.w	800b4dc <_dtoa_r+0x46c>
 800b358:	4aca      	ldr	r2, [pc, #808]	@ (800b684 <_dtoa_r+0x614>)
 800b35a:	f008 010f 	and.w	r1, r8, #15
 800b35e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b362:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800b366:	ed92 7b00 	vldr	d7, [r2]
 800b36a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800b36e:	f000 80a9 	beq.w	800b4c4 <_dtoa_r+0x454>
 800b372:	4ac5      	ldr	r2, [pc, #788]	@ (800b688 <_dtoa_r+0x618>)
 800b374:	ed92 6b08 	vldr	d6, [r2, #32]
 800b378:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b37c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b380:	f001 010f 	and.w	r1, r1, #15
 800b384:	2203      	movs	r2, #3
 800b386:	48c0      	ldr	r0, [pc, #768]	@ (800b688 <_dtoa_r+0x618>)
 800b388:	2900      	cmp	r1, #0
 800b38a:	f040 809d 	bne.w	800b4c8 <_dtoa_r+0x458>
 800b38e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b392:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b396:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b39a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b39c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b3a0:	2900      	cmp	r1, #0
 800b3a2:	f000 80c1 	beq.w	800b528 <_dtoa_r+0x4b8>
 800b3a6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800b3aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b3ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3b2:	f140 80b9 	bpl.w	800b528 <_dtoa_r+0x4b8>
 800b3b6:	f1ba 0f00 	cmp.w	sl, #0
 800b3ba:	f000 80b5 	beq.w	800b528 <_dtoa_r+0x4b8>
 800b3be:	f1bb 0f00 	cmp.w	fp, #0
 800b3c2:	dd31      	ble.n	800b428 <_dtoa_r+0x3b8>
 800b3c4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b3c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b3cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b3d0:	f108 31ff 	add.w	r1, r8, #4294967295
 800b3d4:	9104      	str	r1, [sp, #16]
 800b3d6:	3201      	adds	r2, #1
 800b3d8:	465c      	mov	r4, fp
 800b3da:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b3de:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800b3e2:	ee07 2a90 	vmov	s15, r2
 800b3e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b3ea:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b3ee:	ee15 2a90 	vmov	r2, s11
 800b3f2:	ec51 0b15 	vmov	r0, r1, d5
 800b3f6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800b3fa:	2c00      	cmp	r4, #0
 800b3fc:	f040 8098 	bne.w	800b530 <_dtoa_r+0x4c0>
 800b400:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b404:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b408:	ec41 0b17 	vmov	d7, r0, r1
 800b40c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b414:	f300 8261 	bgt.w	800b8da <_dtoa_r+0x86a>
 800b418:	eeb1 7b47 	vneg.f64	d7, d7
 800b41c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b424:	f100 80f5 	bmi.w	800b612 <_dtoa_r+0x5a2>
 800b428:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b42c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b42e:	2a00      	cmp	r2, #0
 800b430:	f2c0 812c 	blt.w	800b68c <_dtoa_r+0x61c>
 800b434:	f1b8 0f0e 	cmp.w	r8, #14
 800b438:	f300 8128 	bgt.w	800b68c <_dtoa_r+0x61c>
 800b43c:	4b91      	ldr	r3, [pc, #580]	@ (800b684 <_dtoa_r+0x614>)
 800b43e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b442:	ed93 6b00 	vldr	d6, [r3]
 800b446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b448:	2b00      	cmp	r3, #0
 800b44a:	da03      	bge.n	800b454 <_dtoa_r+0x3e4>
 800b44c:	f1ba 0f00 	cmp.w	sl, #0
 800b450:	f340 80d2 	ble.w	800b5f8 <_dtoa_r+0x588>
 800b454:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800b458:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b45c:	463e      	mov	r6, r7
 800b45e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b462:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b466:	ee15 3a10 	vmov	r3, s10
 800b46a:	3330      	adds	r3, #48	@ 0x30
 800b46c:	f806 3b01 	strb.w	r3, [r6], #1
 800b470:	1bf3      	subs	r3, r6, r7
 800b472:	459a      	cmp	sl, r3
 800b474:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b478:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b47c:	f040 80f8 	bne.w	800b670 <_dtoa_r+0x600>
 800b480:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b484:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b48c:	f300 80dd 	bgt.w	800b64a <_dtoa_r+0x5da>
 800b490:	eeb4 7b46 	vcmp.f64	d7, d6
 800b494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b498:	d104      	bne.n	800b4a4 <_dtoa_r+0x434>
 800b49a:	ee15 3a10 	vmov	r3, s10
 800b49e:	07db      	lsls	r3, r3, #31
 800b4a0:	f100 80d3 	bmi.w	800b64a <_dtoa_r+0x5da>
 800b4a4:	9901      	ldr	r1, [sp, #4]
 800b4a6:	4648      	mov	r0, r9
 800b4a8:	f000 fc78 	bl	800bd9c <_Bfree>
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b4b0:	7033      	strb	r3, [r6, #0]
 800b4b2:	f108 0301 	add.w	r3, r8, #1
 800b4b6:	6013      	str	r3, [r2, #0]
 800b4b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	f000 8304 	beq.w	800bac8 <_dtoa_r+0xa58>
 800b4c0:	601e      	str	r6, [r3, #0]
 800b4c2:	e301      	b.n	800bac8 <_dtoa_r+0xa58>
 800b4c4:	2202      	movs	r2, #2
 800b4c6:	e75e      	b.n	800b386 <_dtoa_r+0x316>
 800b4c8:	07cc      	lsls	r4, r1, #31
 800b4ca:	d504      	bpl.n	800b4d6 <_dtoa_r+0x466>
 800b4cc:	ed90 6b00 	vldr	d6, [r0]
 800b4d0:	3201      	adds	r2, #1
 800b4d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b4d6:	1049      	asrs	r1, r1, #1
 800b4d8:	3008      	adds	r0, #8
 800b4da:	e755      	b.n	800b388 <_dtoa_r+0x318>
 800b4dc:	d022      	beq.n	800b524 <_dtoa_r+0x4b4>
 800b4de:	f1c8 0100 	rsb	r1, r8, #0
 800b4e2:	4a68      	ldr	r2, [pc, #416]	@ (800b684 <_dtoa_r+0x614>)
 800b4e4:	f001 000f 	and.w	r0, r1, #15
 800b4e8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b4ec:	ed92 7b00 	vldr	d7, [r2]
 800b4f0:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b4f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b4f8:	4863      	ldr	r0, [pc, #396]	@ (800b688 <_dtoa_r+0x618>)
 800b4fa:	1109      	asrs	r1, r1, #4
 800b4fc:	2400      	movs	r4, #0
 800b4fe:	2202      	movs	r2, #2
 800b500:	b929      	cbnz	r1, 800b50e <_dtoa_r+0x49e>
 800b502:	2c00      	cmp	r4, #0
 800b504:	f43f af49 	beq.w	800b39a <_dtoa_r+0x32a>
 800b508:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b50c:	e745      	b.n	800b39a <_dtoa_r+0x32a>
 800b50e:	07ce      	lsls	r6, r1, #31
 800b510:	d505      	bpl.n	800b51e <_dtoa_r+0x4ae>
 800b512:	ed90 6b00 	vldr	d6, [r0]
 800b516:	3201      	adds	r2, #1
 800b518:	2401      	movs	r4, #1
 800b51a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b51e:	1049      	asrs	r1, r1, #1
 800b520:	3008      	adds	r0, #8
 800b522:	e7ed      	b.n	800b500 <_dtoa_r+0x490>
 800b524:	2202      	movs	r2, #2
 800b526:	e738      	b.n	800b39a <_dtoa_r+0x32a>
 800b528:	f8cd 8010 	str.w	r8, [sp, #16]
 800b52c:	4654      	mov	r4, sl
 800b52e:	e754      	b.n	800b3da <_dtoa_r+0x36a>
 800b530:	4a54      	ldr	r2, [pc, #336]	@ (800b684 <_dtoa_r+0x614>)
 800b532:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800b536:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b53a:	9a08      	ldr	r2, [sp, #32]
 800b53c:	ec41 0b17 	vmov	d7, r0, r1
 800b540:	443c      	add	r4, r7
 800b542:	b34a      	cbz	r2, 800b598 <_dtoa_r+0x528>
 800b544:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800b548:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800b54c:	463e      	mov	r6, r7
 800b54e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b552:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b556:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b55a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b55e:	ee14 2a90 	vmov	r2, s9
 800b562:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b566:	3230      	adds	r2, #48	@ 0x30
 800b568:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b56c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b574:	f806 2b01 	strb.w	r2, [r6], #1
 800b578:	d438      	bmi.n	800b5ec <_dtoa_r+0x57c>
 800b57a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b57e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b586:	d462      	bmi.n	800b64e <_dtoa_r+0x5de>
 800b588:	42a6      	cmp	r6, r4
 800b58a:	f43f af4d 	beq.w	800b428 <_dtoa_r+0x3b8>
 800b58e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b592:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b596:	e7e0      	b.n	800b55a <_dtoa_r+0x4ea>
 800b598:	4621      	mov	r1, r4
 800b59a:	463e      	mov	r6, r7
 800b59c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b5a0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b5a4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b5a8:	ee14 2a90 	vmov	r2, s9
 800b5ac:	3230      	adds	r2, #48	@ 0x30
 800b5ae:	f806 2b01 	strb.w	r2, [r6], #1
 800b5b2:	42a6      	cmp	r6, r4
 800b5b4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b5b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b5bc:	d119      	bne.n	800b5f2 <_dtoa_r+0x582>
 800b5be:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800b5c2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b5c6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5ce:	dc3e      	bgt.n	800b64e <_dtoa_r+0x5de>
 800b5d0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b5d4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5dc:	f57f af24 	bpl.w	800b428 <_dtoa_r+0x3b8>
 800b5e0:	460e      	mov	r6, r1
 800b5e2:	3901      	subs	r1, #1
 800b5e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b5e8:	2b30      	cmp	r3, #48	@ 0x30
 800b5ea:	d0f9      	beq.n	800b5e0 <_dtoa_r+0x570>
 800b5ec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b5f0:	e758      	b.n	800b4a4 <_dtoa_r+0x434>
 800b5f2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b5f6:	e7d5      	b.n	800b5a4 <_dtoa_r+0x534>
 800b5f8:	d10b      	bne.n	800b612 <_dtoa_r+0x5a2>
 800b5fa:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b5fe:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b602:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b606:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b60a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b60e:	f2c0 8161 	blt.w	800b8d4 <_dtoa_r+0x864>
 800b612:	2400      	movs	r4, #0
 800b614:	4625      	mov	r5, r4
 800b616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b618:	43db      	mvns	r3, r3
 800b61a:	9304      	str	r3, [sp, #16]
 800b61c:	463e      	mov	r6, r7
 800b61e:	f04f 0800 	mov.w	r8, #0
 800b622:	4621      	mov	r1, r4
 800b624:	4648      	mov	r0, r9
 800b626:	f000 fbb9 	bl	800bd9c <_Bfree>
 800b62a:	2d00      	cmp	r5, #0
 800b62c:	d0de      	beq.n	800b5ec <_dtoa_r+0x57c>
 800b62e:	f1b8 0f00 	cmp.w	r8, #0
 800b632:	d005      	beq.n	800b640 <_dtoa_r+0x5d0>
 800b634:	45a8      	cmp	r8, r5
 800b636:	d003      	beq.n	800b640 <_dtoa_r+0x5d0>
 800b638:	4641      	mov	r1, r8
 800b63a:	4648      	mov	r0, r9
 800b63c:	f000 fbae 	bl	800bd9c <_Bfree>
 800b640:	4629      	mov	r1, r5
 800b642:	4648      	mov	r0, r9
 800b644:	f000 fbaa 	bl	800bd9c <_Bfree>
 800b648:	e7d0      	b.n	800b5ec <_dtoa_r+0x57c>
 800b64a:	f8cd 8010 	str.w	r8, [sp, #16]
 800b64e:	4633      	mov	r3, r6
 800b650:	461e      	mov	r6, r3
 800b652:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b656:	2a39      	cmp	r2, #57	@ 0x39
 800b658:	d106      	bne.n	800b668 <_dtoa_r+0x5f8>
 800b65a:	429f      	cmp	r7, r3
 800b65c:	d1f8      	bne.n	800b650 <_dtoa_r+0x5e0>
 800b65e:	9a04      	ldr	r2, [sp, #16]
 800b660:	3201      	adds	r2, #1
 800b662:	9204      	str	r2, [sp, #16]
 800b664:	2230      	movs	r2, #48	@ 0x30
 800b666:	703a      	strb	r2, [r7, #0]
 800b668:	781a      	ldrb	r2, [r3, #0]
 800b66a:	3201      	adds	r2, #1
 800b66c:	701a      	strb	r2, [r3, #0]
 800b66e:	e7bd      	b.n	800b5ec <_dtoa_r+0x57c>
 800b670:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b674:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b67c:	f47f aeef 	bne.w	800b45e <_dtoa_r+0x3ee>
 800b680:	e710      	b.n	800b4a4 <_dtoa_r+0x434>
 800b682:	bf00      	nop
 800b684:	0800e738 	.word	0x0800e738
 800b688:	0800e710 	.word	0x0800e710
 800b68c:	9908      	ldr	r1, [sp, #32]
 800b68e:	2900      	cmp	r1, #0
 800b690:	f000 80e3 	beq.w	800b85a <_dtoa_r+0x7ea>
 800b694:	9907      	ldr	r1, [sp, #28]
 800b696:	2901      	cmp	r1, #1
 800b698:	f300 80c8 	bgt.w	800b82c <_dtoa_r+0x7bc>
 800b69c:	2d00      	cmp	r5, #0
 800b69e:	f000 80c1 	beq.w	800b824 <_dtoa_r+0x7b4>
 800b6a2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b6a6:	9e05      	ldr	r6, [sp, #20]
 800b6a8:	461c      	mov	r4, r3
 800b6aa:	9304      	str	r3, [sp, #16]
 800b6ac:	9b05      	ldr	r3, [sp, #20]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	9305      	str	r3, [sp, #20]
 800b6b2:	9b06      	ldr	r3, [sp, #24]
 800b6b4:	2101      	movs	r1, #1
 800b6b6:	4413      	add	r3, r2
 800b6b8:	4648      	mov	r0, r9
 800b6ba:	9306      	str	r3, [sp, #24]
 800b6bc:	f000 fc6c 	bl	800bf98 <__i2b>
 800b6c0:	9b04      	ldr	r3, [sp, #16]
 800b6c2:	4605      	mov	r5, r0
 800b6c4:	b166      	cbz	r6, 800b6e0 <_dtoa_r+0x670>
 800b6c6:	9a06      	ldr	r2, [sp, #24]
 800b6c8:	2a00      	cmp	r2, #0
 800b6ca:	dd09      	ble.n	800b6e0 <_dtoa_r+0x670>
 800b6cc:	42b2      	cmp	r2, r6
 800b6ce:	9905      	ldr	r1, [sp, #20]
 800b6d0:	bfa8      	it	ge
 800b6d2:	4632      	movge	r2, r6
 800b6d4:	1a89      	subs	r1, r1, r2
 800b6d6:	9105      	str	r1, [sp, #20]
 800b6d8:	9906      	ldr	r1, [sp, #24]
 800b6da:	1ab6      	subs	r6, r6, r2
 800b6dc:	1a8a      	subs	r2, r1, r2
 800b6de:	9206      	str	r2, [sp, #24]
 800b6e0:	b1fb      	cbz	r3, 800b722 <_dtoa_r+0x6b2>
 800b6e2:	9a08      	ldr	r2, [sp, #32]
 800b6e4:	2a00      	cmp	r2, #0
 800b6e6:	f000 80bc 	beq.w	800b862 <_dtoa_r+0x7f2>
 800b6ea:	b19c      	cbz	r4, 800b714 <_dtoa_r+0x6a4>
 800b6ec:	4629      	mov	r1, r5
 800b6ee:	4622      	mov	r2, r4
 800b6f0:	4648      	mov	r0, r9
 800b6f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6f4:	f000 fd10 	bl	800c118 <__pow5mult>
 800b6f8:	9a01      	ldr	r2, [sp, #4]
 800b6fa:	4601      	mov	r1, r0
 800b6fc:	4605      	mov	r5, r0
 800b6fe:	4648      	mov	r0, r9
 800b700:	f000 fc60 	bl	800bfc4 <__multiply>
 800b704:	9901      	ldr	r1, [sp, #4]
 800b706:	9004      	str	r0, [sp, #16]
 800b708:	4648      	mov	r0, r9
 800b70a:	f000 fb47 	bl	800bd9c <_Bfree>
 800b70e:	9a04      	ldr	r2, [sp, #16]
 800b710:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b712:	9201      	str	r2, [sp, #4]
 800b714:	1b1a      	subs	r2, r3, r4
 800b716:	d004      	beq.n	800b722 <_dtoa_r+0x6b2>
 800b718:	9901      	ldr	r1, [sp, #4]
 800b71a:	4648      	mov	r0, r9
 800b71c:	f000 fcfc 	bl	800c118 <__pow5mult>
 800b720:	9001      	str	r0, [sp, #4]
 800b722:	2101      	movs	r1, #1
 800b724:	4648      	mov	r0, r9
 800b726:	f000 fc37 	bl	800bf98 <__i2b>
 800b72a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b72c:	4604      	mov	r4, r0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f000 81d0 	beq.w	800bad4 <_dtoa_r+0xa64>
 800b734:	461a      	mov	r2, r3
 800b736:	4601      	mov	r1, r0
 800b738:	4648      	mov	r0, r9
 800b73a:	f000 fced 	bl	800c118 <__pow5mult>
 800b73e:	9b07      	ldr	r3, [sp, #28]
 800b740:	2b01      	cmp	r3, #1
 800b742:	4604      	mov	r4, r0
 800b744:	f300 8095 	bgt.w	800b872 <_dtoa_r+0x802>
 800b748:	9b02      	ldr	r3, [sp, #8]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	f040 808b 	bne.w	800b866 <_dtoa_r+0x7f6>
 800b750:	9b03      	ldr	r3, [sp, #12]
 800b752:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b756:	2a00      	cmp	r2, #0
 800b758:	f040 8087 	bne.w	800b86a <_dtoa_r+0x7fa>
 800b75c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b760:	0d12      	lsrs	r2, r2, #20
 800b762:	0512      	lsls	r2, r2, #20
 800b764:	2a00      	cmp	r2, #0
 800b766:	f000 8082 	beq.w	800b86e <_dtoa_r+0x7fe>
 800b76a:	9b05      	ldr	r3, [sp, #20]
 800b76c:	3301      	adds	r3, #1
 800b76e:	9305      	str	r3, [sp, #20]
 800b770:	9b06      	ldr	r3, [sp, #24]
 800b772:	3301      	adds	r3, #1
 800b774:	9306      	str	r3, [sp, #24]
 800b776:	2301      	movs	r3, #1
 800b778:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b77a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	f000 81af 	beq.w	800bae0 <_dtoa_r+0xa70>
 800b782:	6922      	ldr	r2, [r4, #16]
 800b784:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b788:	6910      	ldr	r0, [r2, #16]
 800b78a:	f000 fbb9 	bl	800bf00 <__hi0bits>
 800b78e:	f1c0 0020 	rsb	r0, r0, #32
 800b792:	9b06      	ldr	r3, [sp, #24]
 800b794:	4418      	add	r0, r3
 800b796:	f010 001f 	ands.w	r0, r0, #31
 800b79a:	d076      	beq.n	800b88a <_dtoa_r+0x81a>
 800b79c:	f1c0 0220 	rsb	r2, r0, #32
 800b7a0:	2a04      	cmp	r2, #4
 800b7a2:	dd69      	ble.n	800b878 <_dtoa_r+0x808>
 800b7a4:	9b05      	ldr	r3, [sp, #20]
 800b7a6:	f1c0 001c 	rsb	r0, r0, #28
 800b7aa:	4403      	add	r3, r0
 800b7ac:	9305      	str	r3, [sp, #20]
 800b7ae:	9b06      	ldr	r3, [sp, #24]
 800b7b0:	4406      	add	r6, r0
 800b7b2:	4403      	add	r3, r0
 800b7b4:	9306      	str	r3, [sp, #24]
 800b7b6:	9b05      	ldr	r3, [sp, #20]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	dd05      	ble.n	800b7c8 <_dtoa_r+0x758>
 800b7bc:	9901      	ldr	r1, [sp, #4]
 800b7be:	461a      	mov	r2, r3
 800b7c0:	4648      	mov	r0, r9
 800b7c2:	f000 fd03 	bl	800c1cc <__lshift>
 800b7c6:	9001      	str	r0, [sp, #4]
 800b7c8:	9b06      	ldr	r3, [sp, #24]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	dd05      	ble.n	800b7da <_dtoa_r+0x76a>
 800b7ce:	4621      	mov	r1, r4
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	4648      	mov	r0, r9
 800b7d4:	f000 fcfa 	bl	800c1cc <__lshift>
 800b7d8:	4604      	mov	r4, r0
 800b7da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d056      	beq.n	800b88e <_dtoa_r+0x81e>
 800b7e0:	9801      	ldr	r0, [sp, #4]
 800b7e2:	4621      	mov	r1, r4
 800b7e4:	f000 fd5e 	bl	800c2a4 <__mcmp>
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	da50      	bge.n	800b88e <_dtoa_r+0x81e>
 800b7ec:	f108 33ff 	add.w	r3, r8, #4294967295
 800b7f0:	9304      	str	r3, [sp, #16]
 800b7f2:	9901      	ldr	r1, [sp, #4]
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	220a      	movs	r2, #10
 800b7f8:	4648      	mov	r0, r9
 800b7fa:	f000 faf1 	bl	800bde0 <__multadd>
 800b7fe:	9b08      	ldr	r3, [sp, #32]
 800b800:	9001      	str	r0, [sp, #4]
 800b802:	2b00      	cmp	r3, #0
 800b804:	f000 816e 	beq.w	800bae4 <_dtoa_r+0xa74>
 800b808:	4629      	mov	r1, r5
 800b80a:	2300      	movs	r3, #0
 800b80c:	220a      	movs	r2, #10
 800b80e:	4648      	mov	r0, r9
 800b810:	f000 fae6 	bl	800bde0 <__multadd>
 800b814:	f1bb 0f00 	cmp.w	fp, #0
 800b818:	4605      	mov	r5, r0
 800b81a:	dc64      	bgt.n	800b8e6 <_dtoa_r+0x876>
 800b81c:	9b07      	ldr	r3, [sp, #28]
 800b81e:	2b02      	cmp	r3, #2
 800b820:	dc3e      	bgt.n	800b8a0 <_dtoa_r+0x830>
 800b822:	e060      	b.n	800b8e6 <_dtoa_r+0x876>
 800b824:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b826:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b82a:	e73c      	b.n	800b6a6 <_dtoa_r+0x636>
 800b82c:	f10a 34ff 	add.w	r4, sl, #4294967295
 800b830:	42a3      	cmp	r3, r4
 800b832:	bfbf      	itttt	lt
 800b834:	1ae2      	sublt	r2, r4, r3
 800b836:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b838:	189b      	addlt	r3, r3, r2
 800b83a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800b83c:	bfae      	itee	ge
 800b83e:	1b1c      	subge	r4, r3, r4
 800b840:	4623      	movlt	r3, r4
 800b842:	2400      	movlt	r4, #0
 800b844:	f1ba 0f00 	cmp.w	sl, #0
 800b848:	bfb5      	itete	lt
 800b84a:	9a05      	ldrlt	r2, [sp, #20]
 800b84c:	9e05      	ldrge	r6, [sp, #20]
 800b84e:	eba2 060a 	sublt.w	r6, r2, sl
 800b852:	4652      	movge	r2, sl
 800b854:	bfb8      	it	lt
 800b856:	2200      	movlt	r2, #0
 800b858:	e727      	b.n	800b6aa <_dtoa_r+0x63a>
 800b85a:	9e05      	ldr	r6, [sp, #20]
 800b85c:	9d08      	ldr	r5, [sp, #32]
 800b85e:	461c      	mov	r4, r3
 800b860:	e730      	b.n	800b6c4 <_dtoa_r+0x654>
 800b862:	461a      	mov	r2, r3
 800b864:	e758      	b.n	800b718 <_dtoa_r+0x6a8>
 800b866:	2300      	movs	r3, #0
 800b868:	e786      	b.n	800b778 <_dtoa_r+0x708>
 800b86a:	9b02      	ldr	r3, [sp, #8]
 800b86c:	e784      	b.n	800b778 <_dtoa_r+0x708>
 800b86e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b870:	e783      	b.n	800b77a <_dtoa_r+0x70a>
 800b872:	2300      	movs	r3, #0
 800b874:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b876:	e784      	b.n	800b782 <_dtoa_r+0x712>
 800b878:	d09d      	beq.n	800b7b6 <_dtoa_r+0x746>
 800b87a:	9b05      	ldr	r3, [sp, #20]
 800b87c:	321c      	adds	r2, #28
 800b87e:	4413      	add	r3, r2
 800b880:	9305      	str	r3, [sp, #20]
 800b882:	9b06      	ldr	r3, [sp, #24]
 800b884:	4416      	add	r6, r2
 800b886:	4413      	add	r3, r2
 800b888:	e794      	b.n	800b7b4 <_dtoa_r+0x744>
 800b88a:	4602      	mov	r2, r0
 800b88c:	e7f5      	b.n	800b87a <_dtoa_r+0x80a>
 800b88e:	f1ba 0f00 	cmp.w	sl, #0
 800b892:	f8cd 8010 	str.w	r8, [sp, #16]
 800b896:	46d3      	mov	fp, sl
 800b898:	dc21      	bgt.n	800b8de <_dtoa_r+0x86e>
 800b89a:	9b07      	ldr	r3, [sp, #28]
 800b89c:	2b02      	cmp	r3, #2
 800b89e:	dd1e      	ble.n	800b8de <_dtoa_r+0x86e>
 800b8a0:	f1bb 0f00 	cmp.w	fp, #0
 800b8a4:	f47f aeb7 	bne.w	800b616 <_dtoa_r+0x5a6>
 800b8a8:	4621      	mov	r1, r4
 800b8aa:	465b      	mov	r3, fp
 800b8ac:	2205      	movs	r2, #5
 800b8ae:	4648      	mov	r0, r9
 800b8b0:	f000 fa96 	bl	800bde0 <__multadd>
 800b8b4:	4601      	mov	r1, r0
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	9801      	ldr	r0, [sp, #4]
 800b8ba:	f000 fcf3 	bl	800c2a4 <__mcmp>
 800b8be:	2800      	cmp	r0, #0
 800b8c0:	f77f aea9 	ble.w	800b616 <_dtoa_r+0x5a6>
 800b8c4:	463e      	mov	r6, r7
 800b8c6:	2331      	movs	r3, #49	@ 0x31
 800b8c8:	f806 3b01 	strb.w	r3, [r6], #1
 800b8cc:	9b04      	ldr	r3, [sp, #16]
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	9304      	str	r3, [sp, #16]
 800b8d2:	e6a4      	b.n	800b61e <_dtoa_r+0x5ae>
 800b8d4:	f8cd 8010 	str.w	r8, [sp, #16]
 800b8d8:	4654      	mov	r4, sl
 800b8da:	4625      	mov	r5, r4
 800b8dc:	e7f2      	b.n	800b8c4 <_dtoa_r+0x854>
 800b8de:	9b08      	ldr	r3, [sp, #32]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f000 8103 	beq.w	800baec <_dtoa_r+0xa7c>
 800b8e6:	2e00      	cmp	r6, #0
 800b8e8:	dd05      	ble.n	800b8f6 <_dtoa_r+0x886>
 800b8ea:	4629      	mov	r1, r5
 800b8ec:	4632      	mov	r2, r6
 800b8ee:	4648      	mov	r0, r9
 800b8f0:	f000 fc6c 	bl	800c1cc <__lshift>
 800b8f4:	4605      	mov	r5, r0
 800b8f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d058      	beq.n	800b9ae <_dtoa_r+0x93e>
 800b8fc:	6869      	ldr	r1, [r5, #4]
 800b8fe:	4648      	mov	r0, r9
 800b900:	f000 fa0c 	bl	800bd1c <_Balloc>
 800b904:	4606      	mov	r6, r0
 800b906:	b928      	cbnz	r0, 800b914 <_dtoa_r+0x8a4>
 800b908:	4b82      	ldr	r3, [pc, #520]	@ (800bb14 <_dtoa_r+0xaa4>)
 800b90a:	4602      	mov	r2, r0
 800b90c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b910:	f7ff bbc7 	b.w	800b0a2 <_dtoa_r+0x32>
 800b914:	692a      	ldr	r2, [r5, #16]
 800b916:	3202      	adds	r2, #2
 800b918:	0092      	lsls	r2, r2, #2
 800b91a:	f105 010c 	add.w	r1, r5, #12
 800b91e:	300c      	adds	r0, #12
 800b920:	f7ff fb09 	bl	800af36 <memcpy>
 800b924:	2201      	movs	r2, #1
 800b926:	4631      	mov	r1, r6
 800b928:	4648      	mov	r0, r9
 800b92a:	f000 fc4f 	bl	800c1cc <__lshift>
 800b92e:	1c7b      	adds	r3, r7, #1
 800b930:	9305      	str	r3, [sp, #20]
 800b932:	eb07 030b 	add.w	r3, r7, fp
 800b936:	9309      	str	r3, [sp, #36]	@ 0x24
 800b938:	9b02      	ldr	r3, [sp, #8]
 800b93a:	f003 0301 	and.w	r3, r3, #1
 800b93e:	46a8      	mov	r8, r5
 800b940:	9308      	str	r3, [sp, #32]
 800b942:	4605      	mov	r5, r0
 800b944:	9b05      	ldr	r3, [sp, #20]
 800b946:	9801      	ldr	r0, [sp, #4]
 800b948:	4621      	mov	r1, r4
 800b94a:	f103 3bff 	add.w	fp, r3, #4294967295
 800b94e:	f7ff fb07 	bl	800af60 <quorem>
 800b952:	4641      	mov	r1, r8
 800b954:	9002      	str	r0, [sp, #8]
 800b956:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b95a:	9801      	ldr	r0, [sp, #4]
 800b95c:	f000 fca2 	bl	800c2a4 <__mcmp>
 800b960:	462a      	mov	r2, r5
 800b962:	9006      	str	r0, [sp, #24]
 800b964:	4621      	mov	r1, r4
 800b966:	4648      	mov	r0, r9
 800b968:	f000 fcb8 	bl	800c2dc <__mdiff>
 800b96c:	68c2      	ldr	r2, [r0, #12]
 800b96e:	4606      	mov	r6, r0
 800b970:	b9fa      	cbnz	r2, 800b9b2 <_dtoa_r+0x942>
 800b972:	4601      	mov	r1, r0
 800b974:	9801      	ldr	r0, [sp, #4]
 800b976:	f000 fc95 	bl	800c2a4 <__mcmp>
 800b97a:	4602      	mov	r2, r0
 800b97c:	4631      	mov	r1, r6
 800b97e:	4648      	mov	r0, r9
 800b980:	920a      	str	r2, [sp, #40]	@ 0x28
 800b982:	f000 fa0b 	bl	800bd9c <_Bfree>
 800b986:	9b07      	ldr	r3, [sp, #28]
 800b988:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b98a:	9e05      	ldr	r6, [sp, #20]
 800b98c:	ea43 0102 	orr.w	r1, r3, r2
 800b990:	9b08      	ldr	r3, [sp, #32]
 800b992:	4319      	orrs	r1, r3
 800b994:	d10f      	bne.n	800b9b6 <_dtoa_r+0x946>
 800b996:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b99a:	d028      	beq.n	800b9ee <_dtoa_r+0x97e>
 800b99c:	9b06      	ldr	r3, [sp, #24]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	dd02      	ble.n	800b9a8 <_dtoa_r+0x938>
 800b9a2:	9b02      	ldr	r3, [sp, #8]
 800b9a4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800b9a8:	f88b a000 	strb.w	sl, [fp]
 800b9ac:	e639      	b.n	800b622 <_dtoa_r+0x5b2>
 800b9ae:	4628      	mov	r0, r5
 800b9b0:	e7bd      	b.n	800b92e <_dtoa_r+0x8be>
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	e7e2      	b.n	800b97c <_dtoa_r+0x90c>
 800b9b6:	9b06      	ldr	r3, [sp, #24]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	db04      	blt.n	800b9c6 <_dtoa_r+0x956>
 800b9bc:	9907      	ldr	r1, [sp, #28]
 800b9be:	430b      	orrs	r3, r1
 800b9c0:	9908      	ldr	r1, [sp, #32]
 800b9c2:	430b      	orrs	r3, r1
 800b9c4:	d120      	bne.n	800ba08 <_dtoa_r+0x998>
 800b9c6:	2a00      	cmp	r2, #0
 800b9c8:	ddee      	ble.n	800b9a8 <_dtoa_r+0x938>
 800b9ca:	9901      	ldr	r1, [sp, #4]
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	4648      	mov	r0, r9
 800b9d0:	f000 fbfc 	bl	800c1cc <__lshift>
 800b9d4:	4621      	mov	r1, r4
 800b9d6:	9001      	str	r0, [sp, #4]
 800b9d8:	f000 fc64 	bl	800c2a4 <__mcmp>
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	dc03      	bgt.n	800b9e8 <_dtoa_r+0x978>
 800b9e0:	d1e2      	bne.n	800b9a8 <_dtoa_r+0x938>
 800b9e2:	f01a 0f01 	tst.w	sl, #1
 800b9e6:	d0df      	beq.n	800b9a8 <_dtoa_r+0x938>
 800b9e8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b9ec:	d1d9      	bne.n	800b9a2 <_dtoa_r+0x932>
 800b9ee:	2339      	movs	r3, #57	@ 0x39
 800b9f0:	f88b 3000 	strb.w	r3, [fp]
 800b9f4:	4633      	mov	r3, r6
 800b9f6:	461e      	mov	r6, r3
 800b9f8:	3b01      	subs	r3, #1
 800b9fa:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b9fe:	2a39      	cmp	r2, #57	@ 0x39
 800ba00:	d053      	beq.n	800baaa <_dtoa_r+0xa3a>
 800ba02:	3201      	adds	r2, #1
 800ba04:	701a      	strb	r2, [r3, #0]
 800ba06:	e60c      	b.n	800b622 <_dtoa_r+0x5b2>
 800ba08:	2a00      	cmp	r2, #0
 800ba0a:	dd07      	ble.n	800ba1c <_dtoa_r+0x9ac>
 800ba0c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800ba10:	d0ed      	beq.n	800b9ee <_dtoa_r+0x97e>
 800ba12:	f10a 0301 	add.w	r3, sl, #1
 800ba16:	f88b 3000 	strb.w	r3, [fp]
 800ba1a:	e602      	b.n	800b622 <_dtoa_r+0x5b2>
 800ba1c:	9b05      	ldr	r3, [sp, #20]
 800ba1e:	9a05      	ldr	r2, [sp, #20]
 800ba20:	f803 ac01 	strb.w	sl, [r3, #-1]
 800ba24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d029      	beq.n	800ba7e <_dtoa_r+0xa0e>
 800ba2a:	9901      	ldr	r1, [sp, #4]
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	220a      	movs	r2, #10
 800ba30:	4648      	mov	r0, r9
 800ba32:	f000 f9d5 	bl	800bde0 <__multadd>
 800ba36:	45a8      	cmp	r8, r5
 800ba38:	9001      	str	r0, [sp, #4]
 800ba3a:	f04f 0300 	mov.w	r3, #0
 800ba3e:	f04f 020a 	mov.w	r2, #10
 800ba42:	4641      	mov	r1, r8
 800ba44:	4648      	mov	r0, r9
 800ba46:	d107      	bne.n	800ba58 <_dtoa_r+0x9e8>
 800ba48:	f000 f9ca 	bl	800bde0 <__multadd>
 800ba4c:	4680      	mov	r8, r0
 800ba4e:	4605      	mov	r5, r0
 800ba50:	9b05      	ldr	r3, [sp, #20]
 800ba52:	3301      	adds	r3, #1
 800ba54:	9305      	str	r3, [sp, #20]
 800ba56:	e775      	b.n	800b944 <_dtoa_r+0x8d4>
 800ba58:	f000 f9c2 	bl	800bde0 <__multadd>
 800ba5c:	4629      	mov	r1, r5
 800ba5e:	4680      	mov	r8, r0
 800ba60:	2300      	movs	r3, #0
 800ba62:	220a      	movs	r2, #10
 800ba64:	4648      	mov	r0, r9
 800ba66:	f000 f9bb 	bl	800bde0 <__multadd>
 800ba6a:	4605      	mov	r5, r0
 800ba6c:	e7f0      	b.n	800ba50 <_dtoa_r+0x9e0>
 800ba6e:	f1bb 0f00 	cmp.w	fp, #0
 800ba72:	bfcc      	ite	gt
 800ba74:	465e      	movgt	r6, fp
 800ba76:	2601      	movle	r6, #1
 800ba78:	443e      	add	r6, r7
 800ba7a:	f04f 0800 	mov.w	r8, #0
 800ba7e:	9901      	ldr	r1, [sp, #4]
 800ba80:	2201      	movs	r2, #1
 800ba82:	4648      	mov	r0, r9
 800ba84:	f000 fba2 	bl	800c1cc <__lshift>
 800ba88:	4621      	mov	r1, r4
 800ba8a:	9001      	str	r0, [sp, #4]
 800ba8c:	f000 fc0a 	bl	800c2a4 <__mcmp>
 800ba90:	2800      	cmp	r0, #0
 800ba92:	dcaf      	bgt.n	800b9f4 <_dtoa_r+0x984>
 800ba94:	d102      	bne.n	800ba9c <_dtoa_r+0xa2c>
 800ba96:	f01a 0f01 	tst.w	sl, #1
 800ba9a:	d1ab      	bne.n	800b9f4 <_dtoa_r+0x984>
 800ba9c:	4633      	mov	r3, r6
 800ba9e:	461e      	mov	r6, r3
 800baa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800baa4:	2a30      	cmp	r2, #48	@ 0x30
 800baa6:	d0fa      	beq.n	800ba9e <_dtoa_r+0xa2e>
 800baa8:	e5bb      	b.n	800b622 <_dtoa_r+0x5b2>
 800baaa:	429f      	cmp	r7, r3
 800baac:	d1a3      	bne.n	800b9f6 <_dtoa_r+0x986>
 800baae:	9b04      	ldr	r3, [sp, #16]
 800bab0:	3301      	adds	r3, #1
 800bab2:	9304      	str	r3, [sp, #16]
 800bab4:	2331      	movs	r3, #49	@ 0x31
 800bab6:	703b      	strb	r3, [r7, #0]
 800bab8:	e5b3      	b.n	800b622 <_dtoa_r+0x5b2>
 800baba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800babc:	4f16      	ldr	r7, [pc, #88]	@ (800bb18 <_dtoa_r+0xaa8>)
 800babe:	b11b      	cbz	r3, 800bac8 <_dtoa_r+0xa58>
 800bac0:	f107 0308 	add.w	r3, r7, #8
 800bac4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800bac6:	6013      	str	r3, [r2, #0]
 800bac8:	4638      	mov	r0, r7
 800baca:	b011      	add	sp, #68	@ 0x44
 800bacc:	ecbd 8b02 	vpop	{d8}
 800bad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bad4:	9b07      	ldr	r3, [sp, #28]
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	f77f ae36 	ble.w	800b748 <_dtoa_r+0x6d8>
 800badc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bade:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bae0:	2001      	movs	r0, #1
 800bae2:	e656      	b.n	800b792 <_dtoa_r+0x722>
 800bae4:	f1bb 0f00 	cmp.w	fp, #0
 800bae8:	f77f aed7 	ble.w	800b89a <_dtoa_r+0x82a>
 800baec:	463e      	mov	r6, r7
 800baee:	9801      	ldr	r0, [sp, #4]
 800baf0:	4621      	mov	r1, r4
 800baf2:	f7ff fa35 	bl	800af60 <quorem>
 800baf6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bafa:	f806 ab01 	strb.w	sl, [r6], #1
 800bafe:	1bf2      	subs	r2, r6, r7
 800bb00:	4593      	cmp	fp, r2
 800bb02:	ddb4      	ble.n	800ba6e <_dtoa_r+0x9fe>
 800bb04:	9901      	ldr	r1, [sp, #4]
 800bb06:	2300      	movs	r3, #0
 800bb08:	220a      	movs	r2, #10
 800bb0a:	4648      	mov	r0, r9
 800bb0c:	f000 f968 	bl	800bde0 <__multadd>
 800bb10:	9001      	str	r0, [sp, #4]
 800bb12:	e7ec      	b.n	800baee <_dtoa_r+0xa7e>
 800bb14:	0800e695 	.word	0x0800e695
 800bb18:	0800e619 	.word	0x0800e619

0800bb1c <_free_r>:
 800bb1c:	b538      	push	{r3, r4, r5, lr}
 800bb1e:	4605      	mov	r5, r0
 800bb20:	2900      	cmp	r1, #0
 800bb22:	d041      	beq.n	800bba8 <_free_r+0x8c>
 800bb24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb28:	1f0c      	subs	r4, r1, #4
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	bfb8      	it	lt
 800bb2e:	18e4      	addlt	r4, r4, r3
 800bb30:	f000 f8e8 	bl	800bd04 <__malloc_lock>
 800bb34:	4a1d      	ldr	r2, [pc, #116]	@ (800bbac <_free_r+0x90>)
 800bb36:	6813      	ldr	r3, [r2, #0]
 800bb38:	b933      	cbnz	r3, 800bb48 <_free_r+0x2c>
 800bb3a:	6063      	str	r3, [r4, #4]
 800bb3c:	6014      	str	r4, [r2, #0]
 800bb3e:	4628      	mov	r0, r5
 800bb40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb44:	f000 b8e4 	b.w	800bd10 <__malloc_unlock>
 800bb48:	42a3      	cmp	r3, r4
 800bb4a:	d908      	bls.n	800bb5e <_free_r+0x42>
 800bb4c:	6820      	ldr	r0, [r4, #0]
 800bb4e:	1821      	adds	r1, r4, r0
 800bb50:	428b      	cmp	r3, r1
 800bb52:	bf01      	itttt	eq
 800bb54:	6819      	ldreq	r1, [r3, #0]
 800bb56:	685b      	ldreq	r3, [r3, #4]
 800bb58:	1809      	addeq	r1, r1, r0
 800bb5a:	6021      	streq	r1, [r4, #0]
 800bb5c:	e7ed      	b.n	800bb3a <_free_r+0x1e>
 800bb5e:	461a      	mov	r2, r3
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	b10b      	cbz	r3, 800bb68 <_free_r+0x4c>
 800bb64:	42a3      	cmp	r3, r4
 800bb66:	d9fa      	bls.n	800bb5e <_free_r+0x42>
 800bb68:	6811      	ldr	r1, [r2, #0]
 800bb6a:	1850      	adds	r0, r2, r1
 800bb6c:	42a0      	cmp	r0, r4
 800bb6e:	d10b      	bne.n	800bb88 <_free_r+0x6c>
 800bb70:	6820      	ldr	r0, [r4, #0]
 800bb72:	4401      	add	r1, r0
 800bb74:	1850      	adds	r0, r2, r1
 800bb76:	4283      	cmp	r3, r0
 800bb78:	6011      	str	r1, [r2, #0]
 800bb7a:	d1e0      	bne.n	800bb3e <_free_r+0x22>
 800bb7c:	6818      	ldr	r0, [r3, #0]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	6053      	str	r3, [r2, #4]
 800bb82:	4408      	add	r0, r1
 800bb84:	6010      	str	r0, [r2, #0]
 800bb86:	e7da      	b.n	800bb3e <_free_r+0x22>
 800bb88:	d902      	bls.n	800bb90 <_free_r+0x74>
 800bb8a:	230c      	movs	r3, #12
 800bb8c:	602b      	str	r3, [r5, #0]
 800bb8e:	e7d6      	b.n	800bb3e <_free_r+0x22>
 800bb90:	6820      	ldr	r0, [r4, #0]
 800bb92:	1821      	adds	r1, r4, r0
 800bb94:	428b      	cmp	r3, r1
 800bb96:	bf04      	itt	eq
 800bb98:	6819      	ldreq	r1, [r3, #0]
 800bb9a:	685b      	ldreq	r3, [r3, #4]
 800bb9c:	6063      	str	r3, [r4, #4]
 800bb9e:	bf04      	itt	eq
 800bba0:	1809      	addeq	r1, r1, r0
 800bba2:	6021      	streq	r1, [r4, #0]
 800bba4:	6054      	str	r4, [r2, #4]
 800bba6:	e7ca      	b.n	800bb3e <_free_r+0x22>
 800bba8:	bd38      	pop	{r3, r4, r5, pc}
 800bbaa:	bf00      	nop
 800bbac:	20005dc8 	.word	0x20005dc8

0800bbb0 <malloc>:
 800bbb0:	4b02      	ldr	r3, [pc, #8]	@ (800bbbc <malloc+0xc>)
 800bbb2:	4601      	mov	r1, r0
 800bbb4:	6818      	ldr	r0, [r3, #0]
 800bbb6:	f000 b825 	b.w	800bc04 <_malloc_r>
 800bbba:	bf00      	nop
 800bbbc:	2000001c 	.word	0x2000001c

0800bbc0 <sbrk_aligned>:
 800bbc0:	b570      	push	{r4, r5, r6, lr}
 800bbc2:	4e0f      	ldr	r6, [pc, #60]	@ (800bc00 <sbrk_aligned+0x40>)
 800bbc4:	460c      	mov	r4, r1
 800bbc6:	6831      	ldr	r1, [r6, #0]
 800bbc8:	4605      	mov	r5, r0
 800bbca:	b911      	cbnz	r1, 800bbd2 <sbrk_aligned+0x12>
 800bbcc:	f001 fdb8 	bl	800d740 <_sbrk_r>
 800bbd0:	6030      	str	r0, [r6, #0]
 800bbd2:	4621      	mov	r1, r4
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	f001 fdb3 	bl	800d740 <_sbrk_r>
 800bbda:	1c43      	adds	r3, r0, #1
 800bbdc:	d103      	bne.n	800bbe6 <sbrk_aligned+0x26>
 800bbde:	f04f 34ff 	mov.w	r4, #4294967295
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	bd70      	pop	{r4, r5, r6, pc}
 800bbe6:	1cc4      	adds	r4, r0, #3
 800bbe8:	f024 0403 	bic.w	r4, r4, #3
 800bbec:	42a0      	cmp	r0, r4
 800bbee:	d0f8      	beq.n	800bbe2 <sbrk_aligned+0x22>
 800bbf0:	1a21      	subs	r1, r4, r0
 800bbf2:	4628      	mov	r0, r5
 800bbf4:	f001 fda4 	bl	800d740 <_sbrk_r>
 800bbf8:	3001      	adds	r0, #1
 800bbfa:	d1f2      	bne.n	800bbe2 <sbrk_aligned+0x22>
 800bbfc:	e7ef      	b.n	800bbde <sbrk_aligned+0x1e>
 800bbfe:	bf00      	nop
 800bc00:	20005dc4 	.word	0x20005dc4

0800bc04 <_malloc_r>:
 800bc04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc08:	1ccd      	adds	r5, r1, #3
 800bc0a:	f025 0503 	bic.w	r5, r5, #3
 800bc0e:	3508      	adds	r5, #8
 800bc10:	2d0c      	cmp	r5, #12
 800bc12:	bf38      	it	cc
 800bc14:	250c      	movcc	r5, #12
 800bc16:	2d00      	cmp	r5, #0
 800bc18:	4606      	mov	r6, r0
 800bc1a:	db01      	blt.n	800bc20 <_malloc_r+0x1c>
 800bc1c:	42a9      	cmp	r1, r5
 800bc1e:	d904      	bls.n	800bc2a <_malloc_r+0x26>
 800bc20:	230c      	movs	r3, #12
 800bc22:	6033      	str	r3, [r6, #0]
 800bc24:	2000      	movs	r0, #0
 800bc26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bd00 <_malloc_r+0xfc>
 800bc2e:	f000 f869 	bl	800bd04 <__malloc_lock>
 800bc32:	f8d8 3000 	ldr.w	r3, [r8]
 800bc36:	461c      	mov	r4, r3
 800bc38:	bb44      	cbnz	r4, 800bc8c <_malloc_r+0x88>
 800bc3a:	4629      	mov	r1, r5
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	f7ff ffbf 	bl	800bbc0 <sbrk_aligned>
 800bc42:	1c43      	adds	r3, r0, #1
 800bc44:	4604      	mov	r4, r0
 800bc46:	d158      	bne.n	800bcfa <_malloc_r+0xf6>
 800bc48:	f8d8 4000 	ldr.w	r4, [r8]
 800bc4c:	4627      	mov	r7, r4
 800bc4e:	2f00      	cmp	r7, #0
 800bc50:	d143      	bne.n	800bcda <_malloc_r+0xd6>
 800bc52:	2c00      	cmp	r4, #0
 800bc54:	d04b      	beq.n	800bcee <_malloc_r+0xea>
 800bc56:	6823      	ldr	r3, [r4, #0]
 800bc58:	4639      	mov	r1, r7
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	eb04 0903 	add.w	r9, r4, r3
 800bc60:	f001 fd6e 	bl	800d740 <_sbrk_r>
 800bc64:	4581      	cmp	r9, r0
 800bc66:	d142      	bne.n	800bcee <_malloc_r+0xea>
 800bc68:	6821      	ldr	r1, [r4, #0]
 800bc6a:	1a6d      	subs	r5, r5, r1
 800bc6c:	4629      	mov	r1, r5
 800bc6e:	4630      	mov	r0, r6
 800bc70:	f7ff ffa6 	bl	800bbc0 <sbrk_aligned>
 800bc74:	3001      	adds	r0, #1
 800bc76:	d03a      	beq.n	800bcee <_malloc_r+0xea>
 800bc78:	6823      	ldr	r3, [r4, #0]
 800bc7a:	442b      	add	r3, r5
 800bc7c:	6023      	str	r3, [r4, #0]
 800bc7e:	f8d8 3000 	ldr.w	r3, [r8]
 800bc82:	685a      	ldr	r2, [r3, #4]
 800bc84:	bb62      	cbnz	r2, 800bce0 <_malloc_r+0xdc>
 800bc86:	f8c8 7000 	str.w	r7, [r8]
 800bc8a:	e00f      	b.n	800bcac <_malloc_r+0xa8>
 800bc8c:	6822      	ldr	r2, [r4, #0]
 800bc8e:	1b52      	subs	r2, r2, r5
 800bc90:	d420      	bmi.n	800bcd4 <_malloc_r+0xd0>
 800bc92:	2a0b      	cmp	r2, #11
 800bc94:	d917      	bls.n	800bcc6 <_malloc_r+0xc2>
 800bc96:	1961      	adds	r1, r4, r5
 800bc98:	42a3      	cmp	r3, r4
 800bc9a:	6025      	str	r5, [r4, #0]
 800bc9c:	bf18      	it	ne
 800bc9e:	6059      	strne	r1, [r3, #4]
 800bca0:	6863      	ldr	r3, [r4, #4]
 800bca2:	bf08      	it	eq
 800bca4:	f8c8 1000 	streq.w	r1, [r8]
 800bca8:	5162      	str	r2, [r4, r5]
 800bcaa:	604b      	str	r3, [r1, #4]
 800bcac:	4630      	mov	r0, r6
 800bcae:	f000 f82f 	bl	800bd10 <__malloc_unlock>
 800bcb2:	f104 000b 	add.w	r0, r4, #11
 800bcb6:	1d23      	adds	r3, r4, #4
 800bcb8:	f020 0007 	bic.w	r0, r0, #7
 800bcbc:	1ac2      	subs	r2, r0, r3
 800bcbe:	bf1c      	itt	ne
 800bcc0:	1a1b      	subne	r3, r3, r0
 800bcc2:	50a3      	strne	r3, [r4, r2]
 800bcc4:	e7af      	b.n	800bc26 <_malloc_r+0x22>
 800bcc6:	6862      	ldr	r2, [r4, #4]
 800bcc8:	42a3      	cmp	r3, r4
 800bcca:	bf0c      	ite	eq
 800bccc:	f8c8 2000 	streq.w	r2, [r8]
 800bcd0:	605a      	strne	r2, [r3, #4]
 800bcd2:	e7eb      	b.n	800bcac <_malloc_r+0xa8>
 800bcd4:	4623      	mov	r3, r4
 800bcd6:	6864      	ldr	r4, [r4, #4]
 800bcd8:	e7ae      	b.n	800bc38 <_malloc_r+0x34>
 800bcda:	463c      	mov	r4, r7
 800bcdc:	687f      	ldr	r7, [r7, #4]
 800bcde:	e7b6      	b.n	800bc4e <_malloc_r+0x4a>
 800bce0:	461a      	mov	r2, r3
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	42a3      	cmp	r3, r4
 800bce6:	d1fb      	bne.n	800bce0 <_malloc_r+0xdc>
 800bce8:	2300      	movs	r3, #0
 800bcea:	6053      	str	r3, [r2, #4]
 800bcec:	e7de      	b.n	800bcac <_malloc_r+0xa8>
 800bcee:	230c      	movs	r3, #12
 800bcf0:	6033      	str	r3, [r6, #0]
 800bcf2:	4630      	mov	r0, r6
 800bcf4:	f000 f80c 	bl	800bd10 <__malloc_unlock>
 800bcf8:	e794      	b.n	800bc24 <_malloc_r+0x20>
 800bcfa:	6005      	str	r5, [r0, #0]
 800bcfc:	e7d6      	b.n	800bcac <_malloc_r+0xa8>
 800bcfe:	bf00      	nop
 800bd00:	20005dc8 	.word	0x20005dc8

0800bd04 <__malloc_lock>:
 800bd04:	4801      	ldr	r0, [pc, #4]	@ (800bd0c <__malloc_lock+0x8>)
 800bd06:	f7ff b914 	b.w	800af32 <__retarget_lock_acquire_recursive>
 800bd0a:	bf00      	nop
 800bd0c:	20005dc0 	.word	0x20005dc0

0800bd10 <__malloc_unlock>:
 800bd10:	4801      	ldr	r0, [pc, #4]	@ (800bd18 <__malloc_unlock+0x8>)
 800bd12:	f7ff b90f 	b.w	800af34 <__retarget_lock_release_recursive>
 800bd16:	bf00      	nop
 800bd18:	20005dc0 	.word	0x20005dc0

0800bd1c <_Balloc>:
 800bd1c:	b570      	push	{r4, r5, r6, lr}
 800bd1e:	69c6      	ldr	r6, [r0, #28]
 800bd20:	4604      	mov	r4, r0
 800bd22:	460d      	mov	r5, r1
 800bd24:	b976      	cbnz	r6, 800bd44 <_Balloc+0x28>
 800bd26:	2010      	movs	r0, #16
 800bd28:	f7ff ff42 	bl	800bbb0 <malloc>
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	61e0      	str	r0, [r4, #28]
 800bd30:	b920      	cbnz	r0, 800bd3c <_Balloc+0x20>
 800bd32:	4b18      	ldr	r3, [pc, #96]	@ (800bd94 <_Balloc+0x78>)
 800bd34:	4818      	ldr	r0, [pc, #96]	@ (800bd98 <_Balloc+0x7c>)
 800bd36:	216b      	movs	r1, #107	@ 0x6b
 800bd38:	f001 fd1a 	bl	800d770 <__assert_func>
 800bd3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd40:	6006      	str	r6, [r0, #0]
 800bd42:	60c6      	str	r6, [r0, #12]
 800bd44:	69e6      	ldr	r6, [r4, #28]
 800bd46:	68f3      	ldr	r3, [r6, #12]
 800bd48:	b183      	cbz	r3, 800bd6c <_Balloc+0x50>
 800bd4a:	69e3      	ldr	r3, [r4, #28]
 800bd4c:	68db      	ldr	r3, [r3, #12]
 800bd4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd52:	b9b8      	cbnz	r0, 800bd84 <_Balloc+0x68>
 800bd54:	2101      	movs	r1, #1
 800bd56:	fa01 f605 	lsl.w	r6, r1, r5
 800bd5a:	1d72      	adds	r2, r6, #5
 800bd5c:	0092      	lsls	r2, r2, #2
 800bd5e:	4620      	mov	r0, r4
 800bd60:	f001 fd24 	bl	800d7ac <_calloc_r>
 800bd64:	b160      	cbz	r0, 800bd80 <_Balloc+0x64>
 800bd66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd6a:	e00e      	b.n	800bd8a <_Balloc+0x6e>
 800bd6c:	2221      	movs	r2, #33	@ 0x21
 800bd6e:	2104      	movs	r1, #4
 800bd70:	4620      	mov	r0, r4
 800bd72:	f001 fd1b 	bl	800d7ac <_calloc_r>
 800bd76:	69e3      	ldr	r3, [r4, #28]
 800bd78:	60f0      	str	r0, [r6, #12]
 800bd7a:	68db      	ldr	r3, [r3, #12]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d1e4      	bne.n	800bd4a <_Balloc+0x2e>
 800bd80:	2000      	movs	r0, #0
 800bd82:	bd70      	pop	{r4, r5, r6, pc}
 800bd84:	6802      	ldr	r2, [r0, #0]
 800bd86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd90:	e7f7      	b.n	800bd82 <_Balloc+0x66>
 800bd92:	bf00      	nop
 800bd94:	0800e626 	.word	0x0800e626
 800bd98:	0800e6a6 	.word	0x0800e6a6

0800bd9c <_Bfree>:
 800bd9c:	b570      	push	{r4, r5, r6, lr}
 800bd9e:	69c6      	ldr	r6, [r0, #28]
 800bda0:	4605      	mov	r5, r0
 800bda2:	460c      	mov	r4, r1
 800bda4:	b976      	cbnz	r6, 800bdc4 <_Bfree+0x28>
 800bda6:	2010      	movs	r0, #16
 800bda8:	f7ff ff02 	bl	800bbb0 <malloc>
 800bdac:	4602      	mov	r2, r0
 800bdae:	61e8      	str	r0, [r5, #28]
 800bdb0:	b920      	cbnz	r0, 800bdbc <_Bfree+0x20>
 800bdb2:	4b09      	ldr	r3, [pc, #36]	@ (800bdd8 <_Bfree+0x3c>)
 800bdb4:	4809      	ldr	r0, [pc, #36]	@ (800bddc <_Bfree+0x40>)
 800bdb6:	218f      	movs	r1, #143	@ 0x8f
 800bdb8:	f001 fcda 	bl	800d770 <__assert_func>
 800bdbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bdc0:	6006      	str	r6, [r0, #0]
 800bdc2:	60c6      	str	r6, [r0, #12]
 800bdc4:	b13c      	cbz	r4, 800bdd6 <_Bfree+0x3a>
 800bdc6:	69eb      	ldr	r3, [r5, #28]
 800bdc8:	6862      	ldr	r2, [r4, #4]
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bdd0:	6021      	str	r1, [r4, #0]
 800bdd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bdd6:	bd70      	pop	{r4, r5, r6, pc}
 800bdd8:	0800e626 	.word	0x0800e626
 800bddc:	0800e6a6 	.word	0x0800e6a6

0800bde0 <__multadd>:
 800bde0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bde4:	690d      	ldr	r5, [r1, #16]
 800bde6:	4607      	mov	r7, r0
 800bde8:	460c      	mov	r4, r1
 800bdea:	461e      	mov	r6, r3
 800bdec:	f101 0c14 	add.w	ip, r1, #20
 800bdf0:	2000      	movs	r0, #0
 800bdf2:	f8dc 3000 	ldr.w	r3, [ip]
 800bdf6:	b299      	uxth	r1, r3
 800bdf8:	fb02 6101 	mla	r1, r2, r1, r6
 800bdfc:	0c1e      	lsrs	r6, r3, #16
 800bdfe:	0c0b      	lsrs	r3, r1, #16
 800be00:	fb02 3306 	mla	r3, r2, r6, r3
 800be04:	b289      	uxth	r1, r1
 800be06:	3001      	adds	r0, #1
 800be08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800be0c:	4285      	cmp	r5, r0
 800be0e:	f84c 1b04 	str.w	r1, [ip], #4
 800be12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800be16:	dcec      	bgt.n	800bdf2 <__multadd+0x12>
 800be18:	b30e      	cbz	r6, 800be5e <__multadd+0x7e>
 800be1a:	68a3      	ldr	r3, [r4, #8]
 800be1c:	42ab      	cmp	r3, r5
 800be1e:	dc19      	bgt.n	800be54 <__multadd+0x74>
 800be20:	6861      	ldr	r1, [r4, #4]
 800be22:	4638      	mov	r0, r7
 800be24:	3101      	adds	r1, #1
 800be26:	f7ff ff79 	bl	800bd1c <_Balloc>
 800be2a:	4680      	mov	r8, r0
 800be2c:	b928      	cbnz	r0, 800be3a <__multadd+0x5a>
 800be2e:	4602      	mov	r2, r0
 800be30:	4b0c      	ldr	r3, [pc, #48]	@ (800be64 <__multadd+0x84>)
 800be32:	480d      	ldr	r0, [pc, #52]	@ (800be68 <__multadd+0x88>)
 800be34:	21ba      	movs	r1, #186	@ 0xba
 800be36:	f001 fc9b 	bl	800d770 <__assert_func>
 800be3a:	6922      	ldr	r2, [r4, #16]
 800be3c:	3202      	adds	r2, #2
 800be3e:	f104 010c 	add.w	r1, r4, #12
 800be42:	0092      	lsls	r2, r2, #2
 800be44:	300c      	adds	r0, #12
 800be46:	f7ff f876 	bl	800af36 <memcpy>
 800be4a:	4621      	mov	r1, r4
 800be4c:	4638      	mov	r0, r7
 800be4e:	f7ff ffa5 	bl	800bd9c <_Bfree>
 800be52:	4644      	mov	r4, r8
 800be54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be58:	3501      	adds	r5, #1
 800be5a:	615e      	str	r6, [r3, #20]
 800be5c:	6125      	str	r5, [r4, #16]
 800be5e:	4620      	mov	r0, r4
 800be60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be64:	0800e695 	.word	0x0800e695
 800be68:	0800e6a6 	.word	0x0800e6a6

0800be6c <__s2b>:
 800be6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be70:	460c      	mov	r4, r1
 800be72:	4615      	mov	r5, r2
 800be74:	461f      	mov	r7, r3
 800be76:	2209      	movs	r2, #9
 800be78:	3308      	adds	r3, #8
 800be7a:	4606      	mov	r6, r0
 800be7c:	fb93 f3f2 	sdiv	r3, r3, r2
 800be80:	2100      	movs	r1, #0
 800be82:	2201      	movs	r2, #1
 800be84:	429a      	cmp	r2, r3
 800be86:	db09      	blt.n	800be9c <__s2b+0x30>
 800be88:	4630      	mov	r0, r6
 800be8a:	f7ff ff47 	bl	800bd1c <_Balloc>
 800be8e:	b940      	cbnz	r0, 800bea2 <__s2b+0x36>
 800be90:	4602      	mov	r2, r0
 800be92:	4b19      	ldr	r3, [pc, #100]	@ (800bef8 <__s2b+0x8c>)
 800be94:	4819      	ldr	r0, [pc, #100]	@ (800befc <__s2b+0x90>)
 800be96:	21d3      	movs	r1, #211	@ 0xd3
 800be98:	f001 fc6a 	bl	800d770 <__assert_func>
 800be9c:	0052      	lsls	r2, r2, #1
 800be9e:	3101      	adds	r1, #1
 800bea0:	e7f0      	b.n	800be84 <__s2b+0x18>
 800bea2:	9b08      	ldr	r3, [sp, #32]
 800bea4:	6143      	str	r3, [r0, #20]
 800bea6:	2d09      	cmp	r5, #9
 800bea8:	f04f 0301 	mov.w	r3, #1
 800beac:	6103      	str	r3, [r0, #16]
 800beae:	dd16      	ble.n	800bede <__s2b+0x72>
 800beb0:	f104 0909 	add.w	r9, r4, #9
 800beb4:	46c8      	mov	r8, r9
 800beb6:	442c      	add	r4, r5
 800beb8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bebc:	4601      	mov	r1, r0
 800bebe:	3b30      	subs	r3, #48	@ 0x30
 800bec0:	220a      	movs	r2, #10
 800bec2:	4630      	mov	r0, r6
 800bec4:	f7ff ff8c 	bl	800bde0 <__multadd>
 800bec8:	45a0      	cmp	r8, r4
 800beca:	d1f5      	bne.n	800beb8 <__s2b+0x4c>
 800becc:	f1a5 0408 	sub.w	r4, r5, #8
 800bed0:	444c      	add	r4, r9
 800bed2:	1b2d      	subs	r5, r5, r4
 800bed4:	1963      	adds	r3, r4, r5
 800bed6:	42bb      	cmp	r3, r7
 800bed8:	db04      	blt.n	800bee4 <__s2b+0x78>
 800beda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bede:	340a      	adds	r4, #10
 800bee0:	2509      	movs	r5, #9
 800bee2:	e7f6      	b.n	800bed2 <__s2b+0x66>
 800bee4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bee8:	4601      	mov	r1, r0
 800beea:	3b30      	subs	r3, #48	@ 0x30
 800beec:	220a      	movs	r2, #10
 800beee:	4630      	mov	r0, r6
 800bef0:	f7ff ff76 	bl	800bde0 <__multadd>
 800bef4:	e7ee      	b.n	800bed4 <__s2b+0x68>
 800bef6:	bf00      	nop
 800bef8:	0800e695 	.word	0x0800e695
 800befc:	0800e6a6 	.word	0x0800e6a6

0800bf00 <__hi0bits>:
 800bf00:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bf04:	4603      	mov	r3, r0
 800bf06:	bf36      	itet	cc
 800bf08:	0403      	lslcc	r3, r0, #16
 800bf0a:	2000      	movcs	r0, #0
 800bf0c:	2010      	movcc	r0, #16
 800bf0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bf12:	bf3c      	itt	cc
 800bf14:	021b      	lslcc	r3, r3, #8
 800bf16:	3008      	addcc	r0, #8
 800bf18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf1c:	bf3c      	itt	cc
 800bf1e:	011b      	lslcc	r3, r3, #4
 800bf20:	3004      	addcc	r0, #4
 800bf22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf26:	bf3c      	itt	cc
 800bf28:	009b      	lslcc	r3, r3, #2
 800bf2a:	3002      	addcc	r0, #2
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	db05      	blt.n	800bf3c <__hi0bits+0x3c>
 800bf30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bf34:	f100 0001 	add.w	r0, r0, #1
 800bf38:	bf08      	it	eq
 800bf3a:	2020      	moveq	r0, #32
 800bf3c:	4770      	bx	lr

0800bf3e <__lo0bits>:
 800bf3e:	6803      	ldr	r3, [r0, #0]
 800bf40:	4602      	mov	r2, r0
 800bf42:	f013 0007 	ands.w	r0, r3, #7
 800bf46:	d00b      	beq.n	800bf60 <__lo0bits+0x22>
 800bf48:	07d9      	lsls	r1, r3, #31
 800bf4a:	d421      	bmi.n	800bf90 <__lo0bits+0x52>
 800bf4c:	0798      	lsls	r0, r3, #30
 800bf4e:	bf49      	itett	mi
 800bf50:	085b      	lsrmi	r3, r3, #1
 800bf52:	089b      	lsrpl	r3, r3, #2
 800bf54:	2001      	movmi	r0, #1
 800bf56:	6013      	strmi	r3, [r2, #0]
 800bf58:	bf5c      	itt	pl
 800bf5a:	6013      	strpl	r3, [r2, #0]
 800bf5c:	2002      	movpl	r0, #2
 800bf5e:	4770      	bx	lr
 800bf60:	b299      	uxth	r1, r3
 800bf62:	b909      	cbnz	r1, 800bf68 <__lo0bits+0x2a>
 800bf64:	0c1b      	lsrs	r3, r3, #16
 800bf66:	2010      	movs	r0, #16
 800bf68:	b2d9      	uxtb	r1, r3
 800bf6a:	b909      	cbnz	r1, 800bf70 <__lo0bits+0x32>
 800bf6c:	3008      	adds	r0, #8
 800bf6e:	0a1b      	lsrs	r3, r3, #8
 800bf70:	0719      	lsls	r1, r3, #28
 800bf72:	bf04      	itt	eq
 800bf74:	091b      	lsreq	r3, r3, #4
 800bf76:	3004      	addeq	r0, #4
 800bf78:	0799      	lsls	r1, r3, #30
 800bf7a:	bf04      	itt	eq
 800bf7c:	089b      	lsreq	r3, r3, #2
 800bf7e:	3002      	addeq	r0, #2
 800bf80:	07d9      	lsls	r1, r3, #31
 800bf82:	d403      	bmi.n	800bf8c <__lo0bits+0x4e>
 800bf84:	085b      	lsrs	r3, r3, #1
 800bf86:	f100 0001 	add.w	r0, r0, #1
 800bf8a:	d003      	beq.n	800bf94 <__lo0bits+0x56>
 800bf8c:	6013      	str	r3, [r2, #0]
 800bf8e:	4770      	bx	lr
 800bf90:	2000      	movs	r0, #0
 800bf92:	4770      	bx	lr
 800bf94:	2020      	movs	r0, #32
 800bf96:	4770      	bx	lr

0800bf98 <__i2b>:
 800bf98:	b510      	push	{r4, lr}
 800bf9a:	460c      	mov	r4, r1
 800bf9c:	2101      	movs	r1, #1
 800bf9e:	f7ff febd 	bl	800bd1c <_Balloc>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	b928      	cbnz	r0, 800bfb2 <__i2b+0x1a>
 800bfa6:	4b05      	ldr	r3, [pc, #20]	@ (800bfbc <__i2b+0x24>)
 800bfa8:	4805      	ldr	r0, [pc, #20]	@ (800bfc0 <__i2b+0x28>)
 800bfaa:	f240 1145 	movw	r1, #325	@ 0x145
 800bfae:	f001 fbdf 	bl	800d770 <__assert_func>
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	6144      	str	r4, [r0, #20]
 800bfb6:	6103      	str	r3, [r0, #16]
 800bfb8:	bd10      	pop	{r4, pc}
 800bfba:	bf00      	nop
 800bfbc:	0800e695 	.word	0x0800e695
 800bfc0:	0800e6a6 	.word	0x0800e6a6

0800bfc4 <__multiply>:
 800bfc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc8:	4614      	mov	r4, r2
 800bfca:	690a      	ldr	r2, [r1, #16]
 800bfcc:	6923      	ldr	r3, [r4, #16]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	bfa8      	it	ge
 800bfd2:	4623      	movge	r3, r4
 800bfd4:	460f      	mov	r7, r1
 800bfd6:	bfa4      	itt	ge
 800bfd8:	460c      	movge	r4, r1
 800bfda:	461f      	movge	r7, r3
 800bfdc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bfe0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bfe4:	68a3      	ldr	r3, [r4, #8]
 800bfe6:	6861      	ldr	r1, [r4, #4]
 800bfe8:	eb0a 0609 	add.w	r6, sl, r9
 800bfec:	42b3      	cmp	r3, r6
 800bfee:	b085      	sub	sp, #20
 800bff0:	bfb8      	it	lt
 800bff2:	3101      	addlt	r1, #1
 800bff4:	f7ff fe92 	bl	800bd1c <_Balloc>
 800bff8:	b930      	cbnz	r0, 800c008 <__multiply+0x44>
 800bffa:	4602      	mov	r2, r0
 800bffc:	4b44      	ldr	r3, [pc, #272]	@ (800c110 <__multiply+0x14c>)
 800bffe:	4845      	ldr	r0, [pc, #276]	@ (800c114 <__multiply+0x150>)
 800c000:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c004:	f001 fbb4 	bl	800d770 <__assert_func>
 800c008:	f100 0514 	add.w	r5, r0, #20
 800c00c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c010:	462b      	mov	r3, r5
 800c012:	2200      	movs	r2, #0
 800c014:	4543      	cmp	r3, r8
 800c016:	d321      	bcc.n	800c05c <__multiply+0x98>
 800c018:	f107 0114 	add.w	r1, r7, #20
 800c01c:	f104 0214 	add.w	r2, r4, #20
 800c020:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c024:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c028:	9302      	str	r3, [sp, #8]
 800c02a:	1b13      	subs	r3, r2, r4
 800c02c:	3b15      	subs	r3, #21
 800c02e:	f023 0303 	bic.w	r3, r3, #3
 800c032:	3304      	adds	r3, #4
 800c034:	f104 0715 	add.w	r7, r4, #21
 800c038:	42ba      	cmp	r2, r7
 800c03a:	bf38      	it	cc
 800c03c:	2304      	movcc	r3, #4
 800c03e:	9301      	str	r3, [sp, #4]
 800c040:	9b02      	ldr	r3, [sp, #8]
 800c042:	9103      	str	r1, [sp, #12]
 800c044:	428b      	cmp	r3, r1
 800c046:	d80c      	bhi.n	800c062 <__multiply+0x9e>
 800c048:	2e00      	cmp	r6, #0
 800c04a:	dd03      	ble.n	800c054 <__multiply+0x90>
 800c04c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c050:	2b00      	cmp	r3, #0
 800c052:	d05b      	beq.n	800c10c <__multiply+0x148>
 800c054:	6106      	str	r6, [r0, #16]
 800c056:	b005      	add	sp, #20
 800c058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c05c:	f843 2b04 	str.w	r2, [r3], #4
 800c060:	e7d8      	b.n	800c014 <__multiply+0x50>
 800c062:	f8b1 a000 	ldrh.w	sl, [r1]
 800c066:	f1ba 0f00 	cmp.w	sl, #0
 800c06a:	d024      	beq.n	800c0b6 <__multiply+0xf2>
 800c06c:	f104 0e14 	add.w	lr, r4, #20
 800c070:	46a9      	mov	r9, r5
 800c072:	f04f 0c00 	mov.w	ip, #0
 800c076:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c07a:	f8d9 3000 	ldr.w	r3, [r9]
 800c07e:	fa1f fb87 	uxth.w	fp, r7
 800c082:	b29b      	uxth	r3, r3
 800c084:	fb0a 330b 	mla	r3, sl, fp, r3
 800c088:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c08c:	f8d9 7000 	ldr.w	r7, [r9]
 800c090:	4463      	add	r3, ip
 800c092:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c096:	fb0a c70b 	mla	r7, sl, fp, ip
 800c09a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c09e:	b29b      	uxth	r3, r3
 800c0a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c0a4:	4572      	cmp	r2, lr
 800c0a6:	f849 3b04 	str.w	r3, [r9], #4
 800c0aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c0ae:	d8e2      	bhi.n	800c076 <__multiply+0xb2>
 800c0b0:	9b01      	ldr	r3, [sp, #4]
 800c0b2:	f845 c003 	str.w	ip, [r5, r3]
 800c0b6:	9b03      	ldr	r3, [sp, #12]
 800c0b8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c0bc:	3104      	adds	r1, #4
 800c0be:	f1b9 0f00 	cmp.w	r9, #0
 800c0c2:	d021      	beq.n	800c108 <__multiply+0x144>
 800c0c4:	682b      	ldr	r3, [r5, #0]
 800c0c6:	f104 0c14 	add.w	ip, r4, #20
 800c0ca:	46ae      	mov	lr, r5
 800c0cc:	f04f 0a00 	mov.w	sl, #0
 800c0d0:	f8bc b000 	ldrh.w	fp, [ip]
 800c0d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c0d8:	fb09 770b 	mla	r7, r9, fp, r7
 800c0dc:	4457      	add	r7, sl
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c0e4:	f84e 3b04 	str.w	r3, [lr], #4
 800c0e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c0ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c0f0:	f8be 3000 	ldrh.w	r3, [lr]
 800c0f4:	fb09 330a 	mla	r3, r9, sl, r3
 800c0f8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c0fc:	4562      	cmp	r2, ip
 800c0fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c102:	d8e5      	bhi.n	800c0d0 <__multiply+0x10c>
 800c104:	9f01      	ldr	r7, [sp, #4]
 800c106:	51eb      	str	r3, [r5, r7]
 800c108:	3504      	adds	r5, #4
 800c10a:	e799      	b.n	800c040 <__multiply+0x7c>
 800c10c:	3e01      	subs	r6, #1
 800c10e:	e79b      	b.n	800c048 <__multiply+0x84>
 800c110:	0800e695 	.word	0x0800e695
 800c114:	0800e6a6 	.word	0x0800e6a6

0800c118 <__pow5mult>:
 800c118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c11c:	4615      	mov	r5, r2
 800c11e:	f012 0203 	ands.w	r2, r2, #3
 800c122:	4607      	mov	r7, r0
 800c124:	460e      	mov	r6, r1
 800c126:	d007      	beq.n	800c138 <__pow5mult+0x20>
 800c128:	4c25      	ldr	r4, [pc, #148]	@ (800c1c0 <__pow5mult+0xa8>)
 800c12a:	3a01      	subs	r2, #1
 800c12c:	2300      	movs	r3, #0
 800c12e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c132:	f7ff fe55 	bl	800bde0 <__multadd>
 800c136:	4606      	mov	r6, r0
 800c138:	10ad      	asrs	r5, r5, #2
 800c13a:	d03d      	beq.n	800c1b8 <__pow5mult+0xa0>
 800c13c:	69fc      	ldr	r4, [r7, #28]
 800c13e:	b97c      	cbnz	r4, 800c160 <__pow5mult+0x48>
 800c140:	2010      	movs	r0, #16
 800c142:	f7ff fd35 	bl	800bbb0 <malloc>
 800c146:	4602      	mov	r2, r0
 800c148:	61f8      	str	r0, [r7, #28]
 800c14a:	b928      	cbnz	r0, 800c158 <__pow5mult+0x40>
 800c14c:	4b1d      	ldr	r3, [pc, #116]	@ (800c1c4 <__pow5mult+0xac>)
 800c14e:	481e      	ldr	r0, [pc, #120]	@ (800c1c8 <__pow5mult+0xb0>)
 800c150:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c154:	f001 fb0c 	bl	800d770 <__assert_func>
 800c158:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c15c:	6004      	str	r4, [r0, #0]
 800c15e:	60c4      	str	r4, [r0, #12]
 800c160:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c164:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c168:	b94c      	cbnz	r4, 800c17e <__pow5mult+0x66>
 800c16a:	f240 2171 	movw	r1, #625	@ 0x271
 800c16e:	4638      	mov	r0, r7
 800c170:	f7ff ff12 	bl	800bf98 <__i2b>
 800c174:	2300      	movs	r3, #0
 800c176:	f8c8 0008 	str.w	r0, [r8, #8]
 800c17a:	4604      	mov	r4, r0
 800c17c:	6003      	str	r3, [r0, #0]
 800c17e:	f04f 0900 	mov.w	r9, #0
 800c182:	07eb      	lsls	r3, r5, #31
 800c184:	d50a      	bpl.n	800c19c <__pow5mult+0x84>
 800c186:	4631      	mov	r1, r6
 800c188:	4622      	mov	r2, r4
 800c18a:	4638      	mov	r0, r7
 800c18c:	f7ff ff1a 	bl	800bfc4 <__multiply>
 800c190:	4631      	mov	r1, r6
 800c192:	4680      	mov	r8, r0
 800c194:	4638      	mov	r0, r7
 800c196:	f7ff fe01 	bl	800bd9c <_Bfree>
 800c19a:	4646      	mov	r6, r8
 800c19c:	106d      	asrs	r5, r5, #1
 800c19e:	d00b      	beq.n	800c1b8 <__pow5mult+0xa0>
 800c1a0:	6820      	ldr	r0, [r4, #0]
 800c1a2:	b938      	cbnz	r0, 800c1b4 <__pow5mult+0x9c>
 800c1a4:	4622      	mov	r2, r4
 800c1a6:	4621      	mov	r1, r4
 800c1a8:	4638      	mov	r0, r7
 800c1aa:	f7ff ff0b 	bl	800bfc4 <__multiply>
 800c1ae:	6020      	str	r0, [r4, #0]
 800c1b0:	f8c0 9000 	str.w	r9, [r0]
 800c1b4:	4604      	mov	r4, r0
 800c1b6:	e7e4      	b.n	800c182 <__pow5mult+0x6a>
 800c1b8:	4630      	mov	r0, r6
 800c1ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1be:	bf00      	nop
 800c1c0:	0800e700 	.word	0x0800e700
 800c1c4:	0800e626 	.word	0x0800e626
 800c1c8:	0800e6a6 	.word	0x0800e6a6

0800c1cc <__lshift>:
 800c1cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1d0:	460c      	mov	r4, r1
 800c1d2:	6849      	ldr	r1, [r1, #4]
 800c1d4:	6923      	ldr	r3, [r4, #16]
 800c1d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c1da:	68a3      	ldr	r3, [r4, #8]
 800c1dc:	4607      	mov	r7, r0
 800c1de:	4691      	mov	r9, r2
 800c1e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c1e4:	f108 0601 	add.w	r6, r8, #1
 800c1e8:	42b3      	cmp	r3, r6
 800c1ea:	db0b      	blt.n	800c204 <__lshift+0x38>
 800c1ec:	4638      	mov	r0, r7
 800c1ee:	f7ff fd95 	bl	800bd1c <_Balloc>
 800c1f2:	4605      	mov	r5, r0
 800c1f4:	b948      	cbnz	r0, 800c20a <__lshift+0x3e>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	4b28      	ldr	r3, [pc, #160]	@ (800c29c <__lshift+0xd0>)
 800c1fa:	4829      	ldr	r0, [pc, #164]	@ (800c2a0 <__lshift+0xd4>)
 800c1fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c200:	f001 fab6 	bl	800d770 <__assert_func>
 800c204:	3101      	adds	r1, #1
 800c206:	005b      	lsls	r3, r3, #1
 800c208:	e7ee      	b.n	800c1e8 <__lshift+0x1c>
 800c20a:	2300      	movs	r3, #0
 800c20c:	f100 0114 	add.w	r1, r0, #20
 800c210:	f100 0210 	add.w	r2, r0, #16
 800c214:	4618      	mov	r0, r3
 800c216:	4553      	cmp	r3, sl
 800c218:	db33      	blt.n	800c282 <__lshift+0xb6>
 800c21a:	6920      	ldr	r0, [r4, #16]
 800c21c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c220:	f104 0314 	add.w	r3, r4, #20
 800c224:	f019 091f 	ands.w	r9, r9, #31
 800c228:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c22c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c230:	d02b      	beq.n	800c28a <__lshift+0xbe>
 800c232:	f1c9 0e20 	rsb	lr, r9, #32
 800c236:	468a      	mov	sl, r1
 800c238:	2200      	movs	r2, #0
 800c23a:	6818      	ldr	r0, [r3, #0]
 800c23c:	fa00 f009 	lsl.w	r0, r0, r9
 800c240:	4310      	orrs	r0, r2
 800c242:	f84a 0b04 	str.w	r0, [sl], #4
 800c246:	f853 2b04 	ldr.w	r2, [r3], #4
 800c24a:	459c      	cmp	ip, r3
 800c24c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c250:	d8f3      	bhi.n	800c23a <__lshift+0x6e>
 800c252:	ebac 0304 	sub.w	r3, ip, r4
 800c256:	3b15      	subs	r3, #21
 800c258:	f023 0303 	bic.w	r3, r3, #3
 800c25c:	3304      	adds	r3, #4
 800c25e:	f104 0015 	add.w	r0, r4, #21
 800c262:	4584      	cmp	ip, r0
 800c264:	bf38      	it	cc
 800c266:	2304      	movcc	r3, #4
 800c268:	50ca      	str	r2, [r1, r3]
 800c26a:	b10a      	cbz	r2, 800c270 <__lshift+0xa4>
 800c26c:	f108 0602 	add.w	r6, r8, #2
 800c270:	3e01      	subs	r6, #1
 800c272:	4638      	mov	r0, r7
 800c274:	612e      	str	r6, [r5, #16]
 800c276:	4621      	mov	r1, r4
 800c278:	f7ff fd90 	bl	800bd9c <_Bfree>
 800c27c:	4628      	mov	r0, r5
 800c27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c282:	f842 0f04 	str.w	r0, [r2, #4]!
 800c286:	3301      	adds	r3, #1
 800c288:	e7c5      	b.n	800c216 <__lshift+0x4a>
 800c28a:	3904      	subs	r1, #4
 800c28c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c290:	f841 2f04 	str.w	r2, [r1, #4]!
 800c294:	459c      	cmp	ip, r3
 800c296:	d8f9      	bhi.n	800c28c <__lshift+0xc0>
 800c298:	e7ea      	b.n	800c270 <__lshift+0xa4>
 800c29a:	bf00      	nop
 800c29c:	0800e695 	.word	0x0800e695
 800c2a0:	0800e6a6 	.word	0x0800e6a6

0800c2a4 <__mcmp>:
 800c2a4:	690a      	ldr	r2, [r1, #16]
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	6900      	ldr	r0, [r0, #16]
 800c2aa:	1a80      	subs	r0, r0, r2
 800c2ac:	b530      	push	{r4, r5, lr}
 800c2ae:	d10e      	bne.n	800c2ce <__mcmp+0x2a>
 800c2b0:	3314      	adds	r3, #20
 800c2b2:	3114      	adds	r1, #20
 800c2b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c2b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c2bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c2c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c2c4:	4295      	cmp	r5, r2
 800c2c6:	d003      	beq.n	800c2d0 <__mcmp+0x2c>
 800c2c8:	d205      	bcs.n	800c2d6 <__mcmp+0x32>
 800c2ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c2ce:	bd30      	pop	{r4, r5, pc}
 800c2d0:	42a3      	cmp	r3, r4
 800c2d2:	d3f3      	bcc.n	800c2bc <__mcmp+0x18>
 800c2d4:	e7fb      	b.n	800c2ce <__mcmp+0x2a>
 800c2d6:	2001      	movs	r0, #1
 800c2d8:	e7f9      	b.n	800c2ce <__mcmp+0x2a>
	...

0800c2dc <__mdiff>:
 800c2dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2e0:	4689      	mov	r9, r1
 800c2e2:	4606      	mov	r6, r0
 800c2e4:	4611      	mov	r1, r2
 800c2e6:	4648      	mov	r0, r9
 800c2e8:	4614      	mov	r4, r2
 800c2ea:	f7ff ffdb 	bl	800c2a4 <__mcmp>
 800c2ee:	1e05      	subs	r5, r0, #0
 800c2f0:	d112      	bne.n	800c318 <__mdiff+0x3c>
 800c2f2:	4629      	mov	r1, r5
 800c2f4:	4630      	mov	r0, r6
 800c2f6:	f7ff fd11 	bl	800bd1c <_Balloc>
 800c2fa:	4602      	mov	r2, r0
 800c2fc:	b928      	cbnz	r0, 800c30a <__mdiff+0x2e>
 800c2fe:	4b3f      	ldr	r3, [pc, #252]	@ (800c3fc <__mdiff+0x120>)
 800c300:	f240 2137 	movw	r1, #567	@ 0x237
 800c304:	483e      	ldr	r0, [pc, #248]	@ (800c400 <__mdiff+0x124>)
 800c306:	f001 fa33 	bl	800d770 <__assert_func>
 800c30a:	2301      	movs	r3, #1
 800c30c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c310:	4610      	mov	r0, r2
 800c312:	b003      	add	sp, #12
 800c314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c318:	bfbc      	itt	lt
 800c31a:	464b      	movlt	r3, r9
 800c31c:	46a1      	movlt	r9, r4
 800c31e:	4630      	mov	r0, r6
 800c320:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c324:	bfba      	itte	lt
 800c326:	461c      	movlt	r4, r3
 800c328:	2501      	movlt	r5, #1
 800c32a:	2500      	movge	r5, #0
 800c32c:	f7ff fcf6 	bl	800bd1c <_Balloc>
 800c330:	4602      	mov	r2, r0
 800c332:	b918      	cbnz	r0, 800c33c <__mdiff+0x60>
 800c334:	4b31      	ldr	r3, [pc, #196]	@ (800c3fc <__mdiff+0x120>)
 800c336:	f240 2145 	movw	r1, #581	@ 0x245
 800c33a:	e7e3      	b.n	800c304 <__mdiff+0x28>
 800c33c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c340:	6926      	ldr	r6, [r4, #16]
 800c342:	60c5      	str	r5, [r0, #12]
 800c344:	f109 0310 	add.w	r3, r9, #16
 800c348:	f109 0514 	add.w	r5, r9, #20
 800c34c:	f104 0e14 	add.w	lr, r4, #20
 800c350:	f100 0b14 	add.w	fp, r0, #20
 800c354:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c358:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c35c:	9301      	str	r3, [sp, #4]
 800c35e:	46d9      	mov	r9, fp
 800c360:	f04f 0c00 	mov.w	ip, #0
 800c364:	9b01      	ldr	r3, [sp, #4]
 800c366:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c36a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c36e:	9301      	str	r3, [sp, #4]
 800c370:	fa1f f38a 	uxth.w	r3, sl
 800c374:	4619      	mov	r1, r3
 800c376:	b283      	uxth	r3, r0
 800c378:	1acb      	subs	r3, r1, r3
 800c37a:	0c00      	lsrs	r0, r0, #16
 800c37c:	4463      	add	r3, ip
 800c37e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c382:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c386:	b29b      	uxth	r3, r3
 800c388:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c38c:	4576      	cmp	r6, lr
 800c38e:	f849 3b04 	str.w	r3, [r9], #4
 800c392:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c396:	d8e5      	bhi.n	800c364 <__mdiff+0x88>
 800c398:	1b33      	subs	r3, r6, r4
 800c39a:	3b15      	subs	r3, #21
 800c39c:	f023 0303 	bic.w	r3, r3, #3
 800c3a0:	3415      	adds	r4, #21
 800c3a2:	3304      	adds	r3, #4
 800c3a4:	42a6      	cmp	r6, r4
 800c3a6:	bf38      	it	cc
 800c3a8:	2304      	movcc	r3, #4
 800c3aa:	441d      	add	r5, r3
 800c3ac:	445b      	add	r3, fp
 800c3ae:	461e      	mov	r6, r3
 800c3b0:	462c      	mov	r4, r5
 800c3b2:	4544      	cmp	r4, r8
 800c3b4:	d30e      	bcc.n	800c3d4 <__mdiff+0xf8>
 800c3b6:	f108 0103 	add.w	r1, r8, #3
 800c3ba:	1b49      	subs	r1, r1, r5
 800c3bc:	f021 0103 	bic.w	r1, r1, #3
 800c3c0:	3d03      	subs	r5, #3
 800c3c2:	45a8      	cmp	r8, r5
 800c3c4:	bf38      	it	cc
 800c3c6:	2100      	movcc	r1, #0
 800c3c8:	440b      	add	r3, r1
 800c3ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c3ce:	b191      	cbz	r1, 800c3f6 <__mdiff+0x11a>
 800c3d0:	6117      	str	r7, [r2, #16]
 800c3d2:	e79d      	b.n	800c310 <__mdiff+0x34>
 800c3d4:	f854 1b04 	ldr.w	r1, [r4], #4
 800c3d8:	46e6      	mov	lr, ip
 800c3da:	0c08      	lsrs	r0, r1, #16
 800c3dc:	fa1c fc81 	uxtah	ip, ip, r1
 800c3e0:	4471      	add	r1, lr
 800c3e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c3e6:	b289      	uxth	r1, r1
 800c3e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c3ec:	f846 1b04 	str.w	r1, [r6], #4
 800c3f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c3f4:	e7dd      	b.n	800c3b2 <__mdiff+0xd6>
 800c3f6:	3f01      	subs	r7, #1
 800c3f8:	e7e7      	b.n	800c3ca <__mdiff+0xee>
 800c3fa:	bf00      	nop
 800c3fc:	0800e695 	.word	0x0800e695
 800c400:	0800e6a6 	.word	0x0800e6a6

0800c404 <__ulp>:
 800c404:	b082      	sub	sp, #8
 800c406:	ed8d 0b00 	vstr	d0, [sp]
 800c40a:	9a01      	ldr	r2, [sp, #4]
 800c40c:	4b0f      	ldr	r3, [pc, #60]	@ (800c44c <__ulp+0x48>)
 800c40e:	4013      	ands	r3, r2
 800c410:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c414:	2b00      	cmp	r3, #0
 800c416:	dc08      	bgt.n	800c42a <__ulp+0x26>
 800c418:	425b      	negs	r3, r3
 800c41a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c41e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c422:	da04      	bge.n	800c42e <__ulp+0x2a>
 800c424:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c428:	4113      	asrs	r3, r2
 800c42a:	2200      	movs	r2, #0
 800c42c:	e008      	b.n	800c440 <__ulp+0x3c>
 800c42e:	f1a2 0314 	sub.w	r3, r2, #20
 800c432:	2b1e      	cmp	r3, #30
 800c434:	bfda      	itte	le
 800c436:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c43a:	40da      	lsrle	r2, r3
 800c43c:	2201      	movgt	r2, #1
 800c43e:	2300      	movs	r3, #0
 800c440:	4619      	mov	r1, r3
 800c442:	4610      	mov	r0, r2
 800c444:	ec41 0b10 	vmov	d0, r0, r1
 800c448:	b002      	add	sp, #8
 800c44a:	4770      	bx	lr
 800c44c:	7ff00000 	.word	0x7ff00000

0800c450 <__b2d>:
 800c450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c454:	6906      	ldr	r6, [r0, #16]
 800c456:	f100 0814 	add.w	r8, r0, #20
 800c45a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c45e:	1f37      	subs	r7, r6, #4
 800c460:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c464:	4610      	mov	r0, r2
 800c466:	f7ff fd4b 	bl	800bf00 <__hi0bits>
 800c46a:	f1c0 0320 	rsb	r3, r0, #32
 800c46e:	280a      	cmp	r0, #10
 800c470:	600b      	str	r3, [r1, #0]
 800c472:	491b      	ldr	r1, [pc, #108]	@ (800c4e0 <__b2d+0x90>)
 800c474:	dc15      	bgt.n	800c4a2 <__b2d+0x52>
 800c476:	f1c0 0c0b 	rsb	ip, r0, #11
 800c47a:	fa22 f30c 	lsr.w	r3, r2, ip
 800c47e:	45b8      	cmp	r8, r7
 800c480:	ea43 0501 	orr.w	r5, r3, r1
 800c484:	bf34      	ite	cc
 800c486:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c48a:	2300      	movcs	r3, #0
 800c48c:	3015      	adds	r0, #21
 800c48e:	fa02 f000 	lsl.w	r0, r2, r0
 800c492:	fa23 f30c 	lsr.w	r3, r3, ip
 800c496:	4303      	orrs	r3, r0
 800c498:	461c      	mov	r4, r3
 800c49a:	ec45 4b10 	vmov	d0, r4, r5
 800c49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4a2:	45b8      	cmp	r8, r7
 800c4a4:	bf3a      	itte	cc
 800c4a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c4aa:	f1a6 0708 	subcc.w	r7, r6, #8
 800c4ae:	2300      	movcs	r3, #0
 800c4b0:	380b      	subs	r0, #11
 800c4b2:	d012      	beq.n	800c4da <__b2d+0x8a>
 800c4b4:	f1c0 0120 	rsb	r1, r0, #32
 800c4b8:	fa23 f401 	lsr.w	r4, r3, r1
 800c4bc:	4082      	lsls	r2, r0
 800c4be:	4322      	orrs	r2, r4
 800c4c0:	4547      	cmp	r7, r8
 800c4c2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c4c6:	bf8c      	ite	hi
 800c4c8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c4cc:	2200      	movls	r2, #0
 800c4ce:	4083      	lsls	r3, r0
 800c4d0:	40ca      	lsrs	r2, r1
 800c4d2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	e7de      	b.n	800c498 <__b2d+0x48>
 800c4da:	ea42 0501 	orr.w	r5, r2, r1
 800c4de:	e7db      	b.n	800c498 <__b2d+0x48>
 800c4e0:	3ff00000 	.word	0x3ff00000

0800c4e4 <__d2b>:
 800c4e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c4e8:	460f      	mov	r7, r1
 800c4ea:	2101      	movs	r1, #1
 800c4ec:	ec59 8b10 	vmov	r8, r9, d0
 800c4f0:	4616      	mov	r6, r2
 800c4f2:	f7ff fc13 	bl	800bd1c <_Balloc>
 800c4f6:	4604      	mov	r4, r0
 800c4f8:	b930      	cbnz	r0, 800c508 <__d2b+0x24>
 800c4fa:	4602      	mov	r2, r0
 800c4fc:	4b23      	ldr	r3, [pc, #140]	@ (800c58c <__d2b+0xa8>)
 800c4fe:	4824      	ldr	r0, [pc, #144]	@ (800c590 <__d2b+0xac>)
 800c500:	f240 310f 	movw	r1, #783	@ 0x30f
 800c504:	f001 f934 	bl	800d770 <__assert_func>
 800c508:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c50c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c510:	b10d      	cbz	r5, 800c516 <__d2b+0x32>
 800c512:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c516:	9301      	str	r3, [sp, #4]
 800c518:	f1b8 0300 	subs.w	r3, r8, #0
 800c51c:	d023      	beq.n	800c566 <__d2b+0x82>
 800c51e:	4668      	mov	r0, sp
 800c520:	9300      	str	r3, [sp, #0]
 800c522:	f7ff fd0c 	bl	800bf3e <__lo0bits>
 800c526:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c52a:	b1d0      	cbz	r0, 800c562 <__d2b+0x7e>
 800c52c:	f1c0 0320 	rsb	r3, r0, #32
 800c530:	fa02 f303 	lsl.w	r3, r2, r3
 800c534:	430b      	orrs	r3, r1
 800c536:	40c2      	lsrs	r2, r0
 800c538:	6163      	str	r3, [r4, #20]
 800c53a:	9201      	str	r2, [sp, #4]
 800c53c:	9b01      	ldr	r3, [sp, #4]
 800c53e:	61a3      	str	r3, [r4, #24]
 800c540:	2b00      	cmp	r3, #0
 800c542:	bf0c      	ite	eq
 800c544:	2201      	moveq	r2, #1
 800c546:	2202      	movne	r2, #2
 800c548:	6122      	str	r2, [r4, #16]
 800c54a:	b1a5      	cbz	r5, 800c576 <__d2b+0x92>
 800c54c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c550:	4405      	add	r5, r0
 800c552:	603d      	str	r5, [r7, #0]
 800c554:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c558:	6030      	str	r0, [r6, #0]
 800c55a:	4620      	mov	r0, r4
 800c55c:	b003      	add	sp, #12
 800c55e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c562:	6161      	str	r1, [r4, #20]
 800c564:	e7ea      	b.n	800c53c <__d2b+0x58>
 800c566:	a801      	add	r0, sp, #4
 800c568:	f7ff fce9 	bl	800bf3e <__lo0bits>
 800c56c:	9b01      	ldr	r3, [sp, #4]
 800c56e:	6163      	str	r3, [r4, #20]
 800c570:	3020      	adds	r0, #32
 800c572:	2201      	movs	r2, #1
 800c574:	e7e8      	b.n	800c548 <__d2b+0x64>
 800c576:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c57a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c57e:	6038      	str	r0, [r7, #0]
 800c580:	6918      	ldr	r0, [r3, #16]
 800c582:	f7ff fcbd 	bl	800bf00 <__hi0bits>
 800c586:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c58a:	e7e5      	b.n	800c558 <__d2b+0x74>
 800c58c:	0800e695 	.word	0x0800e695
 800c590:	0800e6a6 	.word	0x0800e6a6

0800c594 <__ratio>:
 800c594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c598:	4688      	mov	r8, r1
 800c59a:	4669      	mov	r1, sp
 800c59c:	4681      	mov	r9, r0
 800c59e:	f7ff ff57 	bl	800c450 <__b2d>
 800c5a2:	a901      	add	r1, sp, #4
 800c5a4:	4640      	mov	r0, r8
 800c5a6:	ec55 4b10 	vmov	r4, r5, d0
 800c5aa:	f7ff ff51 	bl	800c450 <__b2d>
 800c5ae:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c5b2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c5b6:	1ad2      	subs	r2, r2, r3
 800c5b8:	e9dd 3100 	ldrd	r3, r1, [sp]
 800c5bc:	1a5b      	subs	r3, r3, r1
 800c5be:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800c5c2:	ec57 6b10 	vmov	r6, r7, d0
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	bfd6      	itet	le
 800c5ca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c5ce:	462a      	movgt	r2, r5
 800c5d0:	463a      	movle	r2, r7
 800c5d2:	46ab      	mov	fp, r5
 800c5d4:	46a2      	mov	sl, r4
 800c5d6:	bfce      	itee	gt
 800c5d8:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800c5dc:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800c5e0:	ee00 3a90 	vmovle	s1, r3
 800c5e4:	ec4b ab17 	vmov	d7, sl, fp
 800c5e8:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800c5ec:	b003      	add	sp, #12
 800c5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c5f2 <__copybits>:
 800c5f2:	3901      	subs	r1, #1
 800c5f4:	b570      	push	{r4, r5, r6, lr}
 800c5f6:	1149      	asrs	r1, r1, #5
 800c5f8:	6914      	ldr	r4, [r2, #16]
 800c5fa:	3101      	adds	r1, #1
 800c5fc:	f102 0314 	add.w	r3, r2, #20
 800c600:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c604:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c608:	1f05      	subs	r5, r0, #4
 800c60a:	42a3      	cmp	r3, r4
 800c60c:	d30c      	bcc.n	800c628 <__copybits+0x36>
 800c60e:	1aa3      	subs	r3, r4, r2
 800c610:	3b11      	subs	r3, #17
 800c612:	f023 0303 	bic.w	r3, r3, #3
 800c616:	3211      	adds	r2, #17
 800c618:	42a2      	cmp	r2, r4
 800c61a:	bf88      	it	hi
 800c61c:	2300      	movhi	r3, #0
 800c61e:	4418      	add	r0, r3
 800c620:	2300      	movs	r3, #0
 800c622:	4288      	cmp	r0, r1
 800c624:	d305      	bcc.n	800c632 <__copybits+0x40>
 800c626:	bd70      	pop	{r4, r5, r6, pc}
 800c628:	f853 6b04 	ldr.w	r6, [r3], #4
 800c62c:	f845 6f04 	str.w	r6, [r5, #4]!
 800c630:	e7eb      	b.n	800c60a <__copybits+0x18>
 800c632:	f840 3b04 	str.w	r3, [r0], #4
 800c636:	e7f4      	b.n	800c622 <__copybits+0x30>

0800c638 <__any_on>:
 800c638:	f100 0214 	add.w	r2, r0, #20
 800c63c:	6900      	ldr	r0, [r0, #16]
 800c63e:	114b      	asrs	r3, r1, #5
 800c640:	4298      	cmp	r0, r3
 800c642:	b510      	push	{r4, lr}
 800c644:	db11      	blt.n	800c66a <__any_on+0x32>
 800c646:	dd0a      	ble.n	800c65e <__any_on+0x26>
 800c648:	f011 011f 	ands.w	r1, r1, #31
 800c64c:	d007      	beq.n	800c65e <__any_on+0x26>
 800c64e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c652:	fa24 f001 	lsr.w	r0, r4, r1
 800c656:	fa00 f101 	lsl.w	r1, r0, r1
 800c65a:	428c      	cmp	r4, r1
 800c65c:	d10b      	bne.n	800c676 <__any_on+0x3e>
 800c65e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c662:	4293      	cmp	r3, r2
 800c664:	d803      	bhi.n	800c66e <__any_on+0x36>
 800c666:	2000      	movs	r0, #0
 800c668:	bd10      	pop	{r4, pc}
 800c66a:	4603      	mov	r3, r0
 800c66c:	e7f7      	b.n	800c65e <__any_on+0x26>
 800c66e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c672:	2900      	cmp	r1, #0
 800c674:	d0f5      	beq.n	800c662 <__any_on+0x2a>
 800c676:	2001      	movs	r0, #1
 800c678:	e7f6      	b.n	800c668 <__any_on+0x30>

0800c67a <sulp>:
 800c67a:	b570      	push	{r4, r5, r6, lr}
 800c67c:	4604      	mov	r4, r0
 800c67e:	460d      	mov	r5, r1
 800c680:	4616      	mov	r6, r2
 800c682:	ec45 4b10 	vmov	d0, r4, r5
 800c686:	f7ff febd 	bl	800c404 <__ulp>
 800c68a:	b17e      	cbz	r6, 800c6ac <sulp+0x32>
 800c68c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c690:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c694:	2b00      	cmp	r3, #0
 800c696:	dd09      	ble.n	800c6ac <sulp+0x32>
 800c698:	051b      	lsls	r3, r3, #20
 800c69a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800c69e:	2000      	movs	r0, #0
 800c6a0:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800c6a4:	ec41 0b17 	vmov	d7, r0, r1
 800c6a8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c6ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c6b0 <_strtod_l>:
 800c6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b4:	ed2d 8b0a 	vpush	{d8-d12}
 800c6b8:	b097      	sub	sp, #92	@ 0x5c
 800c6ba:	4688      	mov	r8, r1
 800c6bc:	920e      	str	r2, [sp, #56]	@ 0x38
 800c6be:	2200      	movs	r2, #0
 800c6c0:	9212      	str	r2, [sp, #72]	@ 0x48
 800c6c2:	9005      	str	r0, [sp, #20]
 800c6c4:	f04f 0a00 	mov.w	sl, #0
 800c6c8:	f04f 0b00 	mov.w	fp, #0
 800c6cc:	460a      	mov	r2, r1
 800c6ce:	9211      	str	r2, [sp, #68]	@ 0x44
 800c6d0:	7811      	ldrb	r1, [r2, #0]
 800c6d2:	292b      	cmp	r1, #43	@ 0x2b
 800c6d4:	d04c      	beq.n	800c770 <_strtod_l+0xc0>
 800c6d6:	d839      	bhi.n	800c74c <_strtod_l+0x9c>
 800c6d8:	290d      	cmp	r1, #13
 800c6da:	d833      	bhi.n	800c744 <_strtod_l+0x94>
 800c6dc:	2908      	cmp	r1, #8
 800c6de:	d833      	bhi.n	800c748 <_strtod_l+0x98>
 800c6e0:	2900      	cmp	r1, #0
 800c6e2:	d03c      	beq.n	800c75e <_strtod_l+0xae>
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	9208      	str	r2, [sp, #32]
 800c6e8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800c6ea:	782a      	ldrb	r2, [r5, #0]
 800c6ec:	2a30      	cmp	r2, #48	@ 0x30
 800c6ee:	f040 80b5 	bne.w	800c85c <_strtod_l+0x1ac>
 800c6f2:	786a      	ldrb	r2, [r5, #1]
 800c6f4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c6f8:	2a58      	cmp	r2, #88	@ 0x58
 800c6fa:	d170      	bne.n	800c7de <_strtod_l+0x12e>
 800c6fc:	9302      	str	r3, [sp, #8]
 800c6fe:	9b08      	ldr	r3, [sp, #32]
 800c700:	9301      	str	r3, [sp, #4]
 800c702:	ab12      	add	r3, sp, #72	@ 0x48
 800c704:	9300      	str	r3, [sp, #0]
 800c706:	4a8b      	ldr	r2, [pc, #556]	@ (800c934 <_strtod_l+0x284>)
 800c708:	9805      	ldr	r0, [sp, #20]
 800c70a:	ab13      	add	r3, sp, #76	@ 0x4c
 800c70c:	a911      	add	r1, sp, #68	@ 0x44
 800c70e:	f001 f8c9 	bl	800d8a4 <__gethex>
 800c712:	f010 060f 	ands.w	r6, r0, #15
 800c716:	4604      	mov	r4, r0
 800c718:	d005      	beq.n	800c726 <_strtod_l+0x76>
 800c71a:	2e06      	cmp	r6, #6
 800c71c:	d12a      	bne.n	800c774 <_strtod_l+0xc4>
 800c71e:	3501      	adds	r5, #1
 800c720:	2300      	movs	r3, #0
 800c722:	9511      	str	r5, [sp, #68]	@ 0x44
 800c724:	9308      	str	r3, [sp, #32]
 800c726:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c728:	2b00      	cmp	r3, #0
 800c72a:	f040 852f 	bne.w	800d18c <_strtod_l+0xadc>
 800c72e:	9b08      	ldr	r3, [sp, #32]
 800c730:	ec4b ab10 	vmov	d0, sl, fp
 800c734:	b1cb      	cbz	r3, 800c76a <_strtod_l+0xba>
 800c736:	eeb1 0b40 	vneg.f64	d0, d0
 800c73a:	b017      	add	sp, #92	@ 0x5c
 800c73c:	ecbd 8b0a 	vpop	{d8-d12}
 800c740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c744:	2920      	cmp	r1, #32
 800c746:	d1cd      	bne.n	800c6e4 <_strtod_l+0x34>
 800c748:	3201      	adds	r2, #1
 800c74a:	e7c0      	b.n	800c6ce <_strtod_l+0x1e>
 800c74c:	292d      	cmp	r1, #45	@ 0x2d
 800c74e:	d1c9      	bne.n	800c6e4 <_strtod_l+0x34>
 800c750:	2101      	movs	r1, #1
 800c752:	9108      	str	r1, [sp, #32]
 800c754:	1c51      	adds	r1, r2, #1
 800c756:	9111      	str	r1, [sp, #68]	@ 0x44
 800c758:	7852      	ldrb	r2, [r2, #1]
 800c75a:	2a00      	cmp	r2, #0
 800c75c:	d1c4      	bne.n	800c6e8 <_strtod_l+0x38>
 800c75e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c760:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800c764:	2b00      	cmp	r3, #0
 800c766:	f040 850f 	bne.w	800d188 <_strtod_l+0xad8>
 800c76a:	ec4b ab10 	vmov	d0, sl, fp
 800c76e:	e7e4      	b.n	800c73a <_strtod_l+0x8a>
 800c770:	2100      	movs	r1, #0
 800c772:	e7ee      	b.n	800c752 <_strtod_l+0xa2>
 800c774:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c776:	b13a      	cbz	r2, 800c788 <_strtod_l+0xd8>
 800c778:	2135      	movs	r1, #53	@ 0x35
 800c77a:	a814      	add	r0, sp, #80	@ 0x50
 800c77c:	f7ff ff39 	bl	800c5f2 <__copybits>
 800c780:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c782:	9805      	ldr	r0, [sp, #20]
 800c784:	f7ff fb0a 	bl	800bd9c <_Bfree>
 800c788:	1e73      	subs	r3, r6, #1
 800c78a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c78c:	2b04      	cmp	r3, #4
 800c78e:	d806      	bhi.n	800c79e <_strtod_l+0xee>
 800c790:	e8df f003 	tbb	[pc, r3]
 800c794:	201d0314 	.word	0x201d0314
 800c798:	14          	.byte	0x14
 800c799:	00          	.byte	0x00
 800c79a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800c79e:	05e3      	lsls	r3, r4, #23
 800c7a0:	bf48      	it	mi
 800c7a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c7a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c7aa:	0d1b      	lsrs	r3, r3, #20
 800c7ac:	051b      	lsls	r3, r3, #20
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d1b9      	bne.n	800c726 <_strtod_l+0x76>
 800c7b2:	f7fe fb93 	bl	800aedc <__errno>
 800c7b6:	2322      	movs	r3, #34	@ 0x22
 800c7b8:	6003      	str	r3, [r0, #0]
 800c7ba:	e7b4      	b.n	800c726 <_strtod_l+0x76>
 800c7bc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800c7c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c7c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c7c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c7cc:	e7e7      	b.n	800c79e <_strtod_l+0xee>
 800c7ce:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800c93c <_strtod_l+0x28c>
 800c7d2:	e7e4      	b.n	800c79e <_strtod_l+0xee>
 800c7d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c7d8:	f04f 3aff 	mov.w	sl, #4294967295
 800c7dc:	e7df      	b.n	800c79e <_strtod_l+0xee>
 800c7de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c7e0:	1c5a      	adds	r2, r3, #1
 800c7e2:	9211      	str	r2, [sp, #68]	@ 0x44
 800c7e4:	785b      	ldrb	r3, [r3, #1]
 800c7e6:	2b30      	cmp	r3, #48	@ 0x30
 800c7e8:	d0f9      	beq.n	800c7de <_strtod_l+0x12e>
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d09b      	beq.n	800c726 <_strtod_l+0x76>
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	2600      	movs	r6, #0
 800c7f2:	9307      	str	r3, [sp, #28]
 800c7f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c7f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7f8:	46b1      	mov	r9, r6
 800c7fa:	4635      	mov	r5, r6
 800c7fc:	220a      	movs	r2, #10
 800c7fe:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800c800:	7804      	ldrb	r4, [r0, #0]
 800c802:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800c806:	b2d9      	uxtb	r1, r3
 800c808:	2909      	cmp	r1, #9
 800c80a:	d929      	bls.n	800c860 <_strtod_l+0x1b0>
 800c80c:	494a      	ldr	r1, [pc, #296]	@ (800c938 <_strtod_l+0x288>)
 800c80e:	2201      	movs	r2, #1
 800c810:	f000 ff84 	bl	800d71c <strncmp>
 800c814:	b378      	cbz	r0, 800c876 <_strtod_l+0x1c6>
 800c816:	2000      	movs	r0, #0
 800c818:	4622      	mov	r2, r4
 800c81a:	462b      	mov	r3, r5
 800c81c:	4607      	mov	r7, r0
 800c81e:	9006      	str	r0, [sp, #24]
 800c820:	2a65      	cmp	r2, #101	@ 0x65
 800c822:	d001      	beq.n	800c828 <_strtod_l+0x178>
 800c824:	2a45      	cmp	r2, #69	@ 0x45
 800c826:	d117      	bne.n	800c858 <_strtod_l+0x1a8>
 800c828:	b91b      	cbnz	r3, 800c832 <_strtod_l+0x182>
 800c82a:	9b07      	ldr	r3, [sp, #28]
 800c82c:	4303      	orrs	r3, r0
 800c82e:	d096      	beq.n	800c75e <_strtod_l+0xae>
 800c830:	2300      	movs	r3, #0
 800c832:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800c836:	f108 0201 	add.w	r2, r8, #1
 800c83a:	9211      	str	r2, [sp, #68]	@ 0x44
 800c83c:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c840:	2a2b      	cmp	r2, #43	@ 0x2b
 800c842:	d06b      	beq.n	800c91c <_strtod_l+0x26c>
 800c844:	2a2d      	cmp	r2, #45	@ 0x2d
 800c846:	d071      	beq.n	800c92c <_strtod_l+0x27c>
 800c848:	f04f 0e00 	mov.w	lr, #0
 800c84c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800c850:	2c09      	cmp	r4, #9
 800c852:	d979      	bls.n	800c948 <_strtod_l+0x298>
 800c854:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800c858:	2400      	movs	r4, #0
 800c85a:	e094      	b.n	800c986 <_strtod_l+0x2d6>
 800c85c:	2300      	movs	r3, #0
 800c85e:	e7c7      	b.n	800c7f0 <_strtod_l+0x140>
 800c860:	2d08      	cmp	r5, #8
 800c862:	f100 0001 	add.w	r0, r0, #1
 800c866:	bfd4      	ite	le
 800c868:	fb02 3909 	mlale	r9, r2, r9, r3
 800c86c:	fb02 3606 	mlagt	r6, r2, r6, r3
 800c870:	3501      	adds	r5, #1
 800c872:	9011      	str	r0, [sp, #68]	@ 0x44
 800c874:	e7c3      	b.n	800c7fe <_strtod_l+0x14e>
 800c876:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c878:	1c5a      	adds	r2, r3, #1
 800c87a:	9211      	str	r2, [sp, #68]	@ 0x44
 800c87c:	785a      	ldrb	r2, [r3, #1]
 800c87e:	b375      	cbz	r5, 800c8de <_strtod_l+0x22e>
 800c880:	4607      	mov	r7, r0
 800c882:	462b      	mov	r3, r5
 800c884:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c888:	2909      	cmp	r1, #9
 800c88a:	d913      	bls.n	800c8b4 <_strtod_l+0x204>
 800c88c:	2101      	movs	r1, #1
 800c88e:	9106      	str	r1, [sp, #24]
 800c890:	e7c6      	b.n	800c820 <_strtod_l+0x170>
 800c892:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c894:	1c5a      	adds	r2, r3, #1
 800c896:	9211      	str	r2, [sp, #68]	@ 0x44
 800c898:	785a      	ldrb	r2, [r3, #1]
 800c89a:	3001      	adds	r0, #1
 800c89c:	2a30      	cmp	r2, #48	@ 0x30
 800c89e:	d0f8      	beq.n	800c892 <_strtod_l+0x1e2>
 800c8a0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c8a4:	2b08      	cmp	r3, #8
 800c8a6:	f200 8476 	bhi.w	800d196 <_strtod_l+0xae6>
 800c8aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c8ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8ae:	4607      	mov	r7, r0
 800c8b0:	2000      	movs	r0, #0
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	3a30      	subs	r2, #48	@ 0x30
 800c8b6:	f100 0101 	add.w	r1, r0, #1
 800c8ba:	d023      	beq.n	800c904 <_strtod_l+0x254>
 800c8bc:	440f      	add	r7, r1
 800c8be:	eb00 0c03 	add.w	ip, r0, r3
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	240a      	movs	r4, #10
 800c8c6:	4561      	cmp	r1, ip
 800c8c8:	d10b      	bne.n	800c8e2 <_strtod_l+0x232>
 800c8ca:	1c5c      	adds	r4, r3, #1
 800c8cc:	4403      	add	r3, r0
 800c8ce:	2b08      	cmp	r3, #8
 800c8d0:	4404      	add	r4, r0
 800c8d2:	dc11      	bgt.n	800c8f8 <_strtod_l+0x248>
 800c8d4:	230a      	movs	r3, #10
 800c8d6:	fb03 2909 	mla	r9, r3, r9, r2
 800c8da:	2100      	movs	r1, #0
 800c8dc:	e013      	b.n	800c906 <_strtod_l+0x256>
 800c8de:	4628      	mov	r0, r5
 800c8e0:	e7dc      	b.n	800c89c <_strtod_l+0x1ec>
 800c8e2:	2908      	cmp	r1, #8
 800c8e4:	f101 0101 	add.w	r1, r1, #1
 800c8e8:	dc02      	bgt.n	800c8f0 <_strtod_l+0x240>
 800c8ea:	fb04 f909 	mul.w	r9, r4, r9
 800c8ee:	e7ea      	b.n	800c8c6 <_strtod_l+0x216>
 800c8f0:	2910      	cmp	r1, #16
 800c8f2:	bfd8      	it	le
 800c8f4:	4366      	mulle	r6, r4
 800c8f6:	e7e6      	b.n	800c8c6 <_strtod_l+0x216>
 800c8f8:	2b0f      	cmp	r3, #15
 800c8fa:	dcee      	bgt.n	800c8da <_strtod_l+0x22a>
 800c8fc:	230a      	movs	r3, #10
 800c8fe:	fb03 2606 	mla	r6, r3, r6, r2
 800c902:	e7ea      	b.n	800c8da <_strtod_l+0x22a>
 800c904:	461c      	mov	r4, r3
 800c906:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c908:	1c5a      	adds	r2, r3, #1
 800c90a:	9211      	str	r2, [sp, #68]	@ 0x44
 800c90c:	785a      	ldrb	r2, [r3, #1]
 800c90e:	4608      	mov	r0, r1
 800c910:	4623      	mov	r3, r4
 800c912:	e7b7      	b.n	800c884 <_strtod_l+0x1d4>
 800c914:	2301      	movs	r3, #1
 800c916:	2700      	movs	r7, #0
 800c918:	9306      	str	r3, [sp, #24]
 800c91a:	e786      	b.n	800c82a <_strtod_l+0x17a>
 800c91c:	f04f 0e00 	mov.w	lr, #0
 800c920:	f108 0202 	add.w	r2, r8, #2
 800c924:	9211      	str	r2, [sp, #68]	@ 0x44
 800c926:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c92a:	e78f      	b.n	800c84c <_strtod_l+0x19c>
 800c92c:	f04f 0e01 	mov.w	lr, #1
 800c930:	e7f6      	b.n	800c920 <_strtod_l+0x270>
 800c932:	bf00      	nop
 800c934:	0800e818 	.word	0x0800e818
 800c938:	0800e800 	.word	0x0800e800
 800c93c:	7ff00000 	.word	0x7ff00000
 800c940:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c942:	1c54      	adds	r4, r2, #1
 800c944:	9411      	str	r4, [sp, #68]	@ 0x44
 800c946:	7852      	ldrb	r2, [r2, #1]
 800c948:	2a30      	cmp	r2, #48	@ 0x30
 800c94a:	d0f9      	beq.n	800c940 <_strtod_l+0x290>
 800c94c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800c950:	2c08      	cmp	r4, #8
 800c952:	d881      	bhi.n	800c858 <_strtod_l+0x1a8>
 800c954:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800c958:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c95a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c95c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c95e:	1c51      	adds	r1, r2, #1
 800c960:	9111      	str	r1, [sp, #68]	@ 0x44
 800c962:	7852      	ldrb	r2, [r2, #1]
 800c964:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800c968:	2c09      	cmp	r4, #9
 800c96a:	d938      	bls.n	800c9de <_strtod_l+0x32e>
 800c96c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800c96e:	1b0c      	subs	r4, r1, r4
 800c970:	2c08      	cmp	r4, #8
 800c972:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800c976:	dc02      	bgt.n	800c97e <_strtod_l+0x2ce>
 800c978:	4564      	cmp	r4, ip
 800c97a:	bfa8      	it	ge
 800c97c:	4664      	movge	r4, ip
 800c97e:	f1be 0f00 	cmp.w	lr, #0
 800c982:	d000      	beq.n	800c986 <_strtod_l+0x2d6>
 800c984:	4264      	negs	r4, r4
 800c986:	2b00      	cmp	r3, #0
 800c988:	d14e      	bne.n	800ca28 <_strtod_l+0x378>
 800c98a:	9b07      	ldr	r3, [sp, #28]
 800c98c:	4318      	orrs	r0, r3
 800c98e:	f47f aeca 	bne.w	800c726 <_strtod_l+0x76>
 800c992:	9b06      	ldr	r3, [sp, #24]
 800c994:	2b00      	cmp	r3, #0
 800c996:	f47f aee2 	bne.w	800c75e <_strtod_l+0xae>
 800c99a:	2a69      	cmp	r2, #105	@ 0x69
 800c99c:	d027      	beq.n	800c9ee <_strtod_l+0x33e>
 800c99e:	dc24      	bgt.n	800c9ea <_strtod_l+0x33a>
 800c9a0:	2a49      	cmp	r2, #73	@ 0x49
 800c9a2:	d024      	beq.n	800c9ee <_strtod_l+0x33e>
 800c9a4:	2a4e      	cmp	r2, #78	@ 0x4e
 800c9a6:	f47f aeda 	bne.w	800c75e <_strtod_l+0xae>
 800c9aa:	4997      	ldr	r1, [pc, #604]	@ (800cc08 <_strtod_l+0x558>)
 800c9ac:	a811      	add	r0, sp, #68	@ 0x44
 800c9ae:	f001 f99b 	bl	800dce8 <__match>
 800c9b2:	2800      	cmp	r0, #0
 800c9b4:	f43f aed3 	beq.w	800c75e <_strtod_l+0xae>
 800c9b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	2b28      	cmp	r3, #40	@ 0x28
 800c9be:	d12d      	bne.n	800ca1c <_strtod_l+0x36c>
 800c9c0:	4992      	ldr	r1, [pc, #584]	@ (800cc0c <_strtod_l+0x55c>)
 800c9c2:	aa14      	add	r2, sp, #80	@ 0x50
 800c9c4:	a811      	add	r0, sp, #68	@ 0x44
 800c9c6:	f001 f9a3 	bl	800dd10 <__hexnan>
 800c9ca:	2805      	cmp	r0, #5
 800c9cc:	d126      	bne.n	800ca1c <_strtod_l+0x36c>
 800c9ce:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c9d0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800c9d4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c9d8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c9dc:	e6a3      	b.n	800c726 <_strtod_l+0x76>
 800c9de:	240a      	movs	r4, #10
 800c9e0:	fb04 2c0c 	mla	ip, r4, ip, r2
 800c9e4:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800c9e8:	e7b8      	b.n	800c95c <_strtod_l+0x2ac>
 800c9ea:	2a6e      	cmp	r2, #110	@ 0x6e
 800c9ec:	e7db      	b.n	800c9a6 <_strtod_l+0x2f6>
 800c9ee:	4988      	ldr	r1, [pc, #544]	@ (800cc10 <_strtod_l+0x560>)
 800c9f0:	a811      	add	r0, sp, #68	@ 0x44
 800c9f2:	f001 f979 	bl	800dce8 <__match>
 800c9f6:	2800      	cmp	r0, #0
 800c9f8:	f43f aeb1 	beq.w	800c75e <_strtod_l+0xae>
 800c9fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c9fe:	4985      	ldr	r1, [pc, #532]	@ (800cc14 <_strtod_l+0x564>)
 800ca00:	3b01      	subs	r3, #1
 800ca02:	a811      	add	r0, sp, #68	@ 0x44
 800ca04:	9311      	str	r3, [sp, #68]	@ 0x44
 800ca06:	f001 f96f 	bl	800dce8 <__match>
 800ca0a:	b910      	cbnz	r0, 800ca12 <_strtod_l+0x362>
 800ca0c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ca0e:	3301      	adds	r3, #1
 800ca10:	9311      	str	r3, [sp, #68]	@ 0x44
 800ca12:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800cc28 <_strtod_l+0x578>
 800ca16:	f04f 0a00 	mov.w	sl, #0
 800ca1a:	e684      	b.n	800c726 <_strtod_l+0x76>
 800ca1c:	487e      	ldr	r0, [pc, #504]	@ (800cc18 <_strtod_l+0x568>)
 800ca1e:	f000 fe9f 	bl	800d760 <nan>
 800ca22:	ec5b ab10 	vmov	sl, fp, d0
 800ca26:	e67e      	b.n	800c726 <_strtod_l+0x76>
 800ca28:	ee07 9a90 	vmov	s15, r9
 800ca2c:	1be2      	subs	r2, r4, r7
 800ca2e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ca32:	2d00      	cmp	r5, #0
 800ca34:	bf08      	it	eq
 800ca36:	461d      	moveq	r5, r3
 800ca38:	2b10      	cmp	r3, #16
 800ca3a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	bfa8      	it	ge
 800ca40:	2210      	movge	r2, #16
 800ca42:	2b09      	cmp	r3, #9
 800ca44:	ec5b ab17 	vmov	sl, fp, d7
 800ca48:	dc15      	bgt.n	800ca76 <_strtod_l+0x3c6>
 800ca4a:	1be1      	subs	r1, r4, r7
 800ca4c:	2900      	cmp	r1, #0
 800ca4e:	f43f ae6a 	beq.w	800c726 <_strtod_l+0x76>
 800ca52:	eba4 0107 	sub.w	r1, r4, r7
 800ca56:	dd72      	ble.n	800cb3e <_strtod_l+0x48e>
 800ca58:	2916      	cmp	r1, #22
 800ca5a:	dc59      	bgt.n	800cb10 <_strtod_l+0x460>
 800ca5c:	4b6f      	ldr	r3, [pc, #444]	@ (800cc1c <_strtod_l+0x56c>)
 800ca5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca64:	ed93 7b00 	vldr	d7, [r3]
 800ca68:	ec4b ab16 	vmov	d6, sl, fp
 800ca6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ca70:	ec5b ab17 	vmov	sl, fp, d7
 800ca74:	e657      	b.n	800c726 <_strtod_l+0x76>
 800ca76:	4969      	ldr	r1, [pc, #420]	@ (800cc1c <_strtod_l+0x56c>)
 800ca78:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ca7c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800ca80:	ee06 6a90 	vmov	s13, r6
 800ca84:	2b0f      	cmp	r3, #15
 800ca86:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800ca8a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ca8e:	ec5b ab16 	vmov	sl, fp, d6
 800ca92:	ddda      	ble.n	800ca4a <_strtod_l+0x39a>
 800ca94:	1a9a      	subs	r2, r3, r2
 800ca96:	1be1      	subs	r1, r4, r7
 800ca98:	440a      	add	r2, r1
 800ca9a:	2a00      	cmp	r2, #0
 800ca9c:	f340 8094 	ble.w	800cbc8 <_strtod_l+0x518>
 800caa0:	f012 000f 	ands.w	r0, r2, #15
 800caa4:	d00a      	beq.n	800cabc <_strtod_l+0x40c>
 800caa6:	495d      	ldr	r1, [pc, #372]	@ (800cc1c <_strtod_l+0x56c>)
 800caa8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800caac:	ed91 7b00 	vldr	d7, [r1]
 800cab0:	ec4b ab16 	vmov	d6, sl, fp
 800cab4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cab8:	ec5b ab17 	vmov	sl, fp, d7
 800cabc:	f032 020f 	bics.w	r2, r2, #15
 800cac0:	d073      	beq.n	800cbaa <_strtod_l+0x4fa>
 800cac2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800cac6:	dd47      	ble.n	800cb58 <_strtod_l+0x4a8>
 800cac8:	2400      	movs	r4, #0
 800caca:	4625      	mov	r5, r4
 800cacc:	9407      	str	r4, [sp, #28]
 800cace:	4626      	mov	r6, r4
 800cad0:	9a05      	ldr	r2, [sp, #20]
 800cad2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800cc28 <_strtod_l+0x578>
 800cad6:	2322      	movs	r3, #34	@ 0x22
 800cad8:	6013      	str	r3, [r2, #0]
 800cada:	f04f 0a00 	mov.w	sl, #0
 800cade:	9b07      	ldr	r3, [sp, #28]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	f43f ae20 	beq.w	800c726 <_strtod_l+0x76>
 800cae6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800cae8:	9805      	ldr	r0, [sp, #20]
 800caea:	f7ff f957 	bl	800bd9c <_Bfree>
 800caee:	9805      	ldr	r0, [sp, #20]
 800caf0:	4631      	mov	r1, r6
 800caf2:	f7ff f953 	bl	800bd9c <_Bfree>
 800caf6:	9805      	ldr	r0, [sp, #20]
 800caf8:	4629      	mov	r1, r5
 800cafa:	f7ff f94f 	bl	800bd9c <_Bfree>
 800cafe:	9907      	ldr	r1, [sp, #28]
 800cb00:	9805      	ldr	r0, [sp, #20]
 800cb02:	f7ff f94b 	bl	800bd9c <_Bfree>
 800cb06:	9805      	ldr	r0, [sp, #20]
 800cb08:	4621      	mov	r1, r4
 800cb0a:	f7ff f947 	bl	800bd9c <_Bfree>
 800cb0e:	e60a      	b.n	800c726 <_strtod_l+0x76>
 800cb10:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800cb14:	1be0      	subs	r0, r4, r7
 800cb16:	4281      	cmp	r1, r0
 800cb18:	dbbc      	blt.n	800ca94 <_strtod_l+0x3e4>
 800cb1a:	4a40      	ldr	r2, [pc, #256]	@ (800cc1c <_strtod_l+0x56c>)
 800cb1c:	f1c3 030f 	rsb	r3, r3, #15
 800cb20:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800cb24:	ed91 7b00 	vldr	d7, [r1]
 800cb28:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cb2a:	ec4b ab16 	vmov	d6, sl, fp
 800cb2e:	1acb      	subs	r3, r1, r3
 800cb30:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800cb34:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cb38:	ed92 6b00 	vldr	d6, [r2]
 800cb3c:	e796      	b.n	800ca6c <_strtod_l+0x3bc>
 800cb3e:	3116      	adds	r1, #22
 800cb40:	dba8      	blt.n	800ca94 <_strtod_l+0x3e4>
 800cb42:	4b36      	ldr	r3, [pc, #216]	@ (800cc1c <_strtod_l+0x56c>)
 800cb44:	1b3c      	subs	r4, r7, r4
 800cb46:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800cb4a:	ed94 7b00 	vldr	d7, [r4]
 800cb4e:	ec4b ab16 	vmov	d6, sl, fp
 800cb52:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cb56:	e78b      	b.n	800ca70 <_strtod_l+0x3c0>
 800cb58:	2000      	movs	r0, #0
 800cb5a:	ec4b ab17 	vmov	d7, sl, fp
 800cb5e:	4e30      	ldr	r6, [pc, #192]	@ (800cc20 <_strtod_l+0x570>)
 800cb60:	1112      	asrs	r2, r2, #4
 800cb62:	4601      	mov	r1, r0
 800cb64:	2a01      	cmp	r2, #1
 800cb66:	dc23      	bgt.n	800cbb0 <_strtod_l+0x500>
 800cb68:	b108      	cbz	r0, 800cb6e <_strtod_l+0x4be>
 800cb6a:	ec5b ab17 	vmov	sl, fp, d7
 800cb6e:	4a2c      	ldr	r2, [pc, #176]	@ (800cc20 <_strtod_l+0x570>)
 800cb70:	482c      	ldr	r0, [pc, #176]	@ (800cc24 <_strtod_l+0x574>)
 800cb72:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800cb76:	ed92 7b00 	vldr	d7, [r2]
 800cb7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cb7e:	ec4b ab16 	vmov	d6, sl, fp
 800cb82:	4a29      	ldr	r2, [pc, #164]	@ (800cc28 <_strtod_l+0x578>)
 800cb84:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cb88:	ee17 1a90 	vmov	r1, s15
 800cb8c:	400a      	ands	r2, r1
 800cb8e:	4282      	cmp	r2, r0
 800cb90:	ec5b ab17 	vmov	sl, fp, d7
 800cb94:	d898      	bhi.n	800cac8 <_strtod_l+0x418>
 800cb96:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800cb9a:	4282      	cmp	r2, r0
 800cb9c:	bf86      	itte	hi
 800cb9e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800cc2c <_strtod_l+0x57c>
 800cba2:	f04f 3aff 	movhi.w	sl, #4294967295
 800cba6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800cbaa:	2200      	movs	r2, #0
 800cbac:	9206      	str	r2, [sp, #24]
 800cbae:	e076      	b.n	800cc9e <_strtod_l+0x5ee>
 800cbb0:	f012 0f01 	tst.w	r2, #1
 800cbb4:	d004      	beq.n	800cbc0 <_strtod_l+0x510>
 800cbb6:	ed96 6b00 	vldr	d6, [r6]
 800cbba:	2001      	movs	r0, #1
 800cbbc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cbc0:	3101      	adds	r1, #1
 800cbc2:	1052      	asrs	r2, r2, #1
 800cbc4:	3608      	adds	r6, #8
 800cbc6:	e7cd      	b.n	800cb64 <_strtod_l+0x4b4>
 800cbc8:	d0ef      	beq.n	800cbaa <_strtod_l+0x4fa>
 800cbca:	4252      	negs	r2, r2
 800cbcc:	f012 000f 	ands.w	r0, r2, #15
 800cbd0:	d00a      	beq.n	800cbe8 <_strtod_l+0x538>
 800cbd2:	4912      	ldr	r1, [pc, #72]	@ (800cc1c <_strtod_l+0x56c>)
 800cbd4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800cbd8:	ed91 7b00 	vldr	d7, [r1]
 800cbdc:	ec4b ab16 	vmov	d6, sl, fp
 800cbe0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cbe4:	ec5b ab17 	vmov	sl, fp, d7
 800cbe8:	1112      	asrs	r2, r2, #4
 800cbea:	d0de      	beq.n	800cbaa <_strtod_l+0x4fa>
 800cbec:	2a1f      	cmp	r2, #31
 800cbee:	dd1f      	ble.n	800cc30 <_strtod_l+0x580>
 800cbf0:	2400      	movs	r4, #0
 800cbf2:	4625      	mov	r5, r4
 800cbf4:	9407      	str	r4, [sp, #28]
 800cbf6:	4626      	mov	r6, r4
 800cbf8:	9a05      	ldr	r2, [sp, #20]
 800cbfa:	2322      	movs	r3, #34	@ 0x22
 800cbfc:	f04f 0a00 	mov.w	sl, #0
 800cc00:	f04f 0b00 	mov.w	fp, #0
 800cc04:	6013      	str	r3, [r2, #0]
 800cc06:	e76a      	b.n	800cade <_strtod_l+0x42e>
 800cc08:	0800e5ed 	.word	0x0800e5ed
 800cc0c:	0800e804 	.word	0x0800e804
 800cc10:	0800e5e5 	.word	0x0800e5e5
 800cc14:	0800e61c 	.word	0x0800e61c
 800cc18:	0800e9ad 	.word	0x0800e9ad
 800cc1c:	0800e738 	.word	0x0800e738
 800cc20:	0800e710 	.word	0x0800e710
 800cc24:	7ca00000 	.word	0x7ca00000
 800cc28:	7ff00000 	.word	0x7ff00000
 800cc2c:	7fefffff 	.word	0x7fefffff
 800cc30:	f012 0110 	ands.w	r1, r2, #16
 800cc34:	bf18      	it	ne
 800cc36:	216a      	movne	r1, #106	@ 0x6a
 800cc38:	9106      	str	r1, [sp, #24]
 800cc3a:	ec4b ab17 	vmov	d7, sl, fp
 800cc3e:	49b0      	ldr	r1, [pc, #704]	@ (800cf00 <_strtod_l+0x850>)
 800cc40:	2000      	movs	r0, #0
 800cc42:	07d6      	lsls	r6, r2, #31
 800cc44:	d504      	bpl.n	800cc50 <_strtod_l+0x5a0>
 800cc46:	ed91 6b00 	vldr	d6, [r1]
 800cc4a:	2001      	movs	r0, #1
 800cc4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cc50:	1052      	asrs	r2, r2, #1
 800cc52:	f101 0108 	add.w	r1, r1, #8
 800cc56:	d1f4      	bne.n	800cc42 <_strtod_l+0x592>
 800cc58:	b108      	cbz	r0, 800cc5e <_strtod_l+0x5ae>
 800cc5a:	ec5b ab17 	vmov	sl, fp, d7
 800cc5e:	9a06      	ldr	r2, [sp, #24]
 800cc60:	b1b2      	cbz	r2, 800cc90 <_strtod_l+0x5e0>
 800cc62:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800cc66:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800cc6a:	2a00      	cmp	r2, #0
 800cc6c:	4658      	mov	r0, fp
 800cc6e:	dd0f      	ble.n	800cc90 <_strtod_l+0x5e0>
 800cc70:	2a1f      	cmp	r2, #31
 800cc72:	dd55      	ble.n	800cd20 <_strtod_l+0x670>
 800cc74:	2a34      	cmp	r2, #52	@ 0x34
 800cc76:	bfde      	ittt	le
 800cc78:	f04f 32ff 	movle.w	r2, #4294967295
 800cc7c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800cc80:	408a      	lslle	r2, r1
 800cc82:	f04f 0a00 	mov.w	sl, #0
 800cc86:	bfcc      	ite	gt
 800cc88:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cc8c:	ea02 0b00 	andle.w	fp, r2, r0
 800cc90:	ec4b ab17 	vmov	d7, sl, fp
 800cc94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cc98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc9c:	d0a8      	beq.n	800cbf0 <_strtod_l+0x540>
 800cc9e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cca0:	9805      	ldr	r0, [sp, #20]
 800cca2:	f8cd 9000 	str.w	r9, [sp]
 800cca6:	462a      	mov	r2, r5
 800cca8:	f7ff f8e0 	bl	800be6c <__s2b>
 800ccac:	9007      	str	r0, [sp, #28]
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	f43f af0a 	beq.w	800cac8 <_strtod_l+0x418>
 800ccb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccb6:	1b3f      	subs	r7, r7, r4
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	bfb4      	ite	lt
 800ccbc:	463b      	movlt	r3, r7
 800ccbe:	2300      	movge	r3, #0
 800ccc0:	930a      	str	r3, [sp, #40]	@ 0x28
 800ccc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccc4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800cef0 <_strtod_l+0x840>
 800ccc8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cccc:	2400      	movs	r4, #0
 800ccce:	930d      	str	r3, [sp, #52]	@ 0x34
 800ccd0:	4625      	mov	r5, r4
 800ccd2:	9b07      	ldr	r3, [sp, #28]
 800ccd4:	9805      	ldr	r0, [sp, #20]
 800ccd6:	6859      	ldr	r1, [r3, #4]
 800ccd8:	f7ff f820 	bl	800bd1c <_Balloc>
 800ccdc:	4606      	mov	r6, r0
 800ccde:	2800      	cmp	r0, #0
 800cce0:	f43f aef6 	beq.w	800cad0 <_strtod_l+0x420>
 800cce4:	9b07      	ldr	r3, [sp, #28]
 800cce6:	691a      	ldr	r2, [r3, #16]
 800cce8:	ec4b ab19 	vmov	d9, sl, fp
 800ccec:	3202      	adds	r2, #2
 800ccee:	f103 010c 	add.w	r1, r3, #12
 800ccf2:	0092      	lsls	r2, r2, #2
 800ccf4:	300c      	adds	r0, #12
 800ccf6:	f7fe f91e 	bl	800af36 <memcpy>
 800ccfa:	eeb0 0b49 	vmov.f64	d0, d9
 800ccfe:	9805      	ldr	r0, [sp, #20]
 800cd00:	aa14      	add	r2, sp, #80	@ 0x50
 800cd02:	a913      	add	r1, sp, #76	@ 0x4c
 800cd04:	f7ff fbee 	bl	800c4e4 <__d2b>
 800cd08:	9012      	str	r0, [sp, #72]	@ 0x48
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	f43f aee0 	beq.w	800cad0 <_strtod_l+0x420>
 800cd10:	9805      	ldr	r0, [sp, #20]
 800cd12:	2101      	movs	r1, #1
 800cd14:	f7ff f940 	bl	800bf98 <__i2b>
 800cd18:	4605      	mov	r5, r0
 800cd1a:	b940      	cbnz	r0, 800cd2e <_strtod_l+0x67e>
 800cd1c:	2500      	movs	r5, #0
 800cd1e:	e6d7      	b.n	800cad0 <_strtod_l+0x420>
 800cd20:	f04f 31ff 	mov.w	r1, #4294967295
 800cd24:	fa01 f202 	lsl.w	r2, r1, r2
 800cd28:	ea02 0a0a 	and.w	sl, r2, sl
 800cd2c:	e7b0      	b.n	800cc90 <_strtod_l+0x5e0>
 800cd2e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800cd30:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cd32:	2f00      	cmp	r7, #0
 800cd34:	bfab      	itete	ge
 800cd36:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800cd38:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800cd3a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800cd3e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800cd42:	bfac      	ite	ge
 800cd44:	eb07 0903 	addge.w	r9, r7, r3
 800cd48:	eba3 0807 	sublt.w	r8, r3, r7
 800cd4c:	9b06      	ldr	r3, [sp, #24]
 800cd4e:	1aff      	subs	r7, r7, r3
 800cd50:	4417      	add	r7, r2
 800cd52:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800cd56:	4a6b      	ldr	r2, [pc, #428]	@ (800cf04 <_strtod_l+0x854>)
 800cd58:	3f01      	subs	r7, #1
 800cd5a:	4297      	cmp	r7, r2
 800cd5c:	da51      	bge.n	800ce02 <_strtod_l+0x752>
 800cd5e:	1bd1      	subs	r1, r2, r7
 800cd60:	291f      	cmp	r1, #31
 800cd62:	eba3 0301 	sub.w	r3, r3, r1
 800cd66:	f04f 0201 	mov.w	r2, #1
 800cd6a:	dc3e      	bgt.n	800cdea <_strtod_l+0x73a>
 800cd6c:	408a      	lsls	r2, r1
 800cd6e:	920c      	str	r2, [sp, #48]	@ 0x30
 800cd70:	2200      	movs	r2, #0
 800cd72:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cd74:	eb09 0703 	add.w	r7, r9, r3
 800cd78:	4498      	add	r8, r3
 800cd7a:	9b06      	ldr	r3, [sp, #24]
 800cd7c:	45b9      	cmp	r9, r7
 800cd7e:	4498      	add	r8, r3
 800cd80:	464b      	mov	r3, r9
 800cd82:	bfa8      	it	ge
 800cd84:	463b      	movge	r3, r7
 800cd86:	4543      	cmp	r3, r8
 800cd88:	bfa8      	it	ge
 800cd8a:	4643      	movge	r3, r8
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	bfc2      	ittt	gt
 800cd90:	1aff      	subgt	r7, r7, r3
 800cd92:	eba8 0803 	subgt.w	r8, r8, r3
 800cd96:	eba9 0903 	subgt.w	r9, r9, r3
 800cd9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	dd16      	ble.n	800cdce <_strtod_l+0x71e>
 800cda0:	4629      	mov	r1, r5
 800cda2:	9805      	ldr	r0, [sp, #20]
 800cda4:	461a      	mov	r2, r3
 800cda6:	f7ff f9b7 	bl	800c118 <__pow5mult>
 800cdaa:	4605      	mov	r5, r0
 800cdac:	2800      	cmp	r0, #0
 800cdae:	d0b5      	beq.n	800cd1c <_strtod_l+0x66c>
 800cdb0:	4601      	mov	r1, r0
 800cdb2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cdb4:	9805      	ldr	r0, [sp, #20]
 800cdb6:	f7ff f905 	bl	800bfc4 <__multiply>
 800cdba:	900f      	str	r0, [sp, #60]	@ 0x3c
 800cdbc:	2800      	cmp	r0, #0
 800cdbe:	f43f ae87 	beq.w	800cad0 <_strtod_l+0x420>
 800cdc2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800cdc4:	9805      	ldr	r0, [sp, #20]
 800cdc6:	f7fe ffe9 	bl	800bd9c <_Bfree>
 800cdca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdcc:	9312      	str	r3, [sp, #72]	@ 0x48
 800cdce:	2f00      	cmp	r7, #0
 800cdd0:	dc1b      	bgt.n	800ce0a <_strtod_l+0x75a>
 800cdd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	dd21      	ble.n	800ce1c <_strtod_l+0x76c>
 800cdd8:	4631      	mov	r1, r6
 800cdda:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cddc:	9805      	ldr	r0, [sp, #20]
 800cdde:	f7ff f99b 	bl	800c118 <__pow5mult>
 800cde2:	4606      	mov	r6, r0
 800cde4:	b9d0      	cbnz	r0, 800ce1c <_strtod_l+0x76c>
 800cde6:	2600      	movs	r6, #0
 800cde8:	e672      	b.n	800cad0 <_strtod_l+0x420>
 800cdea:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800cdee:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800cdf2:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800cdf6:	37e2      	adds	r7, #226	@ 0xe2
 800cdf8:	fa02 f107 	lsl.w	r1, r2, r7
 800cdfc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cdfe:	920c      	str	r2, [sp, #48]	@ 0x30
 800ce00:	e7b8      	b.n	800cd74 <_strtod_l+0x6c4>
 800ce02:	2200      	movs	r2, #0
 800ce04:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ce06:	2201      	movs	r2, #1
 800ce08:	e7f9      	b.n	800cdfe <_strtod_l+0x74e>
 800ce0a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ce0c:	9805      	ldr	r0, [sp, #20]
 800ce0e:	463a      	mov	r2, r7
 800ce10:	f7ff f9dc 	bl	800c1cc <__lshift>
 800ce14:	9012      	str	r0, [sp, #72]	@ 0x48
 800ce16:	2800      	cmp	r0, #0
 800ce18:	d1db      	bne.n	800cdd2 <_strtod_l+0x722>
 800ce1a:	e659      	b.n	800cad0 <_strtod_l+0x420>
 800ce1c:	f1b8 0f00 	cmp.w	r8, #0
 800ce20:	dd07      	ble.n	800ce32 <_strtod_l+0x782>
 800ce22:	4631      	mov	r1, r6
 800ce24:	9805      	ldr	r0, [sp, #20]
 800ce26:	4642      	mov	r2, r8
 800ce28:	f7ff f9d0 	bl	800c1cc <__lshift>
 800ce2c:	4606      	mov	r6, r0
 800ce2e:	2800      	cmp	r0, #0
 800ce30:	d0d9      	beq.n	800cde6 <_strtod_l+0x736>
 800ce32:	f1b9 0f00 	cmp.w	r9, #0
 800ce36:	dd08      	ble.n	800ce4a <_strtod_l+0x79a>
 800ce38:	4629      	mov	r1, r5
 800ce3a:	9805      	ldr	r0, [sp, #20]
 800ce3c:	464a      	mov	r2, r9
 800ce3e:	f7ff f9c5 	bl	800c1cc <__lshift>
 800ce42:	4605      	mov	r5, r0
 800ce44:	2800      	cmp	r0, #0
 800ce46:	f43f ae43 	beq.w	800cad0 <_strtod_l+0x420>
 800ce4a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ce4c:	9805      	ldr	r0, [sp, #20]
 800ce4e:	4632      	mov	r2, r6
 800ce50:	f7ff fa44 	bl	800c2dc <__mdiff>
 800ce54:	4604      	mov	r4, r0
 800ce56:	2800      	cmp	r0, #0
 800ce58:	f43f ae3a 	beq.w	800cad0 <_strtod_l+0x420>
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800ce62:	60c3      	str	r3, [r0, #12]
 800ce64:	4629      	mov	r1, r5
 800ce66:	f7ff fa1d 	bl	800c2a4 <__mcmp>
 800ce6a:	2800      	cmp	r0, #0
 800ce6c:	da4e      	bge.n	800cf0c <_strtod_l+0x85c>
 800ce6e:	ea58 080a 	orrs.w	r8, r8, sl
 800ce72:	d174      	bne.n	800cf5e <_strtod_l+0x8ae>
 800ce74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d170      	bne.n	800cf5e <_strtod_l+0x8ae>
 800ce7c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ce80:	0d1b      	lsrs	r3, r3, #20
 800ce82:	051b      	lsls	r3, r3, #20
 800ce84:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ce88:	d969      	bls.n	800cf5e <_strtod_l+0x8ae>
 800ce8a:	6963      	ldr	r3, [r4, #20]
 800ce8c:	b913      	cbnz	r3, 800ce94 <_strtod_l+0x7e4>
 800ce8e:	6923      	ldr	r3, [r4, #16]
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	dd64      	ble.n	800cf5e <_strtod_l+0x8ae>
 800ce94:	4621      	mov	r1, r4
 800ce96:	2201      	movs	r2, #1
 800ce98:	9805      	ldr	r0, [sp, #20]
 800ce9a:	f7ff f997 	bl	800c1cc <__lshift>
 800ce9e:	4629      	mov	r1, r5
 800cea0:	4604      	mov	r4, r0
 800cea2:	f7ff f9ff 	bl	800c2a4 <__mcmp>
 800cea6:	2800      	cmp	r0, #0
 800cea8:	dd59      	ble.n	800cf5e <_strtod_l+0x8ae>
 800ceaa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ceae:	9a06      	ldr	r2, [sp, #24]
 800ceb0:	0d1b      	lsrs	r3, r3, #20
 800ceb2:	051b      	lsls	r3, r3, #20
 800ceb4:	2a00      	cmp	r2, #0
 800ceb6:	d070      	beq.n	800cf9a <_strtod_l+0x8ea>
 800ceb8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cebc:	d86d      	bhi.n	800cf9a <_strtod_l+0x8ea>
 800cebe:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cec2:	f67f ae99 	bls.w	800cbf8 <_strtod_l+0x548>
 800cec6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800cef8 <_strtod_l+0x848>
 800ceca:	ec4b ab16 	vmov	d6, sl, fp
 800cece:	4b0e      	ldr	r3, [pc, #56]	@ (800cf08 <_strtod_l+0x858>)
 800ced0:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ced4:	ee17 2a90 	vmov	r2, s15
 800ced8:	4013      	ands	r3, r2
 800ceda:	ec5b ab17 	vmov	sl, fp, d7
 800cede:	2b00      	cmp	r3, #0
 800cee0:	f47f ae01 	bne.w	800cae6 <_strtod_l+0x436>
 800cee4:	9a05      	ldr	r2, [sp, #20]
 800cee6:	2322      	movs	r3, #34	@ 0x22
 800cee8:	6013      	str	r3, [r2, #0]
 800ceea:	e5fc      	b.n	800cae6 <_strtod_l+0x436>
 800ceec:	f3af 8000 	nop.w
 800cef0:	ffc00000 	.word	0xffc00000
 800cef4:	41dfffff 	.word	0x41dfffff
 800cef8:	00000000 	.word	0x00000000
 800cefc:	39500000 	.word	0x39500000
 800cf00:	0800e830 	.word	0x0800e830
 800cf04:	fffffc02 	.word	0xfffffc02
 800cf08:	7ff00000 	.word	0x7ff00000
 800cf0c:	46d9      	mov	r9, fp
 800cf0e:	d15d      	bne.n	800cfcc <_strtod_l+0x91c>
 800cf10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf14:	f1b8 0f00 	cmp.w	r8, #0
 800cf18:	d02a      	beq.n	800cf70 <_strtod_l+0x8c0>
 800cf1a:	4aab      	ldr	r2, [pc, #684]	@ (800d1c8 <_strtod_l+0xb18>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d12a      	bne.n	800cf76 <_strtod_l+0x8c6>
 800cf20:	9b06      	ldr	r3, [sp, #24]
 800cf22:	4652      	mov	r2, sl
 800cf24:	b1fb      	cbz	r3, 800cf66 <_strtod_l+0x8b6>
 800cf26:	4ba9      	ldr	r3, [pc, #676]	@ (800d1cc <_strtod_l+0xb1c>)
 800cf28:	ea0b 0303 	and.w	r3, fp, r3
 800cf2c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cf30:	f04f 31ff 	mov.w	r1, #4294967295
 800cf34:	d81a      	bhi.n	800cf6c <_strtod_l+0x8bc>
 800cf36:	0d1b      	lsrs	r3, r3, #20
 800cf38:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cf3c:	fa01 f303 	lsl.w	r3, r1, r3
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d118      	bne.n	800cf76 <_strtod_l+0x8c6>
 800cf44:	4ba2      	ldr	r3, [pc, #648]	@ (800d1d0 <_strtod_l+0xb20>)
 800cf46:	4599      	cmp	r9, r3
 800cf48:	d102      	bne.n	800cf50 <_strtod_l+0x8a0>
 800cf4a:	3201      	adds	r2, #1
 800cf4c:	f43f adc0 	beq.w	800cad0 <_strtod_l+0x420>
 800cf50:	4b9e      	ldr	r3, [pc, #632]	@ (800d1cc <_strtod_l+0xb1c>)
 800cf52:	ea09 0303 	and.w	r3, r9, r3
 800cf56:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800cf5a:	f04f 0a00 	mov.w	sl, #0
 800cf5e:	9b06      	ldr	r3, [sp, #24]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d1b0      	bne.n	800cec6 <_strtod_l+0x816>
 800cf64:	e5bf      	b.n	800cae6 <_strtod_l+0x436>
 800cf66:	f04f 33ff 	mov.w	r3, #4294967295
 800cf6a:	e7e9      	b.n	800cf40 <_strtod_l+0x890>
 800cf6c:	460b      	mov	r3, r1
 800cf6e:	e7e7      	b.n	800cf40 <_strtod_l+0x890>
 800cf70:	ea53 030a 	orrs.w	r3, r3, sl
 800cf74:	d099      	beq.n	800ceaa <_strtod_l+0x7fa>
 800cf76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf78:	b1c3      	cbz	r3, 800cfac <_strtod_l+0x8fc>
 800cf7a:	ea13 0f09 	tst.w	r3, r9
 800cf7e:	d0ee      	beq.n	800cf5e <_strtod_l+0x8ae>
 800cf80:	9a06      	ldr	r2, [sp, #24]
 800cf82:	4650      	mov	r0, sl
 800cf84:	4659      	mov	r1, fp
 800cf86:	f1b8 0f00 	cmp.w	r8, #0
 800cf8a:	d013      	beq.n	800cfb4 <_strtod_l+0x904>
 800cf8c:	f7ff fb75 	bl	800c67a <sulp>
 800cf90:	ee39 7b00 	vadd.f64	d7, d9, d0
 800cf94:	ec5b ab17 	vmov	sl, fp, d7
 800cf98:	e7e1      	b.n	800cf5e <_strtod_l+0x8ae>
 800cf9a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cf9e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cfa2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cfa6:	f04f 3aff 	mov.w	sl, #4294967295
 800cfaa:	e7d8      	b.n	800cf5e <_strtod_l+0x8ae>
 800cfac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cfae:	ea13 0f0a 	tst.w	r3, sl
 800cfb2:	e7e4      	b.n	800cf7e <_strtod_l+0x8ce>
 800cfb4:	f7ff fb61 	bl	800c67a <sulp>
 800cfb8:	ee39 0b40 	vsub.f64	d0, d9, d0
 800cfbc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800cfc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfc4:	ec5b ab10 	vmov	sl, fp, d0
 800cfc8:	d1c9      	bne.n	800cf5e <_strtod_l+0x8ae>
 800cfca:	e615      	b.n	800cbf8 <_strtod_l+0x548>
 800cfcc:	4629      	mov	r1, r5
 800cfce:	4620      	mov	r0, r4
 800cfd0:	f7ff fae0 	bl	800c594 <__ratio>
 800cfd4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800cfd8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800cfdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfe0:	d85d      	bhi.n	800d09e <_strtod_l+0x9ee>
 800cfe2:	f1b8 0f00 	cmp.w	r8, #0
 800cfe6:	d164      	bne.n	800d0b2 <_strtod_l+0xa02>
 800cfe8:	f1ba 0f00 	cmp.w	sl, #0
 800cfec:	d14b      	bne.n	800d086 <_strtod_l+0x9d6>
 800cfee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cff2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d160      	bne.n	800d0bc <_strtod_l+0xa0c>
 800cffa:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800cffe:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800d002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d006:	d401      	bmi.n	800d00c <_strtod_l+0x95c>
 800d008:	ee20 8b08 	vmul.f64	d8, d0, d8
 800d00c:	eeb1 ab48 	vneg.f64	d10, d8
 800d010:	486e      	ldr	r0, [pc, #440]	@ (800d1cc <_strtod_l+0xb1c>)
 800d012:	4970      	ldr	r1, [pc, #448]	@ (800d1d4 <_strtod_l+0xb24>)
 800d014:	ea09 0700 	and.w	r7, r9, r0
 800d018:	428f      	cmp	r7, r1
 800d01a:	ec53 2b1a 	vmov	r2, r3, d10
 800d01e:	d17d      	bne.n	800d11c <_strtod_l+0xa6c>
 800d020:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800d024:	ec4b ab1c 	vmov	d12, sl, fp
 800d028:	eeb0 0b4c 	vmov.f64	d0, d12
 800d02c:	f7ff f9ea 	bl	800c404 <__ulp>
 800d030:	4866      	ldr	r0, [pc, #408]	@ (800d1cc <_strtod_l+0xb1c>)
 800d032:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800d036:	ee1c 3a90 	vmov	r3, s25
 800d03a:	4a67      	ldr	r2, [pc, #412]	@ (800d1d8 <_strtod_l+0xb28>)
 800d03c:	ea03 0100 	and.w	r1, r3, r0
 800d040:	4291      	cmp	r1, r2
 800d042:	ec5b ab1c 	vmov	sl, fp, d12
 800d046:	d93c      	bls.n	800d0c2 <_strtod_l+0xa12>
 800d048:	ee19 2a90 	vmov	r2, s19
 800d04c:	4b60      	ldr	r3, [pc, #384]	@ (800d1d0 <_strtod_l+0xb20>)
 800d04e:	429a      	cmp	r2, r3
 800d050:	d104      	bne.n	800d05c <_strtod_l+0x9ac>
 800d052:	ee19 3a10 	vmov	r3, s18
 800d056:	3301      	adds	r3, #1
 800d058:	f43f ad3a 	beq.w	800cad0 <_strtod_l+0x420>
 800d05c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800d1d0 <_strtod_l+0xb20>
 800d060:	f04f 3aff 	mov.w	sl, #4294967295
 800d064:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d066:	9805      	ldr	r0, [sp, #20]
 800d068:	f7fe fe98 	bl	800bd9c <_Bfree>
 800d06c:	9805      	ldr	r0, [sp, #20]
 800d06e:	4631      	mov	r1, r6
 800d070:	f7fe fe94 	bl	800bd9c <_Bfree>
 800d074:	9805      	ldr	r0, [sp, #20]
 800d076:	4629      	mov	r1, r5
 800d078:	f7fe fe90 	bl	800bd9c <_Bfree>
 800d07c:	9805      	ldr	r0, [sp, #20]
 800d07e:	4621      	mov	r1, r4
 800d080:	f7fe fe8c 	bl	800bd9c <_Bfree>
 800d084:	e625      	b.n	800ccd2 <_strtod_l+0x622>
 800d086:	f1ba 0f01 	cmp.w	sl, #1
 800d08a:	d103      	bne.n	800d094 <_strtod_l+0x9e4>
 800d08c:	f1bb 0f00 	cmp.w	fp, #0
 800d090:	f43f adb2 	beq.w	800cbf8 <_strtod_l+0x548>
 800d094:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800d098:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800d09c:	e7b8      	b.n	800d010 <_strtod_l+0x960>
 800d09e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800d0a2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800d0a6:	f1b8 0f00 	cmp.w	r8, #0
 800d0aa:	d0af      	beq.n	800d00c <_strtod_l+0x95c>
 800d0ac:	eeb0 ab48 	vmov.f64	d10, d8
 800d0b0:	e7ae      	b.n	800d010 <_strtod_l+0x960>
 800d0b2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800d0b6:	eeb0 8b4a 	vmov.f64	d8, d10
 800d0ba:	e7a9      	b.n	800d010 <_strtod_l+0x960>
 800d0bc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800d0c0:	e7a6      	b.n	800d010 <_strtod_l+0x960>
 800d0c2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d0c6:	9b06      	ldr	r3, [sp, #24]
 800d0c8:	46d9      	mov	r9, fp
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d1ca      	bne.n	800d064 <_strtod_l+0x9b4>
 800d0ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d0d2:	0d1b      	lsrs	r3, r3, #20
 800d0d4:	051b      	lsls	r3, r3, #20
 800d0d6:	429f      	cmp	r7, r3
 800d0d8:	d1c4      	bne.n	800d064 <_strtod_l+0x9b4>
 800d0da:	ec51 0b18 	vmov	r0, r1, d8
 800d0de:	f7f3 fadb 	bl	8000698 <__aeabi_d2lz>
 800d0e2:	f7f3 fa93 	bl	800060c <__aeabi_l2d>
 800d0e6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800d0ea:	ec41 0b17 	vmov	d7, r0, r1
 800d0ee:	ea49 090a 	orr.w	r9, r9, sl
 800d0f2:	ea59 0908 	orrs.w	r9, r9, r8
 800d0f6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800d0fa:	d03c      	beq.n	800d176 <_strtod_l+0xac6>
 800d0fc:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800d1b0 <_strtod_l+0xb00>
 800d100:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d108:	f53f aced 	bmi.w	800cae6 <_strtod_l+0x436>
 800d10c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800d1b8 <_strtod_l+0xb08>
 800d110:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d118:	dda4      	ble.n	800d064 <_strtod_l+0x9b4>
 800d11a:	e4e4      	b.n	800cae6 <_strtod_l+0x436>
 800d11c:	9906      	ldr	r1, [sp, #24]
 800d11e:	b1e1      	cbz	r1, 800d15a <_strtod_l+0xaaa>
 800d120:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800d124:	d819      	bhi.n	800d15a <_strtod_l+0xaaa>
 800d126:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800d12a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d12e:	d811      	bhi.n	800d154 <_strtod_l+0xaa4>
 800d130:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800d134:	ee18 3a10 	vmov	r3, s16
 800d138:	2b01      	cmp	r3, #1
 800d13a:	bf38      	it	cc
 800d13c:	2301      	movcc	r3, #1
 800d13e:	ee08 3a10 	vmov	s16, r3
 800d142:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800d146:	f1b8 0f00 	cmp.w	r8, #0
 800d14a:	d111      	bne.n	800d170 <_strtod_l+0xac0>
 800d14c:	eeb1 7b48 	vneg.f64	d7, d8
 800d150:	ec53 2b17 	vmov	r2, r3, d7
 800d154:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800d158:	1bcb      	subs	r3, r1, r7
 800d15a:	eeb0 0b49 	vmov.f64	d0, d9
 800d15e:	ec43 2b1a 	vmov	d10, r2, r3
 800d162:	f7ff f94f 	bl	800c404 <__ulp>
 800d166:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800d16a:	ec5b ab19 	vmov	sl, fp, d9
 800d16e:	e7aa      	b.n	800d0c6 <_strtod_l+0xa16>
 800d170:	eeb0 7b48 	vmov.f64	d7, d8
 800d174:	e7ec      	b.n	800d150 <_strtod_l+0xaa0>
 800d176:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800d1c0 <_strtod_l+0xb10>
 800d17a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d182:	f57f af6f 	bpl.w	800d064 <_strtod_l+0x9b4>
 800d186:	e4ae      	b.n	800cae6 <_strtod_l+0x436>
 800d188:	2300      	movs	r3, #0
 800d18a:	9308      	str	r3, [sp, #32]
 800d18c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d18e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d190:	6013      	str	r3, [r2, #0]
 800d192:	f7ff bacc 	b.w	800c72e <_strtod_l+0x7e>
 800d196:	2a65      	cmp	r2, #101	@ 0x65
 800d198:	f43f abbc 	beq.w	800c914 <_strtod_l+0x264>
 800d19c:	2a45      	cmp	r2, #69	@ 0x45
 800d19e:	f43f abb9 	beq.w	800c914 <_strtod_l+0x264>
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	9306      	str	r3, [sp, #24]
 800d1a6:	f7ff bbf0 	b.w	800c98a <_strtod_l+0x2da>
 800d1aa:	bf00      	nop
 800d1ac:	f3af 8000 	nop.w
 800d1b0:	94a03595 	.word	0x94a03595
 800d1b4:	3fdfffff 	.word	0x3fdfffff
 800d1b8:	35afe535 	.word	0x35afe535
 800d1bc:	3fe00000 	.word	0x3fe00000
 800d1c0:	94a03595 	.word	0x94a03595
 800d1c4:	3fcfffff 	.word	0x3fcfffff
 800d1c8:	000fffff 	.word	0x000fffff
 800d1cc:	7ff00000 	.word	0x7ff00000
 800d1d0:	7fefffff 	.word	0x7fefffff
 800d1d4:	7fe00000 	.word	0x7fe00000
 800d1d8:	7c9fffff 	.word	0x7c9fffff

0800d1dc <_strtod_r>:
 800d1dc:	4b01      	ldr	r3, [pc, #4]	@ (800d1e4 <_strtod_r+0x8>)
 800d1de:	f7ff ba67 	b.w	800c6b0 <_strtod_l>
 800d1e2:	bf00      	nop
 800d1e4:	2000006c 	.word	0x2000006c

0800d1e8 <_strtol_l.constprop.0>:
 800d1e8:	2b24      	cmp	r3, #36	@ 0x24
 800d1ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1ee:	4686      	mov	lr, r0
 800d1f0:	4690      	mov	r8, r2
 800d1f2:	d801      	bhi.n	800d1f8 <_strtol_l.constprop.0+0x10>
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d106      	bne.n	800d206 <_strtol_l.constprop.0+0x1e>
 800d1f8:	f7fd fe70 	bl	800aedc <__errno>
 800d1fc:	2316      	movs	r3, #22
 800d1fe:	6003      	str	r3, [r0, #0]
 800d200:	2000      	movs	r0, #0
 800d202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d206:	4834      	ldr	r0, [pc, #208]	@ (800d2d8 <_strtol_l.constprop.0+0xf0>)
 800d208:	460d      	mov	r5, r1
 800d20a:	462a      	mov	r2, r5
 800d20c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d210:	5d06      	ldrb	r6, [r0, r4]
 800d212:	f016 0608 	ands.w	r6, r6, #8
 800d216:	d1f8      	bne.n	800d20a <_strtol_l.constprop.0+0x22>
 800d218:	2c2d      	cmp	r4, #45	@ 0x2d
 800d21a:	d12d      	bne.n	800d278 <_strtol_l.constprop.0+0x90>
 800d21c:	782c      	ldrb	r4, [r5, #0]
 800d21e:	2601      	movs	r6, #1
 800d220:	1c95      	adds	r5, r2, #2
 800d222:	f033 0210 	bics.w	r2, r3, #16
 800d226:	d109      	bne.n	800d23c <_strtol_l.constprop.0+0x54>
 800d228:	2c30      	cmp	r4, #48	@ 0x30
 800d22a:	d12a      	bne.n	800d282 <_strtol_l.constprop.0+0x9a>
 800d22c:	782a      	ldrb	r2, [r5, #0]
 800d22e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d232:	2a58      	cmp	r2, #88	@ 0x58
 800d234:	d125      	bne.n	800d282 <_strtol_l.constprop.0+0x9a>
 800d236:	786c      	ldrb	r4, [r5, #1]
 800d238:	2310      	movs	r3, #16
 800d23a:	3502      	adds	r5, #2
 800d23c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d240:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d244:	2200      	movs	r2, #0
 800d246:	fbbc f9f3 	udiv	r9, ip, r3
 800d24a:	4610      	mov	r0, r2
 800d24c:	fb03 ca19 	mls	sl, r3, r9, ip
 800d250:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d254:	2f09      	cmp	r7, #9
 800d256:	d81b      	bhi.n	800d290 <_strtol_l.constprop.0+0xa8>
 800d258:	463c      	mov	r4, r7
 800d25a:	42a3      	cmp	r3, r4
 800d25c:	dd27      	ble.n	800d2ae <_strtol_l.constprop.0+0xc6>
 800d25e:	1c57      	adds	r7, r2, #1
 800d260:	d007      	beq.n	800d272 <_strtol_l.constprop.0+0x8a>
 800d262:	4581      	cmp	r9, r0
 800d264:	d320      	bcc.n	800d2a8 <_strtol_l.constprop.0+0xc0>
 800d266:	d101      	bne.n	800d26c <_strtol_l.constprop.0+0x84>
 800d268:	45a2      	cmp	sl, r4
 800d26a:	db1d      	blt.n	800d2a8 <_strtol_l.constprop.0+0xc0>
 800d26c:	fb00 4003 	mla	r0, r0, r3, r4
 800d270:	2201      	movs	r2, #1
 800d272:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d276:	e7eb      	b.n	800d250 <_strtol_l.constprop.0+0x68>
 800d278:	2c2b      	cmp	r4, #43	@ 0x2b
 800d27a:	bf04      	itt	eq
 800d27c:	782c      	ldrbeq	r4, [r5, #0]
 800d27e:	1c95      	addeq	r5, r2, #2
 800d280:	e7cf      	b.n	800d222 <_strtol_l.constprop.0+0x3a>
 800d282:	2b00      	cmp	r3, #0
 800d284:	d1da      	bne.n	800d23c <_strtol_l.constprop.0+0x54>
 800d286:	2c30      	cmp	r4, #48	@ 0x30
 800d288:	bf0c      	ite	eq
 800d28a:	2308      	moveq	r3, #8
 800d28c:	230a      	movne	r3, #10
 800d28e:	e7d5      	b.n	800d23c <_strtol_l.constprop.0+0x54>
 800d290:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d294:	2f19      	cmp	r7, #25
 800d296:	d801      	bhi.n	800d29c <_strtol_l.constprop.0+0xb4>
 800d298:	3c37      	subs	r4, #55	@ 0x37
 800d29a:	e7de      	b.n	800d25a <_strtol_l.constprop.0+0x72>
 800d29c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d2a0:	2f19      	cmp	r7, #25
 800d2a2:	d804      	bhi.n	800d2ae <_strtol_l.constprop.0+0xc6>
 800d2a4:	3c57      	subs	r4, #87	@ 0x57
 800d2a6:	e7d8      	b.n	800d25a <_strtol_l.constprop.0+0x72>
 800d2a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ac:	e7e1      	b.n	800d272 <_strtol_l.constprop.0+0x8a>
 800d2ae:	1c53      	adds	r3, r2, #1
 800d2b0:	d108      	bne.n	800d2c4 <_strtol_l.constprop.0+0xdc>
 800d2b2:	2322      	movs	r3, #34	@ 0x22
 800d2b4:	f8ce 3000 	str.w	r3, [lr]
 800d2b8:	4660      	mov	r0, ip
 800d2ba:	f1b8 0f00 	cmp.w	r8, #0
 800d2be:	d0a0      	beq.n	800d202 <_strtol_l.constprop.0+0x1a>
 800d2c0:	1e69      	subs	r1, r5, #1
 800d2c2:	e006      	b.n	800d2d2 <_strtol_l.constprop.0+0xea>
 800d2c4:	b106      	cbz	r6, 800d2c8 <_strtol_l.constprop.0+0xe0>
 800d2c6:	4240      	negs	r0, r0
 800d2c8:	f1b8 0f00 	cmp.w	r8, #0
 800d2cc:	d099      	beq.n	800d202 <_strtol_l.constprop.0+0x1a>
 800d2ce:	2a00      	cmp	r2, #0
 800d2d0:	d1f6      	bne.n	800d2c0 <_strtol_l.constprop.0+0xd8>
 800d2d2:	f8c8 1000 	str.w	r1, [r8]
 800d2d6:	e794      	b.n	800d202 <_strtol_l.constprop.0+0x1a>
 800d2d8:	0800e859 	.word	0x0800e859

0800d2dc <_strtol_r>:
 800d2dc:	f7ff bf84 	b.w	800d1e8 <_strtol_l.constprop.0>

0800d2e0 <__ssputs_r>:
 800d2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2e4:	688e      	ldr	r6, [r1, #8]
 800d2e6:	461f      	mov	r7, r3
 800d2e8:	42be      	cmp	r6, r7
 800d2ea:	680b      	ldr	r3, [r1, #0]
 800d2ec:	4682      	mov	sl, r0
 800d2ee:	460c      	mov	r4, r1
 800d2f0:	4690      	mov	r8, r2
 800d2f2:	d82d      	bhi.n	800d350 <__ssputs_r+0x70>
 800d2f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d2f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d2fc:	d026      	beq.n	800d34c <__ssputs_r+0x6c>
 800d2fe:	6965      	ldr	r5, [r4, #20]
 800d300:	6909      	ldr	r1, [r1, #16]
 800d302:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d306:	eba3 0901 	sub.w	r9, r3, r1
 800d30a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d30e:	1c7b      	adds	r3, r7, #1
 800d310:	444b      	add	r3, r9
 800d312:	106d      	asrs	r5, r5, #1
 800d314:	429d      	cmp	r5, r3
 800d316:	bf38      	it	cc
 800d318:	461d      	movcc	r5, r3
 800d31a:	0553      	lsls	r3, r2, #21
 800d31c:	d527      	bpl.n	800d36e <__ssputs_r+0x8e>
 800d31e:	4629      	mov	r1, r5
 800d320:	f7fe fc70 	bl	800bc04 <_malloc_r>
 800d324:	4606      	mov	r6, r0
 800d326:	b360      	cbz	r0, 800d382 <__ssputs_r+0xa2>
 800d328:	6921      	ldr	r1, [r4, #16]
 800d32a:	464a      	mov	r2, r9
 800d32c:	f7fd fe03 	bl	800af36 <memcpy>
 800d330:	89a3      	ldrh	r3, [r4, #12]
 800d332:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d33a:	81a3      	strh	r3, [r4, #12]
 800d33c:	6126      	str	r6, [r4, #16]
 800d33e:	6165      	str	r5, [r4, #20]
 800d340:	444e      	add	r6, r9
 800d342:	eba5 0509 	sub.w	r5, r5, r9
 800d346:	6026      	str	r6, [r4, #0]
 800d348:	60a5      	str	r5, [r4, #8]
 800d34a:	463e      	mov	r6, r7
 800d34c:	42be      	cmp	r6, r7
 800d34e:	d900      	bls.n	800d352 <__ssputs_r+0x72>
 800d350:	463e      	mov	r6, r7
 800d352:	6820      	ldr	r0, [r4, #0]
 800d354:	4632      	mov	r2, r6
 800d356:	4641      	mov	r1, r8
 800d358:	f000 f9c6 	bl	800d6e8 <memmove>
 800d35c:	68a3      	ldr	r3, [r4, #8]
 800d35e:	1b9b      	subs	r3, r3, r6
 800d360:	60a3      	str	r3, [r4, #8]
 800d362:	6823      	ldr	r3, [r4, #0]
 800d364:	4433      	add	r3, r6
 800d366:	6023      	str	r3, [r4, #0]
 800d368:	2000      	movs	r0, #0
 800d36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d36e:	462a      	mov	r2, r5
 800d370:	f000 fd7b 	bl	800de6a <_realloc_r>
 800d374:	4606      	mov	r6, r0
 800d376:	2800      	cmp	r0, #0
 800d378:	d1e0      	bne.n	800d33c <__ssputs_r+0x5c>
 800d37a:	6921      	ldr	r1, [r4, #16]
 800d37c:	4650      	mov	r0, sl
 800d37e:	f7fe fbcd 	bl	800bb1c <_free_r>
 800d382:	230c      	movs	r3, #12
 800d384:	f8ca 3000 	str.w	r3, [sl]
 800d388:	89a3      	ldrh	r3, [r4, #12]
 800d38a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d38e:	81a3      	strh	r3, [r4, #12]
 800d390:	f04f 30ff 	mov.w	r0, #4294967295
 800d394:	e7e9      	b.n	800d36a <__ssputs_r+0x8a>
	...

0800d398 <_svfiprintf_r>:
 800d398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d39c:	4698      	mov	r8, r3
 800d39e:	898b      	ldrh	r3, [r1, #12]
 800d3a0:	061b      	lsls	r3, r3, #24
 800d3a2:	b09d      	sub	sp, #116	@ 0x74
 800d3a4:	4607      	mov	r7, r0
 800d3a6:	460d      	mov	r5, r1
 800d3a8:	4614      	mov	r4, r2
 800d3aa:	d510      	bpl.n	800d3ce <_svfiprintf_r+0x36>
 800d3ac:	690b      	ldr	r3, [r1, #16]
 800d3ae:	b973      	cbnz	r3, 800d3ce <_svfiprintf_r+0x36>
 800d3b0:	2140      	movs	r1, #64	@ 0x40
 800d3b2:	f7fe fc27 	bl	800bc04 <_malloc_r>
 800d3b6:	6028      	str	r0, [r5, #0]
 800d3b8:	6128      	str	r0, [r5, #16]
 800d3ba:	b930      	cbnz	r0, 800d3ca <_svfiprintf_r+0x32>
 800d3bc:	230c      	movs	r3, #12
 800d3be:	603b      	str	r3, [r7, #0]
 800d3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d3c4:	b01d      	add	sp, #116	@ 0x74
 800d3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ca:	2340      	movs	r3, #64	@ 0x40
 800d3cc:	616b      	str	r3, [r5, #20]
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3d2:	2320      	movs	r3, #32
 800d3d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d3d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3dc:	2330      	movs	r3, #48	@ 0x30
 800d3de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d57c <_svfiprintf_r+0x1e4>
 800d3e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d3e6:	f04f 0901 	mov.w	r9, #1
 800d3ea:	4623      	mov	r3, r4
 800d3ec:	469a      	mov	sl, r3
 800d3ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3f2:	b10a      	cbz	r2, 800d3f8 <_svfiprintf_r+0x60>
 800d3f4:	2a25      	cmp	r2, #37	@ 0x25
 800d3f6:	d1f9      	bne.n	800d3ec <_svfiprintf_r+0x54>
 800d3f8:	ebba 0b04 	subs.w	fp, sl, r4
 800d3fc:	d00b      	beq.n	800d416 <_svfiprintf_r+0x7e>
 800d3fe:	465b      	mov	r3, fp
 800d400:	4622      	mov	r2, r4
 800d402:	4629      	mov	r1, r5
 800d404:	4638      	mov	r0, r7
 800d406:	f7ff ff6b 	bl	800d2e0 <__ssputs_r>
 800d40a:	3001      	adds	r0, #1
 800d40c:	f000 80a7 	beq.w	800d55e <_svfiprintf_r+0x1c6>
 800d410:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d412:	445a      	add	r2, fp
 800d414:	9209      	str	r2, [sp, #36]	@ 0x24
 800d416:	f89a 3000 	ldrb.w	r3, [sl]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	f000 809f 	beq.w	800d55e <_svfiprintf_r+0x1c6>
 800d420:	2300      	movs	r3, #0
 800d422:	f04f 32ff 	mov.w	r2, #4294967295
 800d426:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d42a:	f10a 0a01 	add.w	sl, sl, #1
 800d42e:	9304      	str	r3, [sp, #16]
 800d430:	9307      	str	r3, [sp, #28]
 800d432:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d436:	931a      	str	r3, [sp, #104]	@ 0x68
 800d438:	4654      	mov	r4, sl
 800d43a:	2205      	movs	r2, #5
 800d43c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d440:	484e      	ldr	r0, [pc, #312]	@ (800d57c <_svfiprintf_r+0x1e4>)
 800d442:	f7f2 fefd 	bl	8000240 <memchr>
 800d446:	9a04      	ldr	r2, [sp, #16]
 800d448:	b9d8      	cbnz	r0, 800d482 <_svfiprintf_r+0xea>
 800d44a:	06d0      	lsls	r0, r2, #27
 800d44c:	bf44      	itt	mi
 800d44e:	2320      	movmi	r3, #32
 800d450:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d454:	0711      	lsls	r1, r2, #28
 800d456:	bf44      	itt	mi
 800d458:	232b      	movmi	r3, #43	@ 0x2b
 800d45a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d45e:	f89a 3000 	ldrb.w	r3, [sl]
 800d462:	2b2a      	cmp	r3, #42	@ 0x2a
 800d464:	d015      	beq.n	800d492 <_svfiprintf_r+0xfa>
 800d466:	9a07      	ldr	r2, [sp, #28]
 800d468:	4654      	mov	r4, sl
 800d46a:	2000      	movs	r0, #0
 800d46c:	f04f 0c0a 	mov.w	ip, #10
 800d470:	4621      	mov	r1, r4
 800d472:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d476:	3b30      	subs	r3, #48	@ 0x30
 800d478:	2b09      	cmp	r3, #9
 800d47a:	d94b      	bls.n	800d514 <_svfiprintf_r+0x17c>
 800d47c:	b1b0      	cbz	r0, 800d4ac <_svfiprintf_r+0x114>
 800d47e:	9207      	str	r2, [sp, #28]
 800d480:	e014      	b.n	800d4ac <_svfiprintf_r+0x114>
 800d482:	eba0 0308 	sub.w	r3, r0, r8
 800d486:	fa09 f303 	lsl.w	r3, r9, r3
 800d48a:	4313      	orrs	r3, r2
 800d48c:	9304      	str	r3, [sp, #16]
 800d48e:	46a2      	mov	sl, r4
 800d490:	e7d2      	b.n	800d438 <_svfiprintf_r+0xa0>
 800d492:	9b03      	ldr	r3, [sp, #12]
 800d494:	1d19      	adds	r1, r3, #4
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	9103      	str	r1, [sp, #12]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	bfbb      	ittet	lt
 800d49e:	425b      	neglt	r3, r3
 800d4a0:	f042 0202 	orrlt.w	r2, r2, #2
 800d4a4:	9307      	strge	r3, [sp, #28]
 800d4a6:	9307      	strlt	r3, [sp, #28]
 800d4a8:	bfb8      	it	lt
 800d4aa:	9204      	strlt	r2, [sp, #16]
 800d4ac:	7823      	ldrb	r3, [r4, #0]
 800d4ae:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4b0:	d10a      	bne.n	800d4c8 <_svfiprintf_r+0x130>
 800d4b2:	7863      	ldrb	r3, [r4, #1]
 800d4b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4b6:	d132      	bne.n	800d51e <_svfiprintf_r+0x186>
 800d4b8:	9b03      	ldr	r3, [sp, #12]
 800d4ba:	1d1a      	adds	r2, r3, #4
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	9203      	str	r2, [sp, #12]
 800d4c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d4c4:	3402      	adds	r4, #2
 800d4c6:	9305      	str	r3, [sp, #20]
 800d4c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d58c <_svfiprintf_r+0x1f4>
 800d4cc:	7821      	ldrb	r1, [r4, #0]
 800d4ce:	2203      	movs	r2, #3
 800d4d0:	4650      	mov	r0, sl
 800d4d2:	f7f2 feb5 	bl	8000240 <memchr>
 800d4d6:	b138      	cbz	r0, 800d4e8 <_svfiprintf_r+0x150>
 800d4d8:	9b04      	ldr	r3, [sp, #16]
 800d4da:	eba0 000a 	sub.w	r0, r0, sl
 800d4de:	2240      	movs	r2, #64	@ 0x40
 800d4e0:	4082      	lsls	r2, r0
 800d4e2:	4313      	orrs	r3, r2
 800d4e4:	3401      	adds	r4, #1
 800d4e6:	9304      	str	r3, [sp, #16]
 800d4e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4ec:	4824      	ldr	r0, [pc, #144]	@ (800d580 <_svfiprintf_r+0x1e8>)
 800d4ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d4f2:	2206      	movs	r2, #6
 800d4f4:	f7f2 fea4 	bl	8000240 <memchr>
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	d036      	beq.n	800d56a <_svfiprintf_r+0x1d2>
 800d4fc:	4b21      	ldr	r3, [pc, #132]	@ (800d584 <_svfiprintf_r+0x1ec>)
 800d4fe:	bb1b      	cbnz	r3, 800d548 <_svfiprintf_r+0x1b0>
 800d500:	9b03      	ldr	r3, [sp, #12]
 800d502:	3307      	adds	r3, #7
 800d504:	f023 0307 	bic.w	r3, r3, #7
 800d508:	3308      	adds	r3, #8
 800d50a:	9303      	str	r3, [sp, #12]
 800d50c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d50e:	4433      	add	r3, r6
 800d510:	9309      	str	r3, [sp, #36]	@ 0x24
 800d512:	e76a      	b.n	800d3ea <_svfiprintf_r+0x52>
 800d514:	fb0c 3202 	mla	r2, ip, r2, r3
 800d518:	460c      	mov	r4, r1
 800d51a:	2001      	movs	r0, #1
 800d51c:	e7a8      	b.n	800d470 <_svfiprintf_r+0xd8>
 800d51e:	2300      	movs	r3, #0
 800d520:	3401      	adds	r4, #1
 800d522:	9305      	str	r3, [sp, #20]
 800d524:	4619      	mov	r1, r3
 800d526:	f04f 0c0a 	mov.w	ip, #10
 800d52a:	4620      	mov	r0, r4
 800d52c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d530:	3a30      	subs	r2, #48	@ 0x30
 800d532:	2a09      	cmp	r2, #9
 800d534:	d903      	bls.n	800d53e <_svfiprintf_r+0x1a6>
 800d536:	2b00      	cmp	r3, #0
 800d538:	d0c6      	beq.n	800d4c8 <_svfiprintf_r+0x130>
 800d53a:	9105      	str	r1, [sp, #20]
 800d53c:	e7c4      	b.n	800d4c8 <_svfiprintf_r+0x130>
 800d53e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d542:	4604      	mov	r4, r0
 800d544:	2301      	movs	r3, #1
 800d546:	e7f0      	b.n	800d52a <_svfiprintf_r+0x192>
 800d548:	ab03      	add	r3, sp, #12
 800d54a:	9300      	str	r3, [sp, #0]
 800d54c:	462a      	mov	r2, r5
 800d54e:	4b0e      	ldr	r3, [pc, #56]	@ (800d588 <_svfiprintf_r+0x1f0>)
 800d550:	a904      	add	r1, sp, #16
 800d552:	4638      	mov	r0, r7
 800d554:	f7fc fd40 	bl	8009fd8 <_printf_float>
 800d558:	1c42      	adds	r2, r0, #1
 800d55a:	4606      	mov	r6, r0
 800d55c:	d1d6      	bne.n	800d50c <_svfiprintf_r+0x174>
 800d55e:	89ab      	ldrh	r3, [r5, #12]
 800d560:	065b      	lsls	r3, r3, #25
 800d562:	f53f af2d 	bmi.w	800d3c0 <_svfiprintf_r+0x28>
 800d566:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d568:	e72c      	b.n	800d3c4 <_svfiprintf_r+0x2c>
 800d56a:	ab03      	add	r3, sp, #12
 800d56c:	9300      	str	r3, [sp, #0]
 800d56e:	462a      	mov	r2, r5
 800d570:	4b05      	ldr	r3, [pc, #20]	@ (800d588 <_svfiprintf_r+0x1f0>)
 800d572:	a904      	add	r1, sp, #16
 800d574:	4638      	mov	r0, r7
 800d576:	f7fc ffb7 	bl	800a4e8 <_printf_i>
 800d57a:	e7ed      	b.n	800d558 <_svfiprintf_r+0x1c0>
 800d57c:	0800e959 	.word	0x0800e959
 800d580:	0800e963 	.word	0x0800e963
 800d584:	08009fd9 	.word	0x08009fd9
 800d588:	0800d2e1 	.word	0x0800d2e1
 800d58c:	0800e95f 	.word	0x0800e95f

0800d590 <__sflush_r>:
 800d590:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d598:	0716      	lsls	r6, r2, #28
 800d59a:	4605      	mov	r5, r0
 800d59c:	460c      	mov	r4, r1
 800d59e:	d454      	bmi.n	800d64a <__sflush_r+0xba>
 800d5a0:	684b      	ldr	r3, [r1, #4]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	dc02      	bgt.n	800d5ac <__sflush_r+0x1c>
 800d5a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	dd48      	ble.n	800d63e <__sflush_r+0xae>
 800d5ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d5ae:	2e00      	cmp	r6, #0
 800d5b0:	d045      	beq.n	800d63e <__sflush_r+0xae>
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d5b8:	682f      	ldr	r7, [r5, #0]
 800d5ba:	6a21      	ldr	r1, [r4, #32]
 800d5bc:	602b      	str	r3, [r5, #0]
 800d5be:	d030      	beq.n	800d622 <__sflush_r+0x92>
 800d5c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d5c2:	89a3      	ldrh	r3, [r4, #12]
 800d5c4:	0759      	lsls	r1, r3, #29
 800d5c6:	d505      	bpl.n	800d5d4 <__sflush_r+0x44>
 800d5c8:	6863      	ldr	r3, [r4, #4]
 800d5ca:	1ad2      	subs	r2, r2, r3
 800d5cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d5ce:	b10b      	cbz	r3, 800d5d4 <__sflush_r+0x44>
 800d5d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d5d2:	1ad2      	subs	r2, r2, r3
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d5d8:	6a21      	ldr	r1, [r4, #32]
 800d5da:	4628      	mov	r0, r5
 800d5dc:	47b0      	blx	r6
 800d5de:	1c43      	adds	r3, r0, #1
 800d5e0:	89a3      	ldrh	r3, [r4, #12]
 800d5e2:	d106      	bne.n	800d5f2 <__sflush_r+0x62>
 800d5e4:	6829      	ldr	r1, [r5, #0]
 800d5e6:	291d      	cmp	r1, #29
 800d5e8:	d82b      	bhi.n	800d642 <__sflush_r+0xb2>
 800d5ea:	4a2a      	ldr	r2, [pc, #168]	@ (800d694 <__sflush_r+0x104>)
 800d5ec:	410a      	asrs	r2, r1
 800d5ee:	07d6      	lsls	r6, r2, #31
 800d5f0:	d427      	bmi.n	800d642 <__sflush_r+0xb2>
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	6062      	str	r2, [r4, #4]
 800d5f6:	04d9      	lsls	r1, r3, #19
 800d5f8:	6922      	ldr	r2, [r4, #16]
 800d5fa:	6022      	str	r2, [r4, #0]
 800d5fc:	d504      	bpl.n	800d608 <__sflush_r+0x78>
 800d5fe:	1c42      	adds	r2, r0, #1
 800d600:	d101      	bne.n	800d606 <__sflush_r+0x76>
 800d602:	682b      	ldr	r3, [r5, #0]
 800d604:	b903      	cbnz	r3, 800d608 <__sflush_r+0x78>
 800d606:	6560      	str	r0, [r4, #84]	@ 0x54
 800d608:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d60a:	602f      	str	r7, [r5, #0]
 800d60c:	b1b9      	cbz	r1, 800d63e <__sflush_r+0xae>
 800d60e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d612:	4299      	cmp	r1, r3
 800d614:	d002      	beq.n	800d61c <__sflush_r+0x8c>
 800d616:	4628      	mov	r0, r5
 800d618:	f7fe fa80 	bl	800bb1c <_free_r>
 800d61c:	2300      	movs	r3, #0
 800d61e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d620:	e00d      	b.n	800d63e <__sflush_r+0xae>
 800d622:	2301      	movs	r3, #1
 800d624:	4628      	mov	r0, r5
 800d626:	47b0      	blx	r6
 800d628:	4602      	mov	r2, r0
 800d62a:	1c50      	adds	r0, r2, #1
 800d62c:	d1c9      	bne.n	800d5c2 <__sflush_r+0x32>
 800d62e:	682b      	ldr	r3, [r5, #0]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d0c6      	beq.n	800d5c2 <__sflush_r+0x32>
 800d634:	2b1d      	cmp	r3, #29
 800d636:	d001      	beq.n	800d63c <__sflush_r+0xac>
 800d638:	2b16      	cmp	r3, #22
 800d63a:	d11e      	bne.n	800d67a <__sflush_r+0xea>
 800d63c:	602f      	str	r7, [r5, #0]
 800d63e:	2000      	movs	r0, #0
 800d640:	e022      	b.n	800d688 <__sflush_r+0xf8>
 800d642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d646:	b21b      	sxth	r3, r3
 800d648:	e01b      	b.n	800d682 <__sflush_r+0xf2>
 800d64a:	690f      	ldr	r7, [r1, #16]
 800d64c:	2f00      	cmp	r7, #0
 800d64e:	d0f6      	beq.n	800d63e <__sflush_r+0xae>
 800d650:	0793      	lsls	r3, r2, #30
 800d652:	680e      	ldr	r6, [r1, #0]
 800d654:	bf08      	it	eq
 800d656:	694b      	ldreq	r3, [r1, #20]
 800d658:	600f      	str	r7, [r1, #0]
 800d65a:	bf18      	it	ne
 800d65c:	2300      	movne	r3, #0
 800d65e:	eba6 0807 	sub.w	r8, r6, r7
 800d662:	608b      	str	r3, [r1, #8]
 800d664:	f1b8 0f00 	cmp.w	r8, #0
 800d668:	dde9      	ble.n	800d63e <__sflush_r+0xae>
 800d66a:	6a21      	ldr	r1, [r4, #32]
 800d66c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d66e:	4643      	mov	r3, r8
 800d670:	463a      	mov	r2, r7
 800d672:	4628      	mov	r0, r5
 800d674:	47b0      	blx	r6
 800d676:	2800      	cmp	r0, #0
 800d678:	dc08      	bgt.n	800d68c <__sflush_r+0xfc>
 800d67a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d67e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d682:	81a3      	strh	r3, [r4, #12]
 800d684:	f04f 30ff 	mov.w	r0, #4294967295
 800d688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d68c:	4407      	add	r7, r0
 800d68e:	eba8 0800 	sub.w	r8, r8, r0
 800d692:	e7e7      	b.n	800d664 <__sflush_r+0xd4>
 800d694:	dfbffffe 	.word	0xdfbffffe

0800d698 <_fflush_r>:
 800d698:	b538      	push	{r3, r4, r5, lr}
 800d69a:	690b      	ldr	r3, [r1, #16]
 800d69c:	4605      	mov	r5, r0
 800d69e:	460c      	mov	r4, r1
 800d6a0:	b913      	cbnz	r3, 800d6a8 <_fflush_r+0x10>
 800d6a2:	2500      	movs	r5, #0
 800d6a4:	4628      	mov	r0, r5
 800d6a6:	bd38      	pop	{r3, r4, r5, pc}
 800d6a8:	b118      	cbz	r0, 800d6b2 <_fflush_r+0x1a>
 800d6aa:	6a03      	ldr	r3, [r0, #32]
 800d6ac:	b90b      	cbnz	r3, 800d6b2 <_fflush_r+0x1a>
 800d6ae:	f7fd fad3 	bl	800ac58 <__sinit>
 800d6b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d0f3      	beq.n	800d6a2 <_fflush_r+0xa>
 800d6ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d6bc:	07d0      	lsls	r0, r2, #31
 800d6be:	d404      	bmi.n	800d6ca <_fflush_r+0x32>
 800d6c0:	0599      	lsls	r1, r3, #22
 800d6c2:	d402      	bmi.n	800d6ca <_fflush_r+0x32>
 800d6c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6c6:	f7fd fc34 	bl	800af32 <__retarget_lock_acquire_recursive>
 800d6ca:	4628      	mov	r0, r5
 800d6cc:	4621      	mov	r1, r4
 800d6ce:	f7ff ff5f 	bl	800d590 <__sflush_r>
 800d6d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d6d4:	07da      	lsls	r2, r3, #31
 800d6d6:	4605      	mov	r5, r0
 800d6d8:	d4e4      	bmi.n	800d6a4 <_fflush_r+0xc>
 800d6da:	89a3      	ldrh	r3, [r4, #12]
 800d6dc:	059b      	lsls	r3, r3, #22
 800d6de:	d4e1      	bmi.n	800d6a4 <_fflush_r+0xc>
 800d6e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6e2:	f7fd fc27 	bl	800af34 <__retarget_lock_release_recursive>
 800d6e6:	e7dd      	b.n	800d6a4 <_fflush_r+0xc>

0800d6e8 <memmove>:
 800d6e8:	4288      	cmp	r0, r1
 800d6ea:	b510      	push	{r4, lr}
 800d6ec:	eb01 0402 	add.w	r4, r1, r2
 800d6f0:	d902      	bls.n	800d6f8 <memmove+0x10>
 800d6f2:	4284      	cmp	r4, r0
 800d6f4:	4623      	mov	r3, r4
 800d6f6:	d807      	bhi.n	800d708 <memmove+0x20>
 800d6f8:	1e43      	subs	r3, r0, #1
 800d6fa:	42a1      	cmp	r1, r4
 800d6fc:	d008      	beq.n	800d710 <memmove+0x28>
 800d6fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d702:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d706:	e7f8      	b.n	800d6fa <memmove+0x12>
 800d708:	4402      	add	r2, r0
 800d70a:	4601      	mov	r1, r0
 800d70c:	428a      	cmp	r2, r1
 800d70e:	d100      	bne.n	800d712 <memmove+0x2a>
 800d710:	bd10      	pop	{r4, pc}
 800d712:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d716:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d71a:	e7f7      	b.n	800d70c <memmove+0x24>

0800d71c <strncmp>:
 800d71c:	b510      	push	{r4, lr}
 800d71e:	b16a      	cbz	r2, 800d73c <strncmp+0x20>
 800d720:	3901      	subs	r1, #1
 800d722:	1884      	adds	r4, r0, r2
 800d724:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d728:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d103      	bne.n	800d738 <strncmp+0x1c>
 800d730:	42a0      	cmp	r0, r4
 800d732:	d001      	beq.n	800d738 <strncmp+0x1c>
 800d734:	2a00      	cmp	r2, #0
 800d736:	d1f5      	bne.n	800d724 <strncmp+0x8>
 800d738:	1ad0      	subs	r0, r2, r3
 800d73a:	bd10      	pop	{r4, pc}
 800d73c:	4610      	mov	r0, r2
 800d73e:	e7fc      	b.n	800d73a <strncmp+0x1e>

0800d740 <_sbrk_r>:
 800d740:	b538      	push	{r3, r4, r5, lr}
 800d742:	4d06      	ldr	r5, [pc, #24]	@ (800d75c <_sbrk_r+0x1c>)
 800d744:	2300      	movs	r3, #0
 800d746:	4604      	mov	r4, r0
 800d748:	4608      	mov	r0, r1
 800d74a:	602b      	str	r3, [r5, #0]
 800d74c:	f7f4 f89e 	bl	800188c <_sbrk>
 800d750:	1c43      	adds	r3, r0, #1
 800d752:	d102      	bne.n	800d75a <_sbrk_r+0x1a>
 800d754:	682b      	ldr	r3, [r5, #0]
 800d756:	b103      	cbz	r3, 800d75a <_sbrk_r+0x1a>
 800d758:	6023      	str	r3, [r4, #0]
 800d75a:	bd38      	pop	{r3, r4, r5, pc}
 800d75c:	20005dbc 	.word	0x20005dbc

0800d760 <nan>:
 800d760:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d768 <nan+0x8>
 800d764:	4770      	bx	lr
 800d766:	bf00      	nop
 800d768:	00000000 	.word	0x00000000
 800d76c:	7ff80000 	.word	0x7ff80000

0800d770 <__assert_func>:
 800d770:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d772:	4614      	mov	r4, r2
 800d774:	461a      	mov	r2, r3
 800d776:	4b09      	ldr	r3, [pc, #36]	@ (800d79c <__assert_func+0x2c>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4605      	mov	r5, r0
 800d77c:	68d8      	ldr	r0, [r3, #12]
 800d77e:	b954      	cbnz	r4, 800d796 <__assert_func+0x26>
 800d780:	4b07      	ldr	r3, [pc, #28]	@ (800d7a0 <__assert_func+0x30>)
 800d782:	461c      	mov	r4, r3
 800d784:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d788:	9100      	str	r1, [sp, #0]
 800d78a:	462b      	mov	r3, r5
 800d78c:	4905      	ldr	r1, [pc, #20]	@ (800d7a4 <__assert_func+0x34>)
 800d78e:	f000 fba7 	bl	800dee0 <fiprintf>
 800d792:	f000 fbb7 	bl	800df04 <abort>
 800d796:	4b04      	ldr	r3, [pc, #16]	@ (800d7a8 <__assert_func+0x38>)
 800d798:	e7f4      	b.n	800d784 <__assert_func+0x14>
 800d79a:	bf00      	nop
 800d79c:	2000001c 	.word	0x2000001c
 800d7a0:	0800e9ad 	.word	0x0800e9ad
 800d7a4:	0800e97f 	.word	0x0800e97f
 800d7a8:	0800e972 	.word	0x0800e972

0800d7ac <_calloc_r>:
 800d7ac:	b570      	push	{r4, r5, r6, lr}
 800d7ae:	fba1 5402 	umull	r5, r4, r1, r2
 800d7b2:	b93c      	cbnz	r4, 800d7c4 <_calloc_r+0x18>
 800d7b4:	4629      	mov	r1, r5
 800d7b6:	f7fe fa25 	bl	800bc04 <_malloc_r>
 800d7ba:	4606      	mov	r6, r0
 800d7bc:	b928      	cbnz	r0, 800d7ca <_calloc_r+0x1e>
 800d7be:	2600      	movs	r6, #0
 800d7c0:	4630      	mov	r0, r6
 800d7c2:	bd70      	pop	{r4, r5, r6, pc}
 800d7c4:	220c      	movs	r2, #12
 800d7c6:	6002      	str	r2, [r0, #0]
 800d7c8:	e7f9      	b.n	800d7be <_calloc_r+0x12>
 800d7ca:	462a      	mov	r2, r5
 800d7cc:	4621      	mov	r1, r4
 800d7ce:	f7fd fadc 	bl	800ad8a <memset>
 800d7d2:	e7f5      	b.n	800d7c0 <_calloc_r+0x14>

0800d7d4 <rshift>:
 800d7d4:	6903      	ldr	r3, [r0, #16]
 800d7d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d7da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d7de:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d7e2:	f100 0414 	add.w	r4, r0, #20
 800d7e6:	dd45      	ble.n	800d874 <rshift+0xa0>
 800d7e8:	f011 011f 	ands.w	r1, r1, #31
 800d7ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d7f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d7f4:	d10c      	bne.n	800d810 <rshift+0x3c>
 800d7f6:	f100 0710 	add.w	r7, r0, #16
 800d7fa:	4629      	mov	r1, r5
 800d7fc:	42b1      	cmp	r1, r6
 800d7fe:	d334      	bcc.n	800d86a <rshift+0x96>
 800d800:	1a9b      	subs	r3, r3, r2
 800d802:	009b      	lsls	r3, r3, #2
 800d804:	1eea      	subs	r2, r5, #3
 800d806:	4296      	cmp	r6, r2
 800d808:	bf38      	it	cc
 800d80a:	2300      	movcc	r3, #0
 800d80c:	4423      	add	r3, r4
 800d80e:	e015      	b.n	800d83c <rshift+0x68>
 800d810:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d814:	f1c1 0820 	rsb	r8, r1, #32
 800d818:	40cf      	lsrs	r7, r1
 800d81a:	f105 0e04 	add.w	lr, r5, #4
 800d81e:	46a1      	mov	r9, r4
 800d820:	4576      	cmp	r6, lr
 800d822:	46f4      	mov	ip, lr
 800d824:	d815      	bhi.n	800d852 <rshift+0x7e>
 800d826:	1a9a      	subs	r2, r3, r2
 800d828:	0092      	lsls	r2, r2, #2
 800d82a:	3a04      	subs	r2, #4
 800d82c:	3501      	adds	r5, #1
 800d82e:	42ae      	cmp	r6, r5
 800d830:	bf38      	it	cc
 800d832:	2200      	movcc	r2, #0
 800d834:	18a3      	adds	r3, r4, r2
 800d836:	50a7      	str	r7, [r4, r2]
 800d838:	b107      	cbz	r7, 800d83c <rshift+0x68>
 800d83a:	3304      	adds	r3, #4
 800d83c:	1b1a      	subs	r2, r3, r4
 800d83e:	42a3      	cmp	r3, r4
 800d840:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d844:	bf08      	it	eq
 800d846:	2300      	moveq	r3, #0
 800d848:	6102      	str	r2, [r0, #16]
 800d84a:	bf08      	it	eq
 800d84c:	6143      	streq	r3, [r0, #20]
 800d84e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d852:	f8dc c000 	ldr.w	ip, [ip]
 800d856:	fa0c fc08 	lsl.w	ip, ip, r8
 800d85a:	ea4c 0707 	orr.w	r7, ip, r7
 800d85e:	f849 7b04 	str.w	r7, [r9], #4
 800d862:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d866:	40cf      	lsrs	r7, r1
 800d868:	e7da      	b.n	800d820 <rshift+0x4c>
 800d86a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d86e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d872:	e7c3      	b.n	800d7fc <rshift+0x28>
 800d874:	4623      	mov	r3, r4
 800d876:	e7e1      	b.n	800d83c <rshift+0x68>

0800d878 <__hexdig_fun>:
 800d878:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d87c:	2b09      	cmp	r3, #9
 800d87e:	d802      	bhi.n	800d886 <__hexdig_fun+0xe>
 800d880:	3820      	subs	r0, #32
 800d882:	b2c0      	uxtb	r0, r0
 800d884:	4770      	bx	lr
 800d886:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d88a:	2b05      	cmp	r3, #5
 800d88c:	d801      	bhi.n	800d892 <__hexdig_fun+0x1a>
 800d88e:	3847      	subs	r0, #71	@ 0x47
 800d890:	e7f7      	b.n	800d882 <__hexdig_fun+0xa>
 800d892:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d896:	2b05      	cmp	r3, #5
 800d898:	d801      	bhi.n	800d89e <__hexdig_fun+0x26>
 800d89a:	3827      	subs	r0, #39	@ 0x27
 800d89c:	e7f1      	b.n	800d882 <__hexdig_fun+0xa>
 800d89e:	2000      	movs	r0, #0
 800d8a0:	4770      	bx	lr
	...

0800d8a4 <__gethex>:
 800d8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8a8:	b085      	sub	sp, #20
 800d8aa:	468a      	mov	sl, r1
 800d8ac:	9302      	str	r3, [sp, #8]
 800d8ae:	680b      	ldr	r3, [r1, #0]
 800d8b0:	9001      	str	r0, [sp, #4]
 800d8b2:	4690      	mov	r8, r2
 800d8b4:	1c9c      	adds	r4, r3, #2
 800d8b6:	46a1      	mov	r9, r4
 800d8b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d8bc:	2830      	cmp	r0, #48	@ 0x30
 800d8be:	d0fa      	beq.n	800d8b6 <__gethex+0x12>
 800d8c0:	eba9 0303 	sub.w	r3, r9, r3
 800d8c4:	f1a3 0b02 	sub.w	fp, r3, #2
 800d8c8:	f7ff ffd6 	bl	800d878 <__hexdig_fun>
 800d8cc:	4605      	mov	r5, r0
 800d8ce:	2800      	cmp	r0, #0
 800d8d0:	d168      	bne.n	800d9a4 <__gethex+0x100>
 800d8d2:	49a0      	ldr	r1, [pc, #640]	@ (800db54 <__gethex+0x2b0>)
 800d8d4:	2201      	movs	r2, #1
 800d8d6:	4648      	mov	r0, r9
 800d8d8:	f7ff ff20 	bl	800d71c <strncmp>
 800d8dc:	4607      	mov	r7, r0
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	d167      	bne.n	800d9b2 <__gethex+0x10e>
 800d8e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d8e6:	4626      	mov	r6, r4
 800d8e8:	f7ff ffc6 	bl	800d878 <__hexdig_fun>
 800d8ec:	2800      	cmp	r0, #0
 800d8ee:	d062      	beq.n	800d9b6 <__gethex+0x112>
 800d8f0:	4623      	mov	r3, r4
 800d8f2:	7818      	ldrb	r0, [r3, #0]
 800d8f4:	2830      	cmp	r0, #48	@ 0x30
 800d8f6:	4699      	mov	r9, r3
 800d8f8:	f103 0301 	add.w	r3, r3, #1
 800d8fc:	d0f9      	beq.n	800d8f2 <__gethex+0x4e>
 800d8fe:	f7ff ffbb 	bl	800d878 <__hexdig_fun>
 800d902:	fab0 f580 	clz	r5, r0
 800d906:	096d      	lsrs	r5, r5, #5
 800d908:	f04f 0b01 	mov.w	fp, #1
 800d90c:	464a      	mov	r2, r9
 800d90e:	4616      	mov	r6, r2
 800d910:	3201      	adds	r2, #1
 800d912:	7830      	ldrb	r0, [r6, #0]
 800d914:	f7ff ffb0 	bl	800d878 <__hexdig_fun>
 800d918:	2800      	cmp	r0, #0
 800d91a:	d1f8      	bne.n	800d90e <__gethex+0x6a>
 800d91c:	498d      	ldr	r1, [pc, #564]	@ (800db54 <__gethex+0x2b0>)
 800d91e:	2201      	movs	r2, #1
 800d920:	4630      	mov	r0, r6
 800d922:	f7ff fefb 	bl	800d71c <strncmp>
 800d926:	2800      	cmp	r0, #0
 800d928:	d13f      	bne.n	800d9aa <__gethex+0x106>
 800d92a:	b944      	cbnz	r4, 800d93e <__gethex+0x9a>
 800d92c:	1c74      	adds	r4, r6, #1
 800d92e:	4622      	mov	r2, r4
 800d930:	4616      	mov	r6, r2
 800d932:	3201      	adds	r2, #1
 800d934:	7830      	ldrb	r0, [r6, #0]
 800d936:	f7ff ff9f 	bl	800d878 <__hexdig_fun>
 800d93a:	2800      	cmp	r0, #0
 800d93c:	d1f8      	bne.n	800d930 <__gethex+0x8c>
 800d93e:	1ba4      	subs	r4, r4, r6
 800d940:	00a7      	lsls	r7, r4, #2
 800d942:	7833      	ldrb	r3, [r6, #0]
 800d944:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d948:	2b50      	cmp	r3, #80	@ 0x50
 800d94a:	d13e      	bne.n	800d9ca <__gethex+0x126>
 800d94c:	7873      	ldrb	r3, [r6, #1]
 800d94e:	2b2b      	cmp	r3, #43	@ 0x2b
 800d950:	d033      	beq.n	800d9ba <__gethex+0x116>
 800d952:	2b2d      	cmp	r3, #45	@ 0x2d
 800d954:	d034      	beq.n	800d9c0 <__gethex+0x11c>
 800d956:	1c71      	adds	r1, r6, #1
 800d958:	2400      	movs	r4, #0
 800d95a:	7808      	ldrb	r0, [r1, #0]
 800d95c:	f7ff ff8c 	bl	800d878 <__hexdig_fun>
 800d960:	1e43      	subs	r3, r0, #1
 800d962:	b2db      	uxtb	r3, r3
 800d964:	2b18      	cmp	r3, #24
 800d966:	d830      	bhi.n	800d9ca <__gethex+0x126>
 800d968:	f1a0 0210 	sub.w	r2, r0, #16
 800d96c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d970:	f7ff ff82 	bl	800d878 <__hexdig_fun>
 800d974:	f100 3cff 	add.w	ip, r0, #4294967295
 800d978:	fa5f fc8c 	uxtb.w	ip, ip
 800d97c:	f1bc 0f18 	cmp.w	ip, #24
 800d980:	f04f 030a 	mov.w	r3, #10
 800d984:	d91e      	bls.n	800d9c4 <__gethex+0x120>
 800d986:	b104      	cbz	r4, 800d98a <__gethex+0xe6>
 800d988:	4252      	negs	r2, r2
 800d98a:	4417      	add	r7, r2
 800d98c:	f8ca 1000 	str.w	r1, [sl]
 800d990:	b1ed      	cbz	r5, 800d9ce <__gethex+0x12a>
 800d992:	f1bb 0f00 	cmp.w	fp, #0
 800d996:	bf0c      	ite	eq
 800d998:	2506      	moveq	r5, #6
 800d99a:	2500      	movne	r5, #0
 800d99c:	4628      	mov	r0, r5
 800d99e:	b005      	add	sp, #20
 800d9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9a4:	2500      	movs	r5, #0
 800d9a6:	462c      	mov	r4, r5
 800d9a8:	e7b0      	b.n	800d90c <__gethex+0x68>
 800d9aa:	2c00      	cmp	r4, #0
 800d9ac:	d1c7      	bne.n	800d93e <__gethex+0x9a>
 800d9ae:	4627      	mov	r7, r4
 800d9b0:	e7c7      	b.n	800d942 <__gethex+0x9e>
 800d9b2:	464e      	mov	r6, r9
 800d9b4:	462f      	mov	r7, r5
 800d9b6:	2501      	movs	r5, #1
 800d9b8:	e7c3      	b.n	800d942 <__gethex+0x9e>
 800d9ba:	2400      	movs	r4, #0
 800d9bc:	1cb1      	adds	r1, r6, #2
 800d9be:	e7cc      	b.n	800d95a <__gethex+0xb6>
 800d9c0:	2401      	movs	r4, #1
 800d9c2:	e7fb      	b.n	800d9bc <__gethex+0x118>
 800d9c4:	fb03 0002 	mla	r0, r3, r2, r0
 800d9c8:	e7ce      	b.n	800d968 <__gethex+0xc4>
 800d9ca:	4631      	mov	r1, r6
 800d9cc:	e7de      	b.n	800d98c <__gethex+0xe8>
 800d9ce:	eba6 0309 	sub.w	r3, r6, r9
 800d9d2:	3b01      	subs	r3, #1
 800d9d4:	4629      	mov	r1, r5
 800d9d6:	2b07      	cmp	r3, #7
 800d9d8:	dc0a      	bgt.n	800d9f0 <__gethex+0x14c>
 800d9da:	9801      	ldr	r0, [sp, #4]
 800d9dc:	f7fe f99e 	bl	800bd1c <_Balloc>
 800d9e0:	4604      	mov	r4, r0
 800d9e2:	b940      	cbnz	r0, 800d9f6 <__gethex+0x152>
 800d9e4:	4b5c      	ldr	r3, [pc, #368]	@ (800db58 <__gethex+0x2b4>)
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	21e4      	movs	r1, #228	@ 0xe4
 800d9ea:	485c      	ldr	r0, [pc, #368]	@ (800db5c <__gethex+0x2b8>)
 800d9ec:	f7ff fec0 	bl	800d770 <__assert_func>
 800d9f0:	3101      	adds	r1, #1
 800d9f2:	105b      	asrs	r3, r3, #1
 800d9f4:	e7ef      	b.n	800d9d6 <__gethex+0x132>
 800d9f6:	f100 0a14 	add.w	sl, r0, #20
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	4655      	mov	r5, sl
 800d9fe:	469b      	mov	fp, r3
 800da00:	45b1      	cmp	r9, r6
 800da02:	d337      	bcc.n	800da74 <__gethex+0x1d0>
 800da04:	f845 bb04 	str.w	fp, [r5], #4
 800da08:	eba5 050a 	sub.w	r5, r5, sl
 800da0c:	10ad      	asrs	r5, r5, #2
 800da0e:	6125      	str	r5, [r4, #16]
 800da10:	4658      	mov	r0, fp
 800da12:	f7fe fa75 	bl	800bf00 <__hi0bits>
 800da16:	016d      	lsls	r5, r5, #5
 800da18:	f8d8 6000 	ldr.w	r6, [r8]
 800da1c:	1a2d      	subs	r5, r5, r0
 800da1e:	42b5      	cmp	r5, r6
 800da20:	dd54      	ble.n	800dacc <__gethex+0x228>
 800da22:	1bad      	subs	r5, r5, r6
 800da24:	4629      	mov	r1, r5
 800da26:	4620      	mov	r0, r4
 800da28:	f7fe fe06 	bl	800c638 <__any_on>
 800da2c:	4681      	mov	r9, r0
 800da2e:	b178      	cbz	r0, 800da50 <__gethex+0x1ac>
 800da30:	1e6b      	subs	r3, r5, #1
 800da32:	1159      	asrs	r1, r3, #5
 800da34:	f003 021f 	and.w	r2, r3, #31
 800da38:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800da3c:	f04f 0901 	mov.w	r9, #1
 800da40:	fa09 f202 	lsl.w	r2, r9, r2
 800da44:	420a      	tst	r2, r1
 800da46:	d003      	beq.n	800da50 <__gethex+0x1ac>
 800da48:	454b      	cmp	r3, r9
 800da4a:	dc36      	bgt.n	800daba <__gethex+0x216>
 800da4c:	f04f 0902 	mov.w	r9, #2
 800da50:	4629      	mov	r1, r5
 800da52:	4620      	mov	r0, r4
 800da54:	f7ff febe 	bl	800d7d4 <rshift>
 800da58:	442f      	add	r7, r5
 800da5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da5e:	42bb      	cmp	r3, r7
 800da60:	da42      	bge.n	800dae8 <__gethex+0x244>
 800da62:	9801      	ldr	r0, [sp, #4]
 800da64:	4621      	mov	r1, r4
 800da66:	f7fe f999 	bl	800bd9c <_Bfree>
 800da6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da6c:	2300      	movs	r3, #0
 800da6e:	6013      	str	r3, [r2, #0]
 800da70:	25a3      	movs	r5, #163	@ 0xa3
 800da72:	e793      	b.n	800d99c <__gethex+0xf8>
 800da74:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800da78:	2a2e      	cmp	r2, #46	@ 0x2e
 800da7a:	d012      	beq.n	800daa2 <__gethex+0x1fe>
 800da7c:	2b20      	cmp	r3, #32
 800da7e:	d104      	bne.n	800da8a <__gethex+0x1e6>
 800da80:	f845 bb04 	str.w	fp, [r5], #4
 800da84:	f04f 0b00 	mov.w	fp, #0
 800da88:	465b      	mov	r3, fp
 800da8a:	7830      	ldrb	r0, [r6, #0]
 800da8c:	9303      	str	r3, [sp, #12]
 800da8e:	f7ff fef3 	bl	800d878 <__hexdig_fun>
 800da92:	9b03      	ldr	r3, [sp, #12]
 800da94:	f000 000f 	and.w	r0, r0, #15
 800da98:	4098      	lsls	r0, r3
 800da9a:	ea4b 0b00 	orr.w	fp, fp, r0
 800da9e:	3304      	adds	r3, #4
 800daa0:	e7ae      	b.n	800da00 <__gethex+0x15c>
 800daa2:	45b1      	cmp	r9, r6
 800daa4:	d8ea      	bhi.n	800da7c <__gethex+0x1d8>
 800daa6:	492b      	ldr	r1, [pc, #172]	@ (800db54 <__gethex+0x2b0>)
 800daa8:	9303      	str	r3, [sp, #12]
 800daaa:	2201      	movs	r2, #1
 800daac:	4630      	mov	r0, r6
 800daae:	f7ff fe35 	bl	800d71c <strncmp>
 800dab2:	9b03      	ldr	r3, [sp, #12]
 800dab4:	2800      	cmp	r0, #0
 800dab6:	d1e1      	bne.n	800da7c <__gethex+0x1d8>
 800dab8:	e7a2      	b.n	800da00 <__gethex+0x15c>
 800daba:	1ea9      	subs	r1, r5, #2
 800dabc:	4620      	mov	r0, r4
 800dabe:	f7fe fdbb 	bl	800c638 <__any_on>
 800dac2:	2800      	cmp	r0, #0
 800dac4:	d0c2      	beq.n	800da4c <__gethex+0x1a8>
 800dac6:	f04f 0903 	mov.w	r9, #3
 800daca:	e7c1      	b.n	800da50 <__gethex+0x1ac>
 800dacc:	da09      	bge.n	800dae2 <__gethex+0x23e>
 800dace:	1b75      	subs	r5, r6, r5
 800dad0:	4621      	mov	r1, r4
 800dad2:	9801      	ldr	r0, [sp, #4]
 800dad4:	462a      	mov	r2, r5
 800dad6:	f7fe fb79 	bl	800c1cc <__lshift>
 800dada:	1b7f      	subs	r7, r7, r5
 800dadc:	4604      	mov	r4, r0
 800dade:	f100 0a14 	add.w	sl, r0, #20
 800dae2:	f04f 0900 	mov.w	r9, #0
 800dae6:	e7b8      	b.n	800da5a <__gethex+0x1b6>
 800dae8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800daec:	42bd      	cmp	r5, r7
 800daee:	dd6f      	ble.n	800dbd0 <__gethex+0x32c>
 800daf0:	1bed      	subs	r5, r5, r7
 800daf2:	42ae      	cmp	r6, r5
 800daf4:	dc34      	bgt.n	800db60 <__gethex+0x2bc>
 800daf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dafa:	2b02      	cmp	r3, #2
 800dafc:	d022      	beq.n	800db44 <__gethex+0x2a0>
 800dafe:	2b03      	cmp	r3, #3
 800db00:	d024      	beq.n	800db4c <__gethex+0x2a8>
 800db02:	2b01      	cmp	r3, #1
 800db04:	d115      	bne.n	800db32 <__gethex+0x28e>
 800db06:	42ae      	cmp	r6, r5
 800db08:	d113      	bne.n	800db32 <__gethex+0x28e>
 800db0a:	2e01      	cmp	r6, #1
 800db0c:	d10b      	bne.n	800db26 <__gethex+0x282>
 800db0e:	9a02      	ldr	r2, [sp, #8]
 800db10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800db14:	6013      	str	r3, [r2, #0]
 800db16:	2301      	movs	r3, #1
 800db18:	6123      	str	r3, [r4, #16]
 800db1a:	f8ca 3000 	str.w	r3, [sl]
 800db1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db20:	2562      	movs	r5, #98	@ 0x62
 800db22:	601c      	str	r4, [r3, #0]
 800db24:	e73a      	b.n	800d99c <__gethex+0xf8>
 800db26:	1e71      	subs	r1, r6, #1
 800db28:	4620      	mov	r0, r4
 800db2a:	f7fe fd85 	bl	800c638 <__any_on>
 800db2e:	2800      	cmp	r0, #0
 800db30:	d1ed      	bne.n	800db0e <__gethex+0x26a>
 800db32:	9801      	ldr	r0, [sp, #4]
 800db34:	4621      	mov	r1, r4
 800db36:	f7fe f931 	bl	800bd9c <_Bfree>
 800db3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db3c:	2300      	movs	r3, #0
 800db3e:	6013      	str	r3, [r2, #0]
 800db40:	2550      	movs	r5, #80	@ 0x50
 800db42:	e72b      	b.n	800d99c <__gethex+0xf8>
 800db44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db46:	2b00      	cmp	r3, #0
 800db48:	d1f3      	bne.n	800db32 <__gethex+0x28e>
 800db4a:	e7e0      	b.n	800db0e <__gethex+0x26a>
 800db4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d1dd      	bne.n	800db0e <__gethex+0x26a>
 800db52:	e7ee      	b.n	800db32 <__gethex+0x28e>
 800db54:	0800e800 	.word	0x0800e800
 800db58:	0800e695 	.word	0x0800e695
 800db5c:	0800e9ae 	.word	0x0800e9ae
 800db60:	1e6f      	subs	r7, r5, #1
 800db62:	f1b9 0f00 	cmp.w	r9, #0
 800db66:	d130      	bne.n	800dbca <__gethex+0x326>
 800db68:	b127      	cbz	r7, 800db74 <__gethex+0x2d0>
 800db6a:	4639      	mov	r1, r7
 800db6c:	4620      	mov	r0, r4
 800db6e:	f7fe fd63 	bl	800c638 <__any_on>
 800db72:	4681      	mov	r9, r0
 800db74:	117a      	asrs	r2, r7, #5
 800db76:	2301      	movs	r3, #1
 800db78:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800db7c:	f007 071f 	and.w	r7, r7, #31
 800db80:	40bb      	lsls	r3, r7
 800db82:	4213      	tst	r3, r2
 800db84:	4629      	mov	r1, r5
 800db86:	4620      	mov	r0, r4
 800db88:	bf18      	it	ne
 800db8a:	f049 0902 	orrne.w	r9, r9, #2
 800db8e:	f7ff fe21 	bl	800d7d4 <rshift>
 800db92:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800db96:	1b76      	subs	r6, r6, r5
 800db98:	2502      	movs	r5, #2
 800db9a:	f1b9 0f00 	cmp.w	r9, #0
 800db9e:	d047      	beq.n	800dc30 <__gethex+0x38c>
 800dba0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dba4:	2b02      	cmp	r3, #2
 800dba6:	d015      	beq.n	800dbd4 <__gethex+0x330>
 800dba8:	2b03      	cmp	r3, #3
 800dbaa:	d017      	beq.n	800dbdc <__gethex+0x338>
 800dbac:	2b01      	cmp	r3, #1
 800dbae:	d109      	bne.n	800dbc4 <__gethex+0x320>
 800dbb0:	f019 0f02 	tst.w	r9, #2
 800dbb4:	d006      	beq.n	800dbc4 <__gethex+0x320>
 800dbb6:	f8da 3000 	ldr.w	r3, [sl]
 800dbba:	ea49 0903 	orr.w	r9, r9, r3
 800dbbe:	f019 0f01 	tst.w	r9, #1
 800dbc2:	d10e      	bne.n	800dbe2 <__gethex+0x33e>
 800dbc4:	f045 0510 	orr.w	r5, r5, #16
 800dbc8:	e032      	b.n	800dc30 <__gethex+0x38c>
 800dbca:	f04f 0901 	mov.w	r9, #1
 800dbce:	e7d1      	b.n	800db74 <__gethex+0x2d0>
 800dbd0:	2501      	movs	r5, #1
 800dbd2:	e7e2      	b.n	800db9a <__gethex+0x2f6>
 800dbd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbd6:	f1c3 0301 	rsb	r3, r3, #1
 800dbda:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dbdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d0f0      	beq.n	800dbc4 <__gethex+0x320>
 800dbe2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dbe6:	f104 0314 	add.w	r3, r4, #20
 800dbea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dbee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dbf2:	f04f 0c00 	mov.w	ip, #0
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbfc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dc00:	d01b      	beq.n	800dc3a <__gethex+0x396>
 800dc02:	3201      	adds	r2, #1
 800dc04:	6002      	str	r2, [r0, #0]
 800dc06:	2d02      	cmp	r5, #2
 800dc08:	f104 0314 	add.w	r3, r4, #20
 800dc0c:	d13c      	bne.n	800dc88 <__gethex+0x3e4>
 800dc0e:	f8d8 2000 	ldr.w	r2, [r8]
 800dc12:	3a01      	subs	r2, #1
 800dc14:	42b2      	cmp	r2, r6
 800dc16:	d109      	bne.n	800dc2c <__gethex+0x388>
 800dc18:	1171      	asrs	r1, r6, #5
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc20:	f006 061f 	and.w	r6, r6, #31
 800dc24:	fa02 f606 	lsl.w	r6, r2, r6
 800dc28:	421e      	tst	r6, r3
 800dc2a:	d13a      	bne.n	800dca2 <__gethex+0x3fe>
 800dc2c:	f045 0520 	orr.w	r5, r5, #32
 800dc30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc32:	601c      	str	r4, [r3, #0]
 800dc34:	9b02      	ldr	r3, [sp, #8]
 800dc36:	601f      	str	r7, [r3, #0]
 800dc38:	e6b0      	b.n	800d99c <__gethex+0xf8>
 800dc3a:	4299      	cmp	r1, r3
 800dc3c:	f843 cc04 	str.w	ip, [r3, #-4]
 800dc40:	d8d9      	bhi.n	800dbf6 <__gethex+0x352>
 800dc42:	68a3      	ldr	r3, [r4, #8]
 800dc44:	459b      	cmp	fp, r3
 800dc46:	db17      	blt.n	800dc78 <__gethex+0x3d4>
 800dc48:	6861      	ldr	r1, [r4, #4]
 800dc4a:	9801      	ldr	r0, [sp, #4]
 800dc4c:	3101      	adds	r1, #1
 800dc4e:	f7fe f865 	bl	800bd1c <_Balloc>
 800dc52:	4681      	mov	r9, r0
 800dc54:	b918      	cbnz	r0, 800dc5e <__gethex+0x3ba>
 800dc56:	4b1a      	ldr	r3, [pc, #104]	@ (800dcc0 <__gethex+0x41c>)
 800dc58:	4602      	mov	r2, r0
 800dc5a:	2184      	movs	r1, #132	@ 0x84
 800dc5c:	e6c5      	b.n	800d9ea <__gethex+0x146>
 800dc5e:	6922      	ldr	r2, [r4, #16]
 800dc60:	3202      	adds	r2, #2
 800dc62:	f104 010c 	add.w	r1, r4, #12
 800dc66:	0092      	lsls	r2, r2, #2
 800dc68:	300c      	adds	r0, #12
 800dc6a:	f7fd f964 	bl	800af36 <memcpy>
 800dc6e:	4621      	mov	r1, r4
 800dc70:	9801      	ldr	r0, [sp, #4]
 800dc72:	f7fe f893 	bl	800bd9c <_Bfree>
 800dc76:	464c      	mov	r4, r9
 800dc78:	6923      	ldr	r3, [r4, #16]
 800dc7a:	1c5a      	adds	r2, r3, #1
 800dc7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dc80:	6122      	str	r2, [r4, #16]
 800dc82:	2201      	movs	r2, #1
 800dc84:	615a      	str	r2, [r3, #20]
 800dc86:	e7be      	b.n	800dc06 <__gethex+0x362>
 800dc88:	6922      	ldr	r2, [r4, #16]
 800dc8a:	455a      	cmp	r2, fp
 800dc8c:	dd0b      	ble.n	800dca6 <__gethex+0x402>
 800dc8e:	2101      	movs	r1, #1
 800dc90:	4620      	mov	r0, r4
 800dc92:	f7ff fd9f 	bl	800d7d4 <rshift>
 800dc96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc9a:	3701      	adds	r7, #1
 800dc9c:	42bb      	cmp	r3, r7
 800dc9e:	f6ff aee0 	blt.w	800da62 <__gethex+0x1be>
 800dca2:	2501      	movs	r5, #1
 800dca4:	e7c2      	b.n	800dc2c <__gethex+0x388>
 800dca6:	f016 061f 	ands.w	r6, r6, #31
 800dcaa:	d0fa      	beq.n	800dca2 <__gethex+0x3fe>
 800dcac:	4453      	add	r3, sl
 800dcae:	f1c6 0620 	rsb	r6, r6, #32
 800dcb2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dcb6:	f7fe f923 	bl	800bf00 <__hi0bits>
 800dcba:	42b0      	cmp	r0, r6
 800dcbc:	dbe7      	blt.n	800dc8e <__gethex+0x3ea>
 800dcbe:	e7f0      	b.n	800dca2 <__gethex+0x3fe>
 800dcc0:	0800e695 	.word	0x0800e695

0800dcc4 <L_shift>:
 800dcc4:	f1c2 0208 	rsb	r2, r2, #8
 800dcc8:	0092      	lsls	r2, r2, #2
 800dcca:	b570      	push	{r4, r5, r6, lr}
 800dccc:	f1c2 0620 	rsb	r6, r2, #32
 800dcd0:	6843      	ldr	r3, [r0, #4]
 800dcd2:	6804      	ldr	r4, [r0, #0]
 800dcd4:	fa03 f506 	lsl.w	r5, r3, r6
 800dcd8:	432c      	orrs	r4, r5
 800dcda:	40d3      	lsrs	r3, r2
 800dcdc:	6004      	str	r4, [r0, #0]
 800dcde:	f840 3f04 	str.w	r3, [r0, #4]!
 800dce2:	4288      	cmp	r0, r1
 800dce4:	d3f4      	bcc.n	800dcd0 <L_shift+0xc>
 800dce6:	bd70      	pop	{r4, r5, r6, pc}

0800dce8 <__match>:
 800dce8:	b530      	push	{r4, r5, lr}
 800dcea:	6803      	ldr	r3, [r0, #0]
 800dcec:	3301      	adds	r3, #1
 800dcee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcf2:	b914      	cbnz	r4, 800dcfa <__match+0x12>
 800dcf4:	6003      	str	r3, [r0, #0]
 800dcf6:	2001      	movs	r0, #1
 800dcf8:	bd30      	pop	{r4, r5, pc}
 800dcfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcfe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800dd02:	2d19      	cmp	r5, #25
 800dd04:	bf98      	it	ls
 800dd06:	3220      	addls	r2, #32
 800dd08:	42a2      	cmp	r2, r4
 800dd0a:	d0f0      	beq.n	800dcee <__match+0x6>
 800dd0c:	2000      	movs	r0, #0
 800dd0e:	e7f3      	b.n	800dcf8 <__match+0x10>

0800dd10 <__hexnan>:
 800dd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd14:	680b      	ldr	r3, [r1, #0]
 800dd16:	6801      	ldr	r1, [r0, #0]
 800dd18:	115e      	asrs	r6, r3, #5
 800dd1a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dd1e:	f013 031f 	ands.w	r3, r3, #31
 800dd22:	b087      	sub	sp, #28
 800dd24:	bf18      	it	ne
 800dd26:	3604      	addne	r6, #4
 800dd28:	2500      	movs	r5, #0
 800dd2a:	1f37      	subs	r7, r6, #4
 800dd2c:	4682      	mov	sl, r0
 800dd2e:	4690      	mov	r8, r2
 800dd30:	9301      	str	r3, [sp, #4]
 800dd32:	f846 5c04 	str.w	r5, [r6, #-4]
 800dd36:	46b9      	mov	r9, r7
 800dd38:	463c      	mov	r4, r7
 800dd3a:	9502      	str	r5, [sp, #8]
 800dd3c:	46ab      	mov	fp, r5
 800dd3e:	784a      	ldrb	r2, [r1, #1]
 800dd40:	1c4b      	adds	r3, r1, #1
 800dd42:	9303      	str	r3, [sp, #12]
 800dd44:	b342      	cbz	r2, 800dd98 <__hexnan+0x88>
 800dd46:	4610      	mov	r0, r2
 800dd48:	9105      	str	r1, [sp, #20]
 800dd4a:	9204      	str	r2, [sp, #16]
 800dd4c:	f7ff fd94 	bl	800d878 <__hexdig_fun>
 800dd50:	2800      	cmp	r0, #0
 800dd52:	d151      	bne.n	800ddf8 <__hexnan+0xe8>
 800dd54:	9a04      	ldr	r2, [sp, #16]
 800dd56:	9905      	ldr	r1, [sp, #20]
 800dd58:	2a20      	cmp	r2, #32
 800dd5a:	d818      	bhi.n	800dd8e <__hexnan+0x7e>
 800dd5c:	9b02      	ldr	r3, [sp, #8]
 800dd5e:	459b      	cmp	fp, r3
 800dd60:	dd13      	ble.n	800dd8a <__hexnan+0x7a>
 800dd62:	454c      	cmp	r4, r9
 800dd64:	d206      	bcs.n	800dd74 <__hexnan+0x64>
 800dd66:	2d07      	cmp	r5, #7
 800dd68:	dc04      	bgt.n	800dd74 <__hexnan+0x64>
 800dd6a:	462a      	mov	r2, r5
 800dd6c:	4649      	mov	r1, r9
 800dd6e:	4620      	mov	r0, r4
 800dd70:	f7ff ffa8 	bl	800dcc4 <L_shift>
 800dd74:	4544      	cmp	r4, r8
 800dd76:	d952      	bls.n	800de1e <__hexnan+0x10e>
 800dd78:	2300      	movs	r3, #0
 800dd7a:	f1a4 0904 	sub.w	r9, r4, #4
 800dd7e:	f844 3c04 	str.w	r3, [r4, #-4]
 800dd82:	f8cd b008 	str.w	fp, [sp, #8]
 800dd86:	464c      	mov	r4, r9
 800dd88:	461d      	mov	r5, r3
 800dd8a:	9903      	ldr	r1, [sp, #12]
 800dd8c:	e7d7      	b.n	800dd3e <__hexnan+0x2e>
 800dd8e:	2a29      	cmp	r2, #41	@ 0x29
 800dd90:	d157      	bne.n	800de42 <__hexnan+0x132>
 800dd92:	3102      	adds	r1, #2
 800dd94:	f8ca 1000 	str.w	r1, [sl]
 800dd98:	f1bb 0f00 	cmp.w	fp, #0
 800dd9c:	d051      	beq.n	800de42 <__hexnan+0x132>
 800dd9e:	454c      	cmp	r4, r9
 800dda0:	d206      	bcs.n	800ddb0 <__hexnan+0xa0>
 800dda2:	2d07      	cmp	r5, #7
 800dda4:	dc04      	bgt.n	800ddb0 <__hexnan+0xa0>
 800dda6:	462a      	mov	r2, r5
 800dda8:	4649      	mov	r1, r9
 800ddaa:	4620      	mov	r0, r4
 800ddac:	f7ff ff8a 	bl	800dcc4 <L_shift>
 800ddb0:	4544      	cmp	r4, r8
 800ddb2:	d936      	bls.n	800de22 <__hexnan+0x112>
 800ddb4:	f1a8 0204 	sub.w	r2, r8, #4
 800ddb8:	4623      	mov	r3, r4
 800ddba:	f853 1b04 	ldr.w	r1, [r3], #4
 800ddbe:	f842 1f04 	str.w	r1, [r2, #4]!
 800ddc2:	429f      	cmp	r7, r3
 800ddc4:	d2f9      	bcs.n	800ddba <__hexnan+0xaa>
 800ddc6:	1b3b      	subs	r3, r7, r4
 800ddc8:	f023 0303 	bic.w	r3, r3, #3
 800ddcc:	3304      	adds	r3, #4
 800ddce:	3401      	adds	r4, #1
 800ddd0:	3e03      	subs	r6, #3
 800ddd2:	42b4      	cmp	r4, r6
 800ddd4:	bf88      	it	hi
 800ddd6:	2304      	movhi	r3, #4
 800ddd8:	4443      	add	r3, r8
 800ddda:	2200      	movs	r2, #0
 800dddc:	f843 2b04 	str.w	r2, [r3], #4
 800dde0:	429f      	cmp	r7, r3
 800dde2:	d2fb      	bcs.n	800dddc <__hexnan+0xcc>
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	b91b      	cbnz	r3, 800ddf0 <__hexnan+0xe0>
 800dde8:	4547      	cmp	r7, r8
 800ddea:	d128      	bne.n	800de3e <__hexnan+0x12e>
 800ddec:	2301      	movs	r3, #1
 800ddee:	603b      	str	r3, [r7, #0]
 800ddf0:	2005      	movs	r0, #5
 800ddf2:	b007      	add	sp, #28
 800ddf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddf8:	3501      	adds	r5, #1
 800ddfa:	2d08      	cmp	r5, #8
 800ddfc:	f10b 0b01 	add.w	fp, fp, #1
 800de00:	dd06      	ble.n	800de10 <__hexnan+0x100>
 800de02:	4544      	cmp	r4, r8
 800de04:	d9c1      	bls.n	800dd8a <__hexnan+0x7a>
 800de06:	2300      	movs	r3, #0
 800de08:	f844 3c04 	str.w	r3, [r4, #-4]
 800de0c:	2501      	movs	r5, #1
 800de0e:	3c04      	subs	r4, #4
 800de10:	6822      	ldr	r2, [r4, #0]
 800de12:	f000 000f 	and.w	r0, r0, #15
 800de16:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800de1a:	6020      	str	r0, [r4, #0]
 800de1c:	e7b5      	b.n	800dd8a <__hexnan+0x7a>
 800de1e:	2508      	movs	r5, #8
 800de20:	e7b3      	b.n	800dd8a <__hexnan+0x7a>
 800de22:	9b01      	ldr	r3, [sp, #4]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d0dd      	beq.n	800dde4 <__hexnan+0xd4>
 800de28:	f1c3 0320 	rsb	r3, r3, #32
 800de2c:	f04f 32ff 	mov.w	r2, #4294967295
 800de30:	40da      	lsrs	r2, r3
 800de32:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800de36:	4013      	ands	r3, r2
 800de38:	f846 3c04 	str.w	r3, [r6, #-4]
 800de3c:	e7d2      	b.n	800dde4 <__hexnan+0xd4>
 800de3e:	3f04      	subs	r7, #4
 800de40:	e7d0      	b.n	800dde4 <__hexnan+0xd4>
 800de42:	2004      	movs	r0, #4
 800de44:	e7d5      	b.n	800ddf2 <__hexnan+0xe2>

0800de46 <__ascii_mbtowc>:
 800de46:	b082      	sub	sp, #8
 800de48:	b901      	cbnz	r1, 800de4c <__ascii_mbtowc+0x6>
 800de4a:	a901      	add	r1, sp, #4
 800de4c:	b142      	cbz	r2, 800de60 <__ascii_mbtowc+0x1a>
 800de4e:	b14b      	cbz	r3, 800de64 <__ascii_mbtowc+0x1e>
 800de50:	7813      	ldrb	r3, [r2, #0]
 800de52:	600b      	str	r3, [r1, #0]
 800de54:	7812      	ldrb	r2, [r2, #0]
 800de56:	1e10      	subs	r0, r2, #0
 800de58:	bf18      	it	ne
 800de5a:	2001      	movne	r0, #1
 800de5c:	b002      	add	sp, #8
 800de5e:	4770      	bx	lr
 800de60:	4610      	mov	r0, r2
 800de62:	e7fb      	b.n	800de5c <__ascii_mbtowc+0x16>
 800de64:	f06f 0001 	mvn.w	r0, #1
 800de68:	e7f8      	b.n	800de5c <__ascii_mbtowc+0x16>

0800de6a <_realloc_r>:
 800de6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de6e:	4680      	mov	r8, r0
 800de70:	4615      	mov	r5, r2
 800de72:	460c      	mov	r4, r1
 800de74:	b921      	cbnz	r1, 800de80 <_realloc_r+0x16>
 800de76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de7a:	4611      	mov	r1, r2
 800de7c:	f7fd bec2 	b.w	800bc04 <_malloc_r>
 800de80:	b92a      	cbnz	r2, 800de8e <_realloc_r+0x24>
 800de82:	f7fd fe4b 	bl	800bb1c <_free_r>
 800de86:	2400      	movs	r4, #0
 800de88:	4620      	mov	r0, r4
 800de8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de8e:	f000 f840 	bl	800df12 <_malloc_usable_size_r>
 800de92:	4285      	cmp	r5, r0
 800de94:	4606      	mov	r6, r0
 800de96:	d802      	bhi.n	800de9e <_realloc_r+0x34>
 800de98:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800de9c:	d8f4      	bhi.n	800de88 <_realloc_r+0x1e>
 800de9e:	4629      	mov	r1, r5
 800dea0:	4640      	mov	r0, r8
 800dea2:	f7fd feaf 	bl	800bc04 <_malloc_r>
 800dea6:	4607      	mov	r7, r0
 800dea8:	2800      	cmp	r0, #0
 800deaa:	d0ec      	beq.n	800de86 <_realloc_r+0x1c>
 800deac:	42b5      	cmp	r5, r6
 800deae:	462a      	mov	r2, r5
 800deb0:	4621      	mov	r1, r4
 800deb2:	bf28      	it	cs
 800deb4:	4632      	movcs	r2, r6
 800deb6:	f7fd f83e 	bl	800af36 <memcpy>
 800deba:	4621      	mov	r1, r4
 800debc:	4640      	mov	r0, r8
 800debe:	f7fd fe2d 	bl	800bb1c <_free_r>
 800dec2:	463c      	mov	r4, r7
 800dec4:	e7e0      	b.n	800de88 <_realloc_r+0x1e>

0800dec6 <__ascii_wctomb>:
 800dec6:	4603      	mov	r3, r0
 800dec8:	4608      	mov	r0, r1
 800deca:	b141      	cbz	r1, 800dede <__ascii_wctomb+0x18>
 800decc:	2aff      	cmp	r2, #255	@ 0xff
 800dece:	d904      	bls.n	800deda <__ascii_wctomb+0x14>
 800ded0:	228a      	movs	r2, #138	@ 0x8a
 800ded2:	601a      	str	r2, [r3, #0]
 800ded4:	f04f 30ff 	mov.w	r0, #4294967295
 800ded8:	4770      	bx	lr
 800deda:	700a      	strb	r2, [r1, #0]
 800dedc:	2001      	movs	r0, #1
 800dede:	4770      	bx	lr

0800dee0 <fiprintf>:
 800dee0:	b40e      	push	{r1, r2, r3}
 800dee2:	b503      	push	{r0, r1, lr}
 800dee4:	4601      	mov	r1, r0
 800dee6:	ab03      	add	r3, sp, #12
 800dee8:	4805      	ldr	r0, [pc, #20]	@ (800df00 <fiprintf+0x20>)
 800deea:	f853 2b04 	ldr.w	r2, [r3], #4
 800deee:	6800      	ldr	r0, [r0, #0]
 800def0:	9301      	str	r3, [sp, #4]
 800def2:	f000 f83f 	bl	800df74 <_vfiprintf_r>
 800def6:	b002      	add	sp, #8
 800def8:	f85d eb04 	ldr.w	lr, [sp], #4
 800defc:	b003      	add	sp, #12
 800defe:	4770      	bx	lr
 800df00:	2000001c 	.word	0x2000001c

0800df04 <abort>:
 800df04:	b508      	push	{r3, lr}
 800df06:	2006      	movs	r0, #6
 800df08:	f000 fa08 	bl	800e31c <raise>
 800df0c:	2001      	movs	r0, #1
 800df0e:	f7f3 fc45 	bl	800179c <_exit>

0800df12 <_malloc_usable_size_r>:
 800df12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df16:	1f18      	subs	r0, r3, #4
 800df18:	2b00      	cmp	r3, #0
 800df1a:	bfbc      	itt	lt
 800df1c:	580b      	ldrlt	r3, [r1, r0]
 800df1e:	18c0      	addlt	r0, r0, r3
 800df20:	4770      	bx	lr

0800df22 <__sfputc_r>:
 800df22:	6893      	ldr	r3, [r2, #8]
 800df24:	3b01      	subs	r3, #1
 800df26:	2b00      	cmp	r3, #0
 800df28:	b410      	push	{r4}
 800df2a:	6093      	str	r3, [r2, #8]
 800df2c:	da08      	bge.n	800df40 <__sfputc_r+0x1e>
 800df2e:	6994      	ldr	r4, [r2, #24]
 800df30:	42a3      	cmp	r3, r4
 800df32:	db01      	blt.n	800df38 <__sfputc_r+0x16>
 800df34:	290a      	cmp	r1, #10
 800df36:	d103      	bne.n	800df40 <__sfputc_r+0x1e>
 800df38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df3c:	f000 b932 	b.w	800e1a4 <__swbuf_r>
 800df40:	6813      	ldr	r3, [r2, #0]
 800df42:	1c58      	adds	r0, r3, #1
 800df44:	6010      	str	r0, [r2, #0]
 800df46:	7019      	strb	r1, [r3, #0]
 800df48:	4608      	mov	r0, r1
 800df4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df4e:	4770      	bx	lr

0800df50 <__sfputs_r>:
 800df50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df52:	4606      	mov	r6, r0
 800df54:	460f      	mov	r7, r1
 800df56:	4614      	mov	r4, r2
 800df58:	18d5      	adds	r5, r2, r3
 800df5a:	42ac      	cmp	r4, r5
 800df5c:	d101      	bne.n	800df62 <__sfputs_r+0x12>
 800df5e:	2000      	movs	r0, #0
 800df60:	e007      	b.n	800df72 <__sfputs_r+0x22>
 800df62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df66:	463a      	mov	r2, r7
 800df68:	4630      	mov	r0, r6
 800df6a:	f7ff ffda 	bl	800df22 <__sfputc_r>
 800df6e:	1c43      	adds	r3, r0, #1
 800df70:	d1f3      	bne.n	800df5a <__sfputs_r+0xa>
 800df72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800df74 <_vfiprintf_r>:
 800df74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df78:	460d      	mov	r5, r1
 800df7a:	b09d      	sub	sp, #116	@ 0x74
 800df7c:	4614      	mov	r4, r2
 800df7e:	4698      	mov	r8, r3
 800df80:	4606      	mov	r6, r0
 800df82:	b118      	cbz	r0, 800df8c <_vfiprintf_r+0x18>
 800df84:	6a03      	ldr	r3, [r0, #32]
 800df86:	b90b      	cbnz	r3, 800df8c <_vfiprintf_r+0x18>
 800df88:	f7fc fe66 	bl	800ac58 <__sinit>
 800df8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df8e:	07d9      	lsls	r1, r3, #31
 800df90:	d405      	bmi.n	800df9e <_vfiprintf_r+0x2a>
 800df92:	89ab      	ldrh	r3, [r5, #12]
 800df94:	059a      	lsls	r2, r3, #22
 800df96:	d402      	bmi.n	800df9e <_vfiprintf_r+0x2a>
 800df98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df9a:	f7fc ffca 	bl	800af32 <__retarget_lock_acquire_recursive>
 800df9e:	89ab      	ldrh	r3, [r5, #12]
 800dfa0:	071b      	lsls	r3, r3, #28
 800dfa2:	d501      	bpl.n	800dfa8 <_vfiprintf_r+0x34>
 800dfa4:	692b      	ldr	r3, [r5, #16]
 800dfa6:	b99b      	cbnz	r3, 800dfd0 <_vfiprintf_r+0x5c>
 800dfa8:	4629      	mov	r1, r5
 800dfaa:	4630      	mov	r0, r6
 800dfac:	f000 f938 	bl	800e220 <__swsetup_r>
 800dfb0:	b170      	cbz	r0, 800dfd0 <_vfiprintf_r+0x5c>
 800dfb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfb4:	07dc      	lsls	r4, r3, #31
 800dfb6:	d504      	bpl.n	800dfc2 <_vfiprintf_r+0x4e>
 800dfb8:	f04f 30ff 	mov.w	r0, #4294967295
 800dfbc:	b01d      	add	sp, #116	@ 0x74
 800dfbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfc2:	89ab      	ldrh	r3, [r5, #12]
 800dfc4:	0598      	lsls	r0, r3, #22
 800dfc6:	d4f7      	bmi.n	800dfb8 <_vfiprintf_r+0x44>
 800dfc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dfca:	f7fc ffb3 	bl	800af34 <__retarget_lock_release_recursive>
 800dfce:	e7f3      	b.n	800dfb8 <_vfiprintf_r+0x44>
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfd4:	2320      	movs	r3, #32
 800dfd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dfda:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfde:	2330      	movs	r3, #48	@ 0x30
 800dfe0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e190 <_vfiprintf_r+0x21c>
 800dfe4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dfe8:	f04f 0901 	mov.w	r9, #1
 800dfec:	4623      	mov	r3, r4
 800dfee:	469a      	mov	sl, r3
 800dff0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dff4:	b10a      	cbz	r2, 800dffa <_vfiprintf_r+0x86>
 800dff6:	2a25      	cmp	r2, #37	@ 0x25
 800dff8:	d1f9      	bne.n	800dfee <_vfiprintf_r+0x7a>
 800dffa:	ebba 0b04 	subs.w	fp, sl, r4
 800dffe:	d00b      	beq.n	800e018 <_vfiprintf_r+0xa4>
 800e000:	465b      	mov	r3, fp
 800e002:	4622      	mov	r2, r4
 800e004:	4629      	mov	r1, r5
 800e006:	4630      	mov	r0, r6
 800e008:	f7ff ffa2 	bl	800df50 <__sfputs_r>
 800e00c:	3001      	adds	r0, #1
 800e00e:	f000 80a7 	beq.w	800e160 <_vfiprintf_r+0x1ec>
 800e012:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e014:	445a      	add	r2, fp
 800e016:	9209      	str	r2, [sp, #36]	@ 0x24
 800e018:	f89a 3000 	ldrb.w	r3, [sl]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	f000 809f 	beq.w	800e160 <_vfiprintf_r+0x1ec>
 800e022:	2300      	movs	r3, #0
 800e024:	f04f 32ff 	mov.w	r2, #4294967295
 800e028:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e02c:	f10a 0a01 	add.w	sl, sl, #1
 800e030:	9304      	str	r3, [sp, #16]
 800e032:	9307      	str	r3, [sp, #28]
 800e034:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e038:	931a      	str	r3, [sp, #104]	@ 0x68
 800e03a:	4654      	mov	r4, sl
 800e03c:	2205      	movs	r2, #5
 800e03e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e042:	4853      	ldr	r0, [pc, #332]	@ (800e190 <_vfiprintf_r+0x21c>)
 800e044:	f7f2 f8fc 	bl	8000240 <memchr>
 800e048:	9a04      	ldr	r2, [sp, #16]
 800e04a:	b9d8      	cbnz	r0, 800e084 <_vfiprintf_r+0x110>
 800e04c:	06d1      	lsls	r1, r2, #27
 800e04e:	bf44      	itt	mi
 800e050:	2320      	movmi	r3, #32
 800e052:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e056:	0713      	lsls	r3, r2, #28
 800e058:	bf44      	itt	mi
 800e05a:	232b      	movmi	r3, #43	@ 0x2b
 800e05c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e060:	f89a 3000 	ldrb.w	r3, [sl]
 800e064:	2b2a      	cmp	r3, #42	@ 0x2a
 800e066:	d015      	beq.n	800e094 <_vfiprintf_r+0x120>
 800e068:	9a07      	ldr	r2, [sp, #28]
 800e06a:	4654      	mov	r4, sl
 800e06c:	2000      	movs	r0, #0
 800e06e:	f04f 0c0a 	mov.w	ip, #10
 800e072:	4621      	mov	r1, r4
 800e074:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e078:	3b30      	subs	r3, #48	@ 0x30
 800e07a:	2b09      	cmp	r3, #9
 800e07c:	d94b      	bls.n	800e116 <_vfiprintf_r+0x1a2>
 800e07e:	b1b0      	cbz	r0, 800e0ae <_vfiprintf_r+0x13a>
 800e080:	9207      	str	r2, [sp, #28]
 800e082:	e014      	b.n	800e0ae <_vfiprintf_r+0x13a>
 800e084:	eba0 0308 	sub.w	r3, r0, r8
 800e088:	fa09 f303 	lsl.w	r3, r9, r3
 800e08c:	4313      	orrs	r3, r2
 800e08e:	9304      	str	r3, [sp, #16]
 800e090:	46a2      	mov	sl, r4
 800e092:	e7d2      	b.n	800e03a <_vfiprintf_r+0xc6>
 800e094:	9b03      	ldr	r3, [sp, #12]
 800e096:	1d19      	adds	r1, r3, #4
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	9103      	str	r1, [sp, #12]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	bfbb      	ittet	lt
 800e0a0:	425b      	neglt	r3, r3
 800e0a2:	f042 0202 	orrlt.w	r2, r2, #2
 800e0a6:	9307      	strge	r3, [sp, #28]
 800e0a8:	9307      	strlt	r3, [sp, #28]
 800e0aa:	bfb8      	it	lt
 800e0ac:	9204      	strlt	r2, [sp, #16]
 800e0ae:	7823      	ldrb	r3, [r4, #0]
 800e0b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800e0b2:	d10a      	bne.n	800e0ca <_vfiprintf_r+0x156>
 800e0b4:	7863      	ldrb	r3, [r4, #1]
 800e0b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0b8:	d132      	bne.n	800e120 <_vfiprintf_r+0x1ac>
 800e0ba:	9b03      	ldr	r3, [sp, #12]
 800e0bc:	1d1a      	adds	r2, r3, #4
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	9203      	str	r2, [sp, #12]
 800e0c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e0c6:	3402      	adds	r4, #2
 800e0c8:	9305      	str	r3, [sp, #20]
 800e0ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e1a0 <_vfiprintf_r+0x22c>
 800e0ce:	7821      	ldrb	r1, [r4, #0]
 800e0d0:	2203      	movs	r2, #3
 800e0d2:	4650      	mov	r0, sl
 800e0d4:	f7f2 f8b4 	bl	8000240 <memchr>
 800e0d8:	b138      	cbz	r0, 800e0ea <_vfiprintf_r+0x176>
 800e0da:	9b04      	ldr	r3, [sp, #16]
 800e0dc:	eba0 000a 	sub.w	r0, r0, sl
 800e0e0:	2240      	movs	r2, #64	@ 0x40
 800e0e2:	4082      	lsls	r2, r0
 800e0e4:	4313      	orrs	r3, r2
 800e0e6:	3401      	adds	r4, #1
 800e0e8:	9304      	str	r3, [sp, #16]
 800e0ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0ee:	4829      	ldr	r0, [pc, #164]	@ (800e194 <_vfiprintf_r+0x220>)
 800e0f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e0f4:	2206      	movs	r2, #6
 800e0f6:	f7f2 f8a3 	bl	8000240 <memchr>
 800e0fa:	2800      	cmp	r0, #0
 800e0fc:	d03f      	beq.n	800e17e <_vfiprintf_r+0x20a>
 800e0fe:	4b26      	ldr	r3, [pc, #152]	@ (800e198 <_vfiprintf_r+0x224>)
 800e100:	bb1b      	cbnz	r3, 800e14a <_vfiprintf_r+0x1d6>
 800e102:	9b03      	ldr	r3, [sp, #12]
 800e104:	3307      	adds	r3, #7
 800e106:	f023 0307 	bic.w	r3, r3, #7
 800e10a:	3308      	adds	r3, #8
 800e10c:	9303      	str	r3, [sp, #12]
 800e10e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e110:	443b      	add	r3, r7
 800e112:	9309      	str	r3, [sp, #36]	@ 0x24
 800e114:	e76a      	b.n	800dfec <_vfiprintf_r+0x78>
 800e116:	fb0c 3202 	mla	r2, ip, r2, r3
 800e11a:	460c      	mov	r4, r1
 800e11c:	2001      	movs	r0, #1
 800e11e:	e7a8      	b.n	800e072 <_vfiprintf_r+0xfe>
 800e120:	2300      	movs	r3, #0
 800e122:	3401      	adds	r4, #1
 800e124:	9305      	str	r3, [sp, #20]
 800e126:	4619      	mov	r1, r3
 800e128:	f04f 0c0a 	mov.w	ip, #10
 800e12c:	4620      	mov	r0, r4
 800e12e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e132:	3a30      	subs	r2, #48	@ 0x30
 800e134:	2a09      	cmp	r2, #9
 800e136:	d903      	bls.n	800e140 <_vfiprintf_r+0x1cc>
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d0c6      	beq.n	800e0ca <_vfiprintf_r+0x156>
 800e13c:	9105      	str	r1, [sp, #20]
 800e13e:	e7c4      	b.n	800e0ca <_vfiprintf_r+0x156>
 800e140:	fb0c 2101 	mla	r1, ip, r1, r2
 800e144:	4604      	mov	r4, r0
 800e146:	2301      	movs	r3, #1
 800e148:	e7f0      	b.n	800e12c <_vfiprintf_r+0x1b8>
 800e14a:	ab03      	add	r3, sp, #12
 800e14c:	9300      	str	r3, [sp, #0]
 800e14e:	462a      	mov	r2, r5
 800e150:	4b12      	ldr	r3, [pc, #72]	@ (800e19c <_vfiprintf_r+0x228>)
 800e152:	a904      	add	r1, sp, #16
 800e154:	4630      	mov	r0, r6
 800e156:	f7fb ff3f 	bl	8009fd8 <_printf_float>
 800e15a:	4607      	mov	r7, r0
 800e15c:	1c78      	adds	r0, r7, #1
 800e15e:	d1d6      	bne.n	800e10e <_vfiprintf_r+0x19a>
 800e160:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e162:	07d9      	lsls	r1, r3, #31
 800e164:	d405      	bmi.n	800e172 <_vfiprintf_r+0x1fe>
 800e166:	89ab      	ldrh	r3, [r5, #12]
 800e168:	059a      	lsls	r2, r3, #22
 800e16a:	d402      	bmi.n	800e172 <_vfiprintf_r+0x1fe>
 800e16c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e16e:	f7fc fee1 	bl	800af34 <__retarget_lock_release_recursive>
 800e172:	89ab      	ldrh	r3, [r5, #12]
 800e174:	065b      	lsls	r3, r3, #25
 800e176:	f53f af1f 	bmi.w	800dfb8 <_vfiprintf_r+0x44>
 800e17a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e17c:	e71e      	b.n	800dfbc <_vfiprintf_r+0x48>
 800e17e:	ab03      	add	r3, sp, #12
 800e180:	9300      	str	r3, [sp, #0]
 800e182:	462a      	mov	r2, r5
 800e184:	4b05      	ldr	r3, [pc, #20]	@ (800e19c <_vfiprintf_r+0x228>)
 800e186:	a904      	add	r1, sp, #16
 800e188:	4630      	mov	r0, r6
 800e18a:	f7fc f9ad 	bl	800a4e8 <_printf_i>
 800e18e:	e7e4      	b.n	800e15a <_vfiprintf_r+0x1e6>
 800e190:	0800e959 	.word	0x0800e959
 800e194:	0800e963 	.word	0x0800e963
 800e198:	08009fd9 	.word	0x08009fd9
 800e19c:	0800df51 	.word	0x0800df51
 800e1a0:	0800e95f 	.word	0x0800e95f

0800e1a4 <__swbuf_r>:
 800e1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1a6:	460e      	mov	r6, r1
 800e1a8:	4614      	mov	r4, r2
 800e1aa:	4605      	mov	r5, r0
 800e1ac:	b118      	cbz	r0, 800e1b6 <__swbuf_r+0x12>
 800e1ae:	6a03      	ldr	r3, [r0, #32]
 800e1b0:	b90b      	cbnz	r3, 800e1b6 <__swbuf_r+0x12>
 800e1b2:	f7fc fd51 	bl	800ac58 <__sinit>
 800e1b6:	69a3      	ldr	r3, [r4, #24]
 800e1b8:	60a3      	str	r3, [r4, #8]
 800e1ba:	89a3      	ldrh	r3, [r4, #12]
 800e1bc:	071a      	lsls	r2, r3, #28
 800e1be:	d501      	bpl.n	800e1c4 <__swbuf_r+0x20>
 800e1c0:	6923      	ldr	r3, [r4, #16]
 800e1c2:	b943      	cbnz	r3, 800e1d6 <__swbuf_r+0x32>
 800e1c4:	4621      	mov	r1, r4
 800e1c6:	4628      	mov	r0, r5
 800e1c8:	f000 f82a 	bl	800e220 <__swsetup_r>
 800e1cc:	b118      	cbz	r0, 800e1d6 <__swbuf_r+0x32>
 800e1ce:	f04f 37ff 	mov.w	r7, #4294967295
 800e1d2:	4638      	mov	r0, r7
 800e1d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1d6:	6823      	ldr	r3, [r4, #0]
 800e1d8:	6922      	ldr	r2, [r4, #16]
 800e1da:	1a98      	subs	r0, r3, r2
 800e1dc:	6963      	ldr	r3, [r4, #20]
 800e1de:	b2f6      	uxtb	r6, r6
 800e1e0:	4283      	cmp	r3, r0
 800e1e2:	4637      	mov	r7, r6
 800e1e4:	dc05      	bgt.n	800e1f2 <__swbuf_r+0x4e>
 800e1e6:	4621      	mov	r1, r4
 800e1e8:	4628      	mov	r0, r5
 800e1ea:	f7ff fa55 	bl	800d698 <_fflush_r>
 800e1ee:	2800      	cmp	r0, #0
 800e1f0:	d1ed      	bne.n	800e1ce <__swbuf_r+0x2a>
 800e1f2:	68a3      	ldr	r3, [r4, #8]
 800e1f4:	3b01      	subs	r3, #1
 800e1f6:	60a3      	str	r3, [r4, #8]
 800e1f8:	6823      	ldr	r3, [r4, #0]
 800e1fa:	1c5a      	adds	r2, r3, #1
 800e1fc:	6022      	str	r2, [r4, #0]
 800e1fe:	701e      	strb	r6, [r3, #0]
 800e200:	6962      	ldr	r2, [r4, #20]
 800e202:	1c43      	adds	r3, r0, #1
 800e204:	429a      	cmp	r2, r3
 800e206:	d004      	beq.n	800e212 <__swbuf_r+0x6e>
 800e208:	89a3      	ldrh	r3, [r4, #12]
 800e20a:	07db      	lsls	r3, r3, #31
 800e20c:	d5e1      	bpl.n	800e1d2 <__swbuf_r+0x2e>
 800e20e:	2e0a      	cmp	r6, #10
 800e210:	d1df      	bne.n	800e1d2 <__swbuf_r+0x2e>
 800e212:	4621      	mov	r1, r4
 800e214:	4628      	mov	r0, r5
 800e216:	f7ff fa3f 	bl	800d698 <_fflush_r>
 800e21a:	2800      	cmp	r0, #0
 800e21c:	d0d9      	beq.n	800e1d2 <__swbuf_r+0x2e>
 800e21e:	e7d6      	b.n	800e1ce <__swbuf_r+0x2a>

0800e220 <__swsetup_r>:
 800e220:	b538      	push	{r3, r4, r5, lr}
 800e222:	4b29      	ldr	r3, [pc, #164]	@ (800e2c8 <__swsetup_r+0xa8>)
 800e224:	4605      	mov	r5, r0
 800e226:	6818      	ldr	r0, [r3, #0]
 800e228:	460c      	mov	r4, r1
 800e22a:	b118      	cbz	r0, 800e234 <__swsetup_r+0x14>
 800e22c:	6a03      	ldr	r3, [r0, #32]
 800e22e:	b90b      	cbnz	r3, 800e234 <__swsetup_r+0x14>
 800e230:	f7fc fd12 	bl	800ac58 <__sinit>
 800e234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e238:	0719      	lsls	r1, r3, #28
 800e23a:	d422      	bmi.n	800e282 <__swsetup_r+0x62>
 800e23c:	06da      	lsls	r2, r3, #27
 800e23e:	d407      	bmi.n	800e250 <__swsetup_r+0x30>
 800e240:	2209      	movs	r2, #9
 800e242:	602a      	str	r2, [r5, #0]
 800e244:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e248:	81a3      	strh	r3, [r4, #12]
 800e24a:	f04f 30ff 	mov.w	r0, #4294967295
 800e24e:	e033      	b.n	800e2b8 <__swsetup_r+0x98>
 800e250:	0758      	lsls	r0, r3, #29
 800e252:	d512      	bpl.n	800e27a <__swsetup_r+0x5a>
 800e254:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e256:	b141      	cbz	r1, 800e26a <__swsetup_r+0x4a>
 800e258:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e25c:	4299      	cmp	r1, r3
 800e25e:	d002      	beq.n	800e266 <__swsetup_r+0x46>
 800e260:	4628      	mov	r0, r5
 800e262:	f7fd fc5b 	bl	800bb1c <_free_r>
 800e266:	2300      	movs	r3, #0
 800e268:	6363      	str	r3, [r4, #52]	@ 0x34
 800e26a:	89a3      	ldrh	r3, [r4, #12]
 800e26c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e270:	81a3      	strh	r3, [r4, #12]
 800e272:	2300      	movs	r3, #0
 800e274:	6063      	str	r3, [r4, #4]
 800e276:	6923      	ldr	r3, [r4, #16]
 800e278:	6023      	str	r3, [r4, #0]
 800e27a:	89a3      	ldrh	r3, [r4, #12]
 800e27c:	f043 0308 	orr.w	r3, r3, #8
 800e280:	81a3      	strh	r3, [r4, #12]
 800e282:	6923      	ldr	r3, [r4, #16]
 800e284:	b94b      	cbnz	r3, 800e29a <__swsetup_r+0x7a>
 800e286:	89a3      	ldrh	r3, [r4, #12]
 800e288:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e28c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e290:	d003      	beq.n	800e29a <__swsetup_r+0x7a>
 800e292:	4621      	mov	r1, r4
 800e294:	4628      	mov	r0, r5
 800e296:	f000 f883 	bl	800e3a0 <__smakebuf_r>
 800e29a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e29e:	f013 0201 	ands.w	r2, r3, #1
 800e2a2:	d00a      	beq.n	800e2ba <__swsetup_r+0x9a>
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	60a2      	str	r2, [r4, #8]
 800e2a8:	6962      	ldr	r2, [r4, #20]
 800e2aa:	4252      	negs	r2, r2
 800e2ac:	61a2      	str	r2, [r4, #24]
 800e2ae:	6922      	ldr	r2, [r4, #16]
 800e2b0:	b942      	cbnz	r2, 800e2c4 <__swsetup_r+0xa4>
 800e2b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e2b6:	d1c5      	bne.n	800e244 <__swsetup_r+0x24>
 800e2b8:	bd38      	pop	{r3, r4, r5, pc}
 800e2ba:	0799      	lsls	r1, r3, #30
 800e2bc:	bf58      	it	pl
 800e2be:	6962      	ldrpl	r2, [r4, #20]
 800e2c0:	60a2      	str	r2, [r4, #8]
 800e2c2:	e7f4      	b.n	800e2ae <__swsetup_r+0x8e>
 800e2c4:	2000      	movs	r0, #0
 800e2c6:	e7f7      	b.n	800e2b8 <__swsetup_r+0x98>
 800e2c8:	2000001c 	.word	0x2000001c

0800e2cc <_raise_r>:
 800e2cc:	291f      	cmp	r1, #31
 800e2ce:	b538      	push	{r3, r4, r5, lr}
 800e2d0:	4605      	mov	r5, r0
 800e2d2:	460c      	mov	r4, r1
 800e2d4:	d904      	bls.n	800e2e0 <_raise_r+0x14>
 800e2d6:	2316      	movs	r3, #22
 800e2d8:	6003      	str	r3, [r0, #0]
 800e2da:	f04f 30ff 	mov.w	r0, #4294967295
 800e2de:	bd38      	pop	{r3, r4, r5, pc}
 800e2e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e2e2:	b112      	cbz	r2, 800e2ea <_raise_r+0x1e>
 800e2e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2e8:	b94b      	cbnz	r3, 800e2fe <_raise_r+0x32>
 800e2ea:	4628      	mov	r0, r5
 800e2ec:	f000 f830 	bl	800e350 <_getpid_r>
 800e2f0:	4622      	mov	r2, r4
 800e2f2:	4601      	mov	r1, r0
 800e2f4:	4628      	mov	r0, r5
 800e2f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2fa:	f000 b817 	b.w	800e32c <_kill_r>
 800e2fe:	2b01      	cmp	r3, #1
 800e300:	d00a      	beq.n	800e318 <_raise_r+0x4c>
 800e302:	1c59      	adds	r1, r3, #1
 800e304:	d103      	bne.n	800e30e <_raise_r+0x42>
 800e306:	2316      	movs	r3, #22
 800e308:	6003      	str	r3, [r0, #0]
 800e30a:	2001      	movs	r0, #1
 800e30c:	e7e7      	b.n	800e2de <_raise_r+0x12>
 800e30e:	2100      	movs	r1, #0
 800e310:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e314:	4620      	mov	r0, r4
 800e316:	4798      	blx	r3
 800e318:	2000      	movs	r0, #0
 800e31a:	e7e0      	b.n	800e2de <_raise_r+0x12>

0800e31c <raise>:
 800e31c:	4b02      	ldr	r3, [pc, #8]	@ (800e328 <raise+0xc>)
 800e31e:	4601      	mov	r1, r0
 800e320:	6818      	ldr	r0, [r3, #0]
 800e322:	f7ff bfd3 	b.w	800e2cc <_raise_r>
 800e326:	bf00      	nop
 800e328:	2000001c 	.word	0x2000001c

0800e32c <_kill_r>:
 800e32c:	b538      	push	{r3, r4, r5, lr}
 800e32e:	4d07      	ldr	r5, [pc, #28]	@ (800e34c <_kill_r+0x20>)
 800e330:	2300      	movs	r3, #0
 800e332:	4604      	mov	r4, r0
 800e334:	4608      	mov	r0, r1
 800e336:	4611      	mov	r1, r2
 800e338:	602b      	str	r3, [r5, #0]
 800e33a:	f7f3 fa1f 	bl	800177c <_kill>
 800e33e:	1c43      	adds	r3, r0, #1
 800e340:	d102      	bne.n	800e348 <_kill_r+0x1c>
 800e342:	682b      	ldr	r3, [r5, #0]
 800e344:	b103      	cbz	r3, 800e348 <_kill_r+0x1c>
 800e346:	6023      	str	r3, [r4, #0]
 800e348:	bd38      	pop	{r3, r4, r5, pc}
 800e34a:	bf00      	nop
 800e34c:	20005dbc 	.word	0x20005dbc

0800e350 <_getpid_r>:
 800e350:	f7f3 ba0c 	b.w	800176c <_getpid>

0800e354 <__swhatbuf_r>:
 800e354:	b570      	push	{r4, r5, r6, lr}
 800e356:	460c      	mov	r4, r1
 800e358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e35c:	2900      	cmp	r1, #0
 800e35e:	b096      	sub	sp, #88	@ 0x58
 800e360:	4615      	mov	r5, r2
 800e362:	461e      	mov	r6, r3
 800e364:	da0d      	bge.n	800e382 <__swhatbuf_r+0x2e>
 800e366:	89a3      	ldrh	r3, [r4, #12]
 800e368:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e36c:	f04f 0100 	mov.w	r1, #0
 800e370:	bf14      	ite	ne
 800e372:	2340      	movne	r3, #64	@ 0x40
 800e374:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e378:	2000      	movs	r0, #0
 800e37a:	6031      	str	r1, [r6, #0]
 800e37c:	602b      	str	r3, [r5, #0]
 800e37e:	b016      	add	sp, #88	@ 0x58
 800e380:	bd70      	pop	{r4, r5, r6, pc}
 800e382:	466a      	mov	r2, sp
 800e384:	f000 f848 	bl	800e418 <_fstat_r>
 800e388:	2800      	cmp	r0, #0
 800e38a:	dbec      	blt.n	800e366 <__swhatbuf_r+0x12>
 800e38c:	9901      	ldr	r1, [sp, #4]
 800e38e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e392:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e396:	4259      	negs	r1, r3
 800e398:	4159      	adcs	r1, r3
 800e39a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e39e:	e7eb      	b.n	800e378 <__swhatbuf_r+0x24>

0800e3a0 <__smakebuf_r>:
 800e3a0:	898b      	ldrh	r3, [r1, #12]
 800e3a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e3a4:	079d      	lsls	r5, r3, #30
 800e3a6:	4606      	mov	r6, r0
 800e3a8:	460c      	mov	r4, r1
 800e3aa:	d507      	bpl.n	800e3bc <__smakebuf_r+0x1c>
 800e3ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e3b0:	6023      	str	r3, [r4, #0]
 800e3b2:	6123      	str	r3, [r4, #16]
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	6163      	str	r3, [r4, #20]
 800e3b8:	b003      	add	sp, #12
 800e3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3bc:	ab01      	add	r3, sp, #4
 800e3be:	466a      	mov	r2, sp
 800e3c0:	f7ff ffc8 	bl	800e354 <__swhatbuf_r>
 800e3c4:	9f00      	ldr	r7, [sp, #0]
 800e3c6:	4605      	mov	r5, r0
 800e3c8:	4639      	mov	r1, r7
 800e3ca:	4630      	mov	r0, r6
 800e3cc:	f7fd fc1a 	bl	800bc04 <_malloc_r>
 800e3d0:	b948      	cbnz	r0, 800e3e6 <__smakebuf_r+0x46>
 800e3d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3d6:	059a      	lsls	r2, r3, #22
 800e3d8:	d4ee      	bmi.n	800e3b8 <__smakebuf_r+0x18>
 800e3da:	f023 0303 	bic.w	r3, r3, #3
 800e3de:	f043 0302 	orr.w	r3, r3, #2
 800e3e2:	81a3      	strh	r3, [r4, #12]
 800e3e4:	e7e2      	b.n	800e3ac <__smakebuf_r+0xc>
 800e3e6:	89a3      	ldrh	r3, [r4, #12]
 800e3e8:	6020      	str	r0, [r4, #0]
 800e3ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3ee:	81a3      	strh	r3, [r4, #12]
 800e3f0:	9b01      	ldr	r3, [sp, #4]
 800e3f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e3f6:	b15b      	cbz	r3, 800e410 <__smakebuf_r+0x70>
 800e3f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3fc:	4630      	mov	r0, r6
 800e3fe:	f000 f81d 	bl	800e43c <_isatty_r>
 800e402:	b128      	cbz	r0, 800e410 <__smakebuf_r+0x70>
 800e404:	89a3      	ldrh	r3, [r4, #12]
 800e406:	f023 0303 	bic.w	r3, r3, #3
 800e40a:	f043 0301 	orr.w	r3, r3, #1
 800e40e:	81a3      	strh	r3, [r4, #12]
 800e410:	89a3      	ldrh	r3, [r4, #12]
 800e412:	431d      	orrs	r5, r3
 800e414:	81a5      	strh	r5, [r4, #12]
 800e416:	e7cf      	b.n	800e3b8 <__smakebuf_r+0x18>

0800e418 <_fstat_r>:
 800e418:	b538      	push	{r3, r4, r5, lr}
 800e41a:	4d07      	ldr	r5, [pc, #28]	@ (800e438 <_fstat_r+0x20>)
 800e41c:	2300      	movs	r3, #0
 800e41e:	4604      	mov	r4, r0
 800e420:	4608      	mov	r0, r1
 800e422:	4611      	mov	r1, r2
 800e424:	602b      	str	r3, [r5, #0]
 800e426:	f7f3 fa09 	bl	800183c <_fstat>
 800e42a:	1c43      	adds	r3, r0, #1
 800e42c:	d102      	bne.n	800e434 <_fstat_r+0x1c>
 800e42e:	682b      	ldr	r3, [r5, #0]
 800e430:	b103      	cbz	r3, 800e434 <_fstat_r+0x1c>
 800e432:	6023      	str	r3, [r4, #0]
 800e434:	bd38      	pop	{r3, r4, r5, pc}
 800e436:	bf00      	nop
 800e438:	20005dbc 	.word	0x20005dbc

0800e43c <_isatty_r>:
 800e43c:	b538      	push	{r3, r4, r5, lr}
 800e43e:	4d06      	ldr	r5, [pc, #24]	@ (800e458 <_isatty_r+0x1c>)
 800e440:	2300      	movs	r3, #0
 800e442:	4604      	mov	r4, r0
 800e444:	4608      	mov	r0, r1
 800e446:	602b      	str	r3, [r5, #0]
 800e448:	f7f3 fa08 	bl	800185c <_isatty>
 800e44c:	1c43      	adds	r3, r0, #1
 800e44e:	d102      	bne.n	800e456 <_isatty_r+0x1a>
 800e450:	682b      	ldr	r3, [r5, #0]
 800e452:	b103      	cbz	r3, 800e456 <_isatty_r+0x1a>
 800e454:	6023      	str	r3, [r4, #0]
 800e456:	bd38      	pop	{r3, r4, r5, pc}
 800e458:	20005dbc 	.word	0x20005dbc

0800e45c <_init>:
 800e45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e45e:	bf00      	nop
 800e460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e462:	bc08      	pop	{r3}
 800e464:	469e      	mov	lr, r3
 800e466:	4770      	bx	lr

0800e468 <_fini>:
 800e468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e46a:	bf00      	nop
 800e46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e46e:	bc08      	pop	{r3}
 800e470:	469e      	mov	lr, r3
 800e472:	4770      	bx	lr
